
capstone_design3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af14  0800af14  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af1c  0800af1c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800af28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001140  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200011c0  200011c0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020102  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f1b  00000000  00000000  000401ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  000430d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  000444c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d91  00000000  00000000  000457f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ebb  00000000  00000000  0006b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6e08  00000000  00000000  0008043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00167244  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e08  00000000  00000000  00167298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a35c 	.word	0x0800a35c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800a35c 	.word	0x0800a35c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__gedf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpdf2+0x4>
 800061e:	bf00      	nop

08000620 <__ledf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpdf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpdf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800063c:	bf18      	it	ne
 800063e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000642:	d01b      	beq.n	800067c <__cmpdf2+0x54>
 8000644:	b001      	add	sp, #4
 8000646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800064a:	bf0c      	ite	eq
 800064c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000650:	ea91 0f03 	teqne	r1, r3
 8000654:	bf02      	ittt	eq
 8000656:	ea90 0f02 	teqeq	r0, r2
 800065a:	2000      	moveq	r0, #0
 800065c:	4770      	bxeq	lr
 800065e:	f110 0f00 	cmn.w	r0, #0
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf58      	it	pl
 8000668:	4299      	cmppl	r1, r3
 800066a:	bf08      	it	eq
 800066c:	4290      	cmpeq	r0, r2
 800066e:	bf2c      	ite	cs
 8000670:	17d8      	asrcs	r0, r3, #31
 8000672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000676:	f040 0001 	orr.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d102      	bne.n	800068c <__cmpdf2+0x64>
 8000686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800068a:	d107      	bne.n	800069c <__cmpdf2+0x74>
 800068c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d1d6      	bne.n	8000644 <__cmpdf2+0x1c>
 8000696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800069a:	d0d3      	beq.n	8000644 <__cmpdf2+0x1c>
 800069c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdrcmple>:
 80006a4:	4684      	mov	ip, r0
 80006a6:	4610      	mov	r0, r2
 80006a8:	4662      	mov	r2, ip
 80006aa:	468c      	mov	ip, r1
 80006ac:	4619      	mov	r1, r3
 80006ae:	4663      	mov	r3, ip
 80006b0:	e000      	b.n	80006b4 <__aeabi_cdcmpeq>
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdcmpeq>:
 80006b4:	b501      	push	{r0, lr}
 80006b6:	f7ff ffb7 	bl	8000628 <__cmpdf2>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	bf48      	it	mi
 80006be:	f110 0f00 	cmnmi.w	r0, #0
 80006c2:	bd01      	pop	{r0, pc}

080006c4 <__aeabi_dcmpeq>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff fff4 	bl	80006b4 <__aeabi_cdcmpeq>
 80006cc:	bf0c      	ite	eq
 80006ce:	2001      	moveq	r0, #1
 80006d0:	2000      	movne	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_dcmplt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffea 	bl	80006b4 <__aeabi_cdcmpeq>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_dcmple>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffe0 	bl	80006b4 <__aeabi_cdcmpeq>
 80006f4:	bf94      	ite	ls
 80006f6:	2001      	movls	r0, #1
 80006f8:	2000      	movhi	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_dcmpge>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffce 	bl	80006a4 <__aeabi_cdrcmple>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_dcmpgt>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffc4 	bl	80006a4 <__aeabi_cdrcmple>
 800071c:	bf34      	ite	cc
 800071e:	2001      	movcc	r0, #1
 8000720:	2000      	movcs	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b96e 	b.w	8000a1c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9d08      	ldr	r5, [sp, #32]
 800075e:	4604      	mov	r4, r0
 8000760:	468c      	mov	ip, r1
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8083 	bne.w	800086e <__udivmoddi4+0x116>
 8000768:	428a      	cmp	r2, r1
 800076a:	4617      	mov	r7, r2
 800076c:	d947      	bls.n	80007fe <__udivmoddi4+0xa6>
 800076e:	fab2 f282 	clz	r2, r2
 8000772:	b142      	cbz	r2, 8000786 <__udivmoddi4+0x2e>
 8000774:	f1c2 0020 	rsb	r0, r2, #32
 8000778:	fa24 f000 	lsr.w	r0, r4, r0
 800077c:	4091      	lsls	r1, r2
 800077e:	4097      	lsls	r7, r2
 8000780:	ea40 0c01 	orr.w	ip, r0, r1
 8000784:	4094      	lsls	r4, r2
 8000786:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fbbc f6f8 	udiv	r6, ip, r8
 8000790:	fa1f fe87 	uxth.w	lr, r7
 8000794:	fb08 c116 	mls	r1, r8, r6, ip
 8000798:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079c:	fb06 f10e 	mul.w	r1, r6, lr
 80007a0:	4299      	cmp	r1, r3
 80007a2:	d909      	bls.n	80007b8 <__udivmoddi4+0x60>
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007aa:	f080 8119 	bcs.w	80009e0 <__udivmoddi4+0x288>
 80007ae:	4299      	cmp	r1, r3
 80007b0:	f240 8116 	bls.w	80009e0 <__udivmoddi4+0x288>
 80007b4:	3e02      	subs	r6, #2
 80007b6:	443b      	add	r3, r7
 80007b8:	1a5b      	subs	r3, r3, r1
 80007ba:	b2a4      	uxth	r4, r4
 80007bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c0:	fb08 3310 	mls	r3, r8, r0, r3
 80007c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007cc:	45a6      	cmp	lr, r4
 80007ce:	d909      	bls.n	80007e4 <__udivmoddi4+0x8c>
 80007d0:	193c      	adds	r4, r7, r4
 80007d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007d6:	f080 8105 	bcs.w	80009e4 <__udivmoddi4+0x28c>
 80007da:	45a6      	cmp	lr, r4
 80007dc:	f240 8102 	bls.w	80009e4 <__udivmoddi4+0x28c>
 80007e0:	3802      	subs	r0, #2
 80007e2:	443c      	add	r4, r7
 80007e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e8:	eba4 040e 	sub.w	r4, r4, lr
 80007ec:	2600      	movs	r6, #0
 80007ee:	b11d      	cbz	r5, 80007f8 <__udivmoddi4+0xa0>
 80007f0:	40d4      	lsrs	r4, r2
 80007f2:	2300      	movs	r3, #0
 80007f4:	e9c5 4300 	strd	r4, r3, [r5]
 80007f8:	4631      	mov	r1, r6
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fe:	b902      	cbnz	r2, 8000802 <__udivmoddi4+0xaa>
 8000800:	deff      	udf	#255	; 0xff
 8000802:	fab2 f282 	clz	r2, r2
 8000806:	2a00      	cmp	r2, #0
 8000808:	d150      	bne.n	80008ac <__udivmoddi4+0x154>
 800080a:	1bcb      	subs	r3, r1, r7
 800080c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000810:	fa1f f887 	uxth.w	r8, r7
 8000814:	2601      	movs	r6, #1
 8000816:	fbb3 fcfe 	udiv	ip, r3, lr
 800081a:	0c21      	lsrs	r1, r4, #16
 800081c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb08 f30c 	mul.w	r3, r8, ip
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0xe4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0xe2>
 8000834:	428b      	cmp	r3, r1
 8000836:	f200 80e9 	bhi.w	8000a0c <__udivmoddi4+0x2b4>
 800083a:	4684      	mov	ip, r0
 800083c:	1ac9      	subs	r1, r1, r3
 800083e:	b2a3      	uxth	r3, r4
 8000840:	fbb1 f0fe 	udiv	r0, r1, lr
 8000844:	fb0e 1110 	mls	r1, lr, r0, r1
 8000848:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800084c:	fb08 f800 	mul.w	r8, r8, r0
 8000850:	45a0      	cmp	r8, r4
 8000852:	d907      	bls.n	8000864 <__udivmoddi4+0x10c>
 8000854:	193c      	adds	r4, r7, r4
 8000856:	f100 33ff 	add.w	r3, r0, #4294967295
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x10a>
 800085c:	45a0      	cmp	r8, r4
 800085e:	f200 80d9 	bhi.w	8000a14 <__udivmoddi4+0x2bc>
 8000862:	4618      	mov	r0, r3
 8000864:	eba4 0408 	sub.w	r4, r4, r8
 8000868:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800086c:	e7bf      	b.n	80007ee <__udivmoddi4+0x96>
 800086e:	428b      	cmp	r3, r1
 8000870:	d909      	bls.n	8000886 <__udivmoddi4+0x12e>
 8000872:	2d00      	cmp	r5, #0
 8000874:	f000 80b1 	beq.w	80009da <__udivmoddi4+0x282>
 8000878:	2600      	movs	r6, #0
 800087a:	e9c5 0100 	strd	r0, r1, [r5]
 800087e:	4630      	mov	r0, r6
 8000880:	4631      	mov	r1, r6
 8000882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000886:	fab3 f683 	clz	r6, r3
 800088a:	2e00      	cmp	r6, #0
 800088c:	d14a      	bne.n	8000924 <__udivmoddi4+0x1cc>
 800088e:	428b      	cmp	r3, r1
 8000890:	d302      	bcc.n	8000898 <__udivmoddi4+0x140>
 8000892:	4282      	cmp	r2, r0
 8000894:	f200 80b8 	bhi.w	8000a08 <__udivmoddi4+0x2b0>
 8000898:	1a84      	subs	r4, r0, r2
 800089a:	eb61 0103 	sbc.w	r1, r1, r3
 800089e:	2001      	movs	r0, #1
 80008a0:	468c      	mov	ip, r1
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d0a8      	beq.n	80007f8 <__udivmoddi4+0xa0>
 80008a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008aa:	e7a5      	b.n	80007f8 <__udivmoddi4+0xa0>
 80008ac:	f1c2 0320 	rsb	r3, r2, #32
 80008b0:	fa20 f603 	lsr.w	r6, r0, r3
 80008b4:	4097      	lsls	r7, r2
 80008b6:	fa01 f002 	lsl.w	r0, r1, r2
 80008ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008be:	40d9      	lsrs	r1, r3
 80008c0:	4330      	orrs	r0, r6
 80008c2:	0c03      	lsrs	r3, r0, #16
 80008c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008c8:	fa1f f887 	uxth.w	r8, r7
 80008cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80008d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d4:	fb06 f108 	mul.w	r1, r6, r8
 80008d8:	4299      	cmp	r1, r3
 80008da:	fa04 f402 	lsl.w	r4, r4, r2
 80008de:	d909      	bls.n	80008f4 <__udivmoddi4+0x19c>
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008e6:	f080 808d 	bcs.w	8000a04 <__udivmoddi4+0x2ac>
 80008ea:	4299      	cmp	r1, r3
 80008ec:	f240 808a 	bls.w	8000a04 <__udivmoddi4+0x2ac>
 80008f0:	3e02      	subs	r6, #2
 80008f2:	443b      	add	r3, r7
 80008f4:	1a5b      	subs	r3, r3, r1
 80008f6:	b281      	uxth	r1, r0
 80008f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000900:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000904:	fb00 f308 	mul.w	r3, r0, r8
 8000908:	428b      	cmp	r3, r1
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x1c4>
 800090c:	1879      	adds	r1, r7, r1
 800090e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000912:	d273      	bcs.n	80009fc <__udivmoddi4+0x2a4>
 8000914:	428b      	cmp	r3, r1
 8000916:	d971      	bls.n	80009fc <__udivmoddi4+0x2a4>
 8000918:	3802      	subs	r0, #2
 800091a:	4439      	add	r1, r7
 800091c:	1acb      	subs	r3, r1, r3
 800091e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000922:	e778      	b.n	8000816 <__udivmoddi4+0xbe>
 8000924:	f1c6 0c20 	rsb	ip, r6, #32
 8000928:	fa03 f406 	lsl.w	r4, r3, r6
 800092c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000930:	431c      	orrs	r4, r3
 8000932:	fa20 f70c 	lsr.w	r7, r0, ip
 8000936:	fa01 f306 	lsl.w	r3, r1, r6
 800093a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800093e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000942:	431f      	orrs	r7, r3
 8000944:	0c3b      	lsrs	r3, r7, #16
 8000946:	fbb1 f9fe 	udiv	r9, r1, lr
 800094a:	fa1f f884 	uxth.w	r8, r4
 800094e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000952:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000956:	fb09 fa08 	mul.w	sl, r9, r8
 800095a:	458a      	cmp	sl, r1
 800095c:	fa02 f206 	lsl.w	r2, r2, r6
 8000960:	fa00 f306 	lsl.w	r3, r0, r6
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0x220>
 8000966:	1861      	adds	r1, r4, r1
 8000968:	f109 30ff 	add.w	r0, r9, #4294967295
 800096c:	d248      	bcs.n	8000a00 <__udivmoddi4+0x2a8>
 800096e:	458a      	cmp	sl, r1
 8000970:	d946      	bls.n	8000a00 <__udivmoddi4+0x2a8>
 8000972:	f1a9 0902 	sub.w	r9, r9, #2
 8000976:	4421      	add	r1, r4
 8000978:	eba1 010a 	sub.w	r1, r1, sl
 800097c:	b2bf      	uxth	r7, r7
 800097e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000982:	fb0e 1110 	mls	r1, lr, r0, r1
 8000986:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800098a:	fb00 f808 	mul.w	r8, r0, r8
 800098e:	45b8      	cmp	r8, r7
 8000990:	d907      	bls.n	80009a2 <__udivmoddi4+0x24a>
 8000992:	19e7      	adds	r7, r4, r7
 8000994:	f100 31ff 	add.w	r1, r0, #4294967295
 8000998:	d22e      	bcs.n	80009f8 <__udivmoddi4+0x2a0>
 800099a:	45b8      	cmp	r8, r7
 800099c:	d92c      	bls.n	80009f8 <__udivmoddi4+0x2a0>
 800099e:	3802      	subs	r0, #2
 80009a0:	4427      	add	r7, r4
 80009a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009a6:	eba7 0708 	sub.w	r7, r7, r8
 80009aa:	fba0 8902 	umull	r8, r9, r0, r2
 80009ae:	454f      	cmp	r7, r9
 80009b0:	46c6      	mov	lr, r8
 80009b2:	4649      	mov	r1, r9
 80009b4:	d31a      	bcc.n	80009ec <__udivmoddi4+0x294>
 80009b6:	d017      	beq.n	80009e8 <__udivmoddi4+0x290>
 80009b8:	b15d      	cbz	r5, 80009d2 <__udivmoddi4+0x27a>
 80009ba:	ebb3 020e 	subs.w	r2, r3, lr
 80009be:	eb67 0701 	sbc.w	r7, r7, r1
 80009c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009c6:	40f2      	lsrs	r2, r6
 80009c8:	ea4c 0202 	orr.w	r2, ip, r2
 80009cc:	40f7      	lsrs	r7, r6
 80009ce:	e9c5 2700 	strd	r2, r7, [r5]
 80009d2:	2600      	movs	r6, #0
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	462e      	mov	r6, r5
 80009dc:	4628      	mov	r0, r5
 80009de:	e70b      	b.n	80007f8 <__udivmoddi4+0xa0>
 80009e0:	4606      	mov	r6, r0
 80009e2:	e6e9      	b.n	80007b8 <__udivmoddi4+0x60>
 80009e4:	4618      	mov	r0, r3
 80009e6:	e6fd      	b.n	80007e4 <__udivmoddi4+0x8c>
 80009e8:	4543      	cmp	r3, r8
 80009ea:	d2e5      	bcs.n	80009b8 <__udivmoddi4+0x260>
 80009ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80009f0:	eb69 0104 	sbc.w	r1, r9, r4
 80009f4:	3801      	subs	r0, #1
 80009f6:	e7df      	b.n	80009b8 <__udivmoddi4+0x260>
 80009f8:	4608      	mov	r0, r1
 80009fa:	e7d2      	b.n	80009a2 <__udivmoddi4+0x24a>
 80009fc:	4660      	mov	r0, ip
 80009fe:	e78d      	b.n	800091c <__udivmoddi4+0x1c4>
 8000a00:	4681      	mov	r9, r0
 8000a02:	e7b9      	b.n	8000978 <__udivmoddi4+0x220>
 8000a04:	4666      	mov	r6, ip
 8000a06:	e775      	b.n	80008f4 <__udivmoddi4+0x19c>
 8000a08:	4630      	mov	r0, r6
 8000a0a:	e74a      	b.n	80008a2 <__udivmoddi4+0x14a>
 8000a0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a10:	4439      	add	r1, r7
 8000a12:	e713      	b.n	800083c <__udivmoddi4+0xe4>
 8000a14:	3802      	subs	r0, #2
 8000a16:	443c      	add	r4, r7
 8000a18:	e724      	b.n	8000864 <__udivmoddi4+0x10c>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_idiv0>:
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    uint32_t nsec_part= nsec % 1000000000UL;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	0a5a      	lsrs	r2, r3, #9
 8000a30:	490f      	ldr	r1, [pc, #60]	; (8000a70 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000a32:	fba1 1202 	umull	r1, r2, r1, r2
 8000a36:	09d2      	lsrs	r2, r2, #7
 8000a38:	490e      	ldr	r1, [pc, #56]	; (8000a74 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000a3a:	fb01 f202 	mul.w	r2, r1, r2
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
    uint32_t sec_part = nsec / 1000000000UL;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	09db      	lsrs	r3, r3, #7
 8000a50:	60bb      	str	r3, [r7, #8]
    sec += sec_part;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	441a      	add	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
    nsec = nsec_part;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	601a      	str	r2, [r3, #0]
  }
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	00044b83 	.word	0x00044b83
 8000a74:	3b9aca00 	.word	0x3b9aca00

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f005 ff2a 	bl	80068d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f816 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f926 	bl	8000cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a88:	f000 f8fc 	bl	8000c84 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a8c:	f000 f8d0 	bl	8000c30 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a90:	f000 f880 	bl	8000b94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim3);
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <main+0x34>)
 8000a96:	f007 fba1 	bl	80081dc <HAL_TIM_Base_Start_IT>

  LED_OnOff(GPIO_PIN_LedAll, 500);
 8000a9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	f000 f988 	bl	8000db4 <LED_OnOff>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 8000aa4:	f004 fa94 	bl	8004fd0 <loop>
  {
 8000aa8:	e7fc      	b.n	8000aa4 <main+0x2c>
 8000aaa:	bf00      	nop
 8000aac:	20001164 	.word	0x20001164

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 ffd0 	bl	8009a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <SystemClock_Config+0xdc>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <SystemClock_Config+0xdc>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <SystemClock_Config+0xdc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <SystemClock_Config+0xe0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <SystemClock_Config+0xe0>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <SystemClock_Config+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b28:	23b4      	movs	r3, #180	; 0xb4
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fe8b 	bl	8007854 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b44:	f000 f964 	bl	8000e10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b48:	f006 fe34 	bl	80077b4 <HAL_PWREx_EnableOverDrive>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b52:	f000 f95d 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 f8e6 	bl	8007d44 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b7e:	f000 f947 	bl	8000e10 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_TIM3_Init+0x98>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bb8:	f242 3227 	movw	r2, #8999	; 0x2327
 8000bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bda:	f007 faaf 	bl	800813c <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000be4:	f000 f914 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000bf6:	f007 fc69 	bl	80084cc <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f906 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM3_Init+0x94>)
 8000c12:	f007 fe85 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f8f8 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20001164 	.word	0x20001164
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART3_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c3c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c68:	f007 feea 	bl	8008a40 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8cd 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200010c0 	.word	0x200010c0
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200c      	movs	r0, #12
 8000cac:	f005 ff83 	bl	8006bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f005 ff9c 	bl	8006bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200e      	movs	r0, #14
 8000cbc:	f005 ff7b 	bl	8006bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f005 ff94 	bl	8006bee <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0xb8>)
 8000d60:	f006 fd0e 	bl	8007780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0xb8>)
 8000d7c:	f006 fb54 	bl	8007428 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	millis++;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da0:	6013      	str	r3, [r2, #0]

}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000009c 	.word	0x2000009c

08000db4 <LED_OnOff>:

void LED_OnOff(int led, int interval)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
HAL_GPIO_WritePin(GPIONucleo, led, GPIO_PIN_SET );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <LED_OnOff+0x54>)
 8000dc8:	f006 fcda 	bl	8007780 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOExt, led, GPIO_PIN_SET );
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LED_OnOff+0x58>)
 8000dd6:	f006 fcd3 	bl	8007780 <HAL_GPIO_WritePin>
HAL_Delay(interval);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fdeb 	bl	80069b8 <HAL_Delay>
HAL_GPIO_WritePin(GPIONucleo, led, GPIO_PIN_RESET );
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <LED_OnOff+0x54>)
 8000dec:	f006 fcc8 	bl	8007780 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOExt, led, GPIO_PIN_RESET );
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <LED_OnOff+0x58>)
 8000dfa:	f006 fcc1 	bl	8007780 <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>

08000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8000e1a:	b480      	push	{r7}
 8000e1c:	b087      	sub	sp, #28
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8000e26:	463b      	mov	r3, r7
 8000e28:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	15db      	asrs	r3, r3, #23
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000e40:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	0159      	lsls	r1, r3, #5
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	10d9      	asrs	r1, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	12d9      	asrs	r1, r3, #11
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	b2ca      	uxtb	r2, r1
 8000e8e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	14db      	asrs	r3, r3, #19
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b259      	sxtb	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	b2ca      	uxtb	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	111b      	asrs	r3, r3, #4
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	1c59      	adds	r1, r3, #1
 8000eba:	6079      	str	r1, [r7, #4]
 8000ebc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8000ec4:	edd7 7a00 	vldr	s15, [r7]
 8000ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	d508      	bpl.n	8000ee4 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8000ee4:	2308      	movs	r3, #8
  }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3303      	adds	r3, #3
 8000f04:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	f003 0207 	and.w	r2, r3, #7
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	00da      	lsls	r2, r3, #3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	02da      	lsls	r2, r3, #11
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	04db      	lsls	r3, r3, #19
 8000f4a:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d008      	beq.n	8000f8c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	601a      	str	r2, [r3, #0]

    return 8;
 8000fa4:	2308      	movs	r3, #8
  }
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN3ros3MsgC1Ev>:
class Msg
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <_ZN3ros3MsgC1Ev+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	0800aeb0 	.word	0x0800aeb0

08000ff4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
      data()
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffe8 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffcf 	bl	8000fb2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800ae98 	.word	0x0800ae98

08001024 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6859      	ldr	r1, [r3, #4]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	0a19      	lsrs	r1, r3, #8
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	0c19      	lsrs	r1, r3, #16
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3302      	adds	r3, #2
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4413      	add	r3, r2
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	0e19      	lsrs	r1, r3, #24
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3303      	adds	r3, #3
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3304      	adds	r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6899      	ldr	r1, [r3, #8]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	0a19      	lsrs	r1, r3, #8
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	0c19      	lsrs	r1, r3, #16
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3302      	adds	r3, #2
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	0e19      	lsrs	r1, r3, #24
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3303      	adds	r3, #3
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3304      	adds	r3, #4
 80010c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80010c6:	68fb      	ldr	r3, [r7, #12]
    }
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	440b      	add	r3, r1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3302      	adds	r3, #2
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	440b      	add	r3, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3303      	adds	r3, #3
 8001124:	6839      	ldr	r1, [r7, #0]
 8001126:	440b      	add	r3, r1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	061b      	lsls	r3, r3, #24
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3304      	adds	r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3301      	adds	r3, #1
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	440b      	add	r3, r1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3302      	adds	r3, #2
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	440b      	add	r3, r1
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3303      	adds	r3, #3
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	440b      	add	r3, r1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	061b      	lsls	r3, r3, #24
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3304      	adds	r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
     return offset;
 800118e:	68fb      	ldr	r3, [r7, #12]
    }
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	0800a374 	.word	0x0800a374

080011b8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	0800a384 	.word	0x0800a384

080011d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fef8 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	809a      	strh	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    {
    }
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800ae80 	.word	0x0800ae80
 8001218:	0800a3a8 	.word	0x0800a3a8

0800121c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	8899      	ldrh	r1, [r3, #4]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	b2ca      	uxtb	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b299      	uxth	r1, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3301      	adds	r3, #1
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3302      	adds	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ffca 	bl	80001f0 <strlen>
 800125c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	69b9      	ldr	r1, [r7, #24]
 8001266:	4618      	mov	r0, r3
 8001268:	f004 f920 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	3304      	adds	r3, #4
 8001270:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	18d0      	adds	r0, r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4619      	mov	r1, r3
 8001280:	f008 fbe2 	bl	8009a48 <memcpy>
      offset += length_topic_name;
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4413      	add	r3, r2
 800128a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffad 	bl	80001f0 <strlen>
 8001296:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	6979      	ldr	r1, [r7, #20]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 f903 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	18d0      	adds	r0, r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f008 fbc5 	bl	8009a48 <memcpy>
      offset += length_message_type;
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7fe ff90 	bl	80001f0 <strlen>
 80012d0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 f8e6 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3304      	adds	r3, #4
 80012e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	18d0      	adds	r0, r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4619      	mov	r1, r3
 80012f4:	f008 fba8 	bl	8009a48 <memcpy>
      offset += length_md5sum;
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	0a19      	lsrs	r1, r3, #8
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	0c19      	lsrs	r1, r3, #16
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3302      	adds	r3, #2
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	0e19      	lsrs	r1, r3, #24
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3303      	adds	r3, #3
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	61fb      	str	r3, [r7, #28]
      return offset;
 8001348:	69fb      	ldr	r3, [r7, #28]
    }
 800134a:	4618      	mov	r0, r3
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001352:	b580      	push	{r7, lr}
 8001354:	b08a      	sub	sp, #40	; 0x28
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	889b      	ldrh	r3, [r3, #4]
 8001372:	b21a      	sxth	r2, r3
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	440b      	add	r3, r1
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3302      	adds	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	441a      	add	r2, r3
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f8a2 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3304      	adds	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d20c      	bcs.n	80013d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	441a      	add	r2, r3
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	3301      	adds	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e7ec      	b.n	80013ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4413      	add	r3, r2
 80013da:	3b01      	subs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	441a      	add	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	441a      	add	r2, r3
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f004 f86f 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3304      	adds	r3, #4
 800140e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4413      	add	r3, r2
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d20c      	bcs.n	800143a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	441a      	add	r2, r3
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	3b01      	subs	r3, #1
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	440b      	add	r3, r1
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	3301      	adds	r3, #1
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	e7ec      	b.n	8001414 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	3b01      	subs	r3, #1
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3b01      	subs	r3, #1
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	441a      	add	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4413      	add	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	441a      	add	r2, r3
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f004 f83c 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	3304      	adds	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	429a      	cmp	r2, r3
 8001484:	d20c      	bcs.n	80014a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	441a      	add	r2, r3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3b01      	subs	r3, #1
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	440b      	add	r3, r1
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	e7ec      	b.n	800147a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	3b01      	subs	r3, #1
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	441a      	add	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	440a      	add	r2, r1
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	3302      	adds	r3, #2
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	3303      	adds	r3, #3
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	440b      	add	r3, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	4313      	orrs	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	3304      	adds	r3, #4
 8001516:	61bb      	str	r3, [r7, #24]
     return offset;
 8001518:	69bb      	ldr	r3, [r7, #24]
    }
 800151a:	4618      	mov	r0, r3
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	0800a3ac 	.word	0x0800a3ac

08001540 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	0800a3c8 	.word	0x0800a3c8

0800155c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd34 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	711a      	strb	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800157c:	609a      	str	r2, [r3, #8]
    {
    }
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	0800ae68 	.word	0x0800ae68
 800158c:	0800a3a8 	.word	0x0800a3a8

08001590 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	7912      	ldrb	r2, [r2, #4]
 80015a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe1b 	bl	80001f0 <strlen>
 80015ba:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 ff71 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	18d0      	adds	r0, r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4619      	mov	r1, r3
 80015de:	f008 fa33 	bl	8009a48 <memcpy>
      offset += length_msg;
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80015ea:	68fb      	ldr	r3, [r7, #12]
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	441a      	add	r2, r3
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f003 ff61 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3304      	adds	r3, #4
 800162a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	d20c      	bcs.n	8001656 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	441a      	add	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3b01      	subs	r3, #1
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	440b      	add	r3, r1
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e7ec      	b.n	8001630 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	3b01      	subs	r3, #1
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	3b01      	subs	r3, #1
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	441a      	add	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
     return offset;
 800167a:	693b      	ldr	r3, [r7, #16]
    }
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	0800a3ec 	.word	0x0800a3ec

080016a0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	0800a400 	.word	0x0800a400

080016bc <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
      name("")
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc84 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 80016d6:	605a      	str	r2, [r3, #4]
    {
    }
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	0800ae50 	.word	0x0800ae50
 80016e8:	0800a3a8 	.word	0x0800a3a8

080016ec <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd76 	bl	80001f0 <strlen>
 8001704:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fecc 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3304      	adds	r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	18d0      	adds	r0, r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4619      	mov	r1, r3
 8001728:	f008 f98e 	bl	8009a48 <memcpy>
      offset += length_name;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
      return offset;
 8001734:	68fb      	ldr	r3, [r7, #12]
    }
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	441a      	add	r2, r3
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fec5 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3304      	adds	r3, #4
 8001762:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	d20c      	bcs.n	800178e <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	441a      	add	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3b01      	subs	r3, #1
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	440b      	add	r3, r1
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e7ec      	b.n	8001768 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	3b01      	subs	r3, #1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	441a      	add	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	605a      	str	r2, [r3, #4]
      offset += length_name;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
     return offset;
 80017b2:	693b      	ldr	r3, [r7, #16]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x18>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	0800ab7c 	.word	0x0800ab7c

080017d8 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x18>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	0800a424 	.word	0x0800a424

080017f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fbe8 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	0800ae38 	.word	0x0800ae38

0800183c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0a19      	lsrs	r1, r3, #8
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	0c19      	lsrs	r1, r3, #16
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3302      	adds	r3, #2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	b2ca      	uxtb	r2, r1
 800187a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	0e19      	lsrs	r1, r3, #24
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3303      	adds	r3, #3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3304      	adds	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	6a3a      	ldr	r2, [r7, #32]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d22b      	bcs.n	80018fa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	b2ca      	uxtb	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	0a19      	lsrs	r1, r3, #8
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	3301      	adds	r3, #1
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	0c19      	lsrs	r1, r3, #16
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	3302      	adds	r3, #2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	0e19      	lsrs	r1, r3, #24
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	3303      	adds	r3, #3
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	b2ca      	uxtb	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3304      	adds	r3, #4
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	3301      	adds	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	e7ce      	b.n	8001898 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	0a19      	lsrs	r1, r3, #8
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	0c19      	lsrs	r1, r3, #16
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3302      	adds	r3, #2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	0e19      	lsrs	r1, r3, #24
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3303      	adds	r3, #3
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3304      	adds	r3, #4
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	d22b      	bcs.n	80019aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	4413      	add	r3, r2
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	0a19      	lsrs	r1, r3, #8
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3301      	adds	r3, #1
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	b2ca      	uxtb	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0c19      	lsrs	r1, r3, #16
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3302      	adds	r3, #2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	b2ca      	uxtb	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	0e19      	lsrs	r1, r3, #24
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3303      	adds	r3, #3
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	b2ca      	uxtb	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3304      	adds	r3, #4
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	e7ce      	b.n	8001948 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69d9      	ldr	r1, [r3, #28]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	0a19      	lsrs	r1, r3, #8
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	0c19      	lsrs	r1, r3, #16
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3302      	adds	r3, #2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	0e19      	lsrs	r1, r3, #24
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	3303      	adds	r3, #3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3304      	adds	r3, #4
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d228      	bcs.n	8001a54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fbee 	bl	80001f0 <strlen>
 8001a14:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	6979      	ldr	r1, [r7, #20]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fd44 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3304      	adds	r3, #4
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	18d0      	adds	r0, r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f008 f802 	bl	8009a48 <memcpy>
      offset += length_stringsi;
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e7d1      	b.n	80019f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a56:	4618      	mov	r0, r3
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b08e      	sub	sp, #56	; 0x38
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	3301      	adds	r3, #1
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	3304      	adds	r3, #4
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6a3a      	ldr	r2, [r7, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d90a      	bls.n	8001ad2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f007 ffd4 	bl	8009a74 <realloc>
 8001acc:	4602      	mov	r2, r0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d236      	bcs.n	8001b54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	440a      	add	r2, r1
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afc:	3301      	adds	r3, #1
 8001afe:	6839      	ldr	r1, [r7, #0]
 8001b00:	440b      	add	r3, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	3302      	adds	r3, #2
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	440b      	add	r3, r1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	3303      	adds	r3, #3
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	440b      	add	r3, r1
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	3304      	adds	r3, #4
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	3301      	adds	r3, #1
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
 8001b52:	e7c3      	b.n	8001adc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	3301      	adds	r3, #1
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	3302      	adds	r3, #2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	3303      	adds	r3, #3
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	3304      	adds	r3, #4
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d90a      	bls.n	8001bba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f007 ff60 	bl	8009a74 <realloc>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d236      	bcs.n	8001c3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	440a      	add	r2, r1
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	3301      	adds	r3, #1
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	440b      	add	r3, r1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	6839      	ldr	r1, [r7, #0]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	3303      	adds	r3, #3
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1e:	3304      	adds	r3, #4
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	3214      	adds	r2, #20
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	3301      	adds	r3, #1
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3a:	e7c3      	b.n	8001bc4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c48:	3301      	adds	r3, #1
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	3303      	adds	r3, #3
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	3304      	adds	r3, #4
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d90a      	bls.n	8001ca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f007 feec 	bl	8009a74 <realloc>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d23f      	bcs.n	8001d36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	441a      	add	r2, r3
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fc10 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	3304      	adds	r3, #4
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d20c      	bcs.n	8001cf8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	441a      	add	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	440b      	add	r3, r1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	e7ec      	b.n	8001cd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	441a      	add	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	3220      	adds	r2, #32
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	3301      	adds	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d34:	e7ba      	b.n	8001cac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3738      	adds	r7, #56	; 0x38
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	0800ab7c 	.word	0x0800ab7c

08001d5c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	0800a448 	.word	0x0800a448

08001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
  }
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <_ZN13STM32HardwareC1Ev+0x34>)
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	200010c0 	.word	0x200010c0

08001e1c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffc4 	bl	8001dbe <_ZN13STM32Hardware10getRdmaIndEv>
 8001e36:	4603      	mov	r3, r0
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e4c:	1c59      	adds	r1, r3, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    }
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}
	...

08001e78 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d108      	bne.n	8001ea0 <_ZN13STM32Hardware5flushEv+0x28>
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <_ZN13STM32Hardware5flushEv+0x28>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <_ZN13STM32Hardware5flushEv+0x2a>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03f      	beq.n	8001f26 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d031      	beq.n	8001f20 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d20a      	bcs.n	8001ee2 <_ZN13STM32Hardware5flushEv+0x6a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	e006      	b.n	8001ef0 <_ZN13STM32Hardware5flushEv+0x78>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	89fa      	ldrh	r2, [r7, #14]
 8001f06:	4619      	mov	r1, r3
 8001f08:	f006 fde8 	bl	8008adc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	4413      	add	r3, r2
 8001f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
      }
    }
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200000a0 	.word	0x200000a0

08001f34 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	bfa8      	it	ge
 8001f4c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f50:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f58:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	bf28      	it	cs
 8001f62:	4613      	movcs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f007 fd65 	bl	8009a48 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d00b      	beq.n	8001fb2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	18d1      	adds	r1, r2, r3
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	f007 fd4b 	bl	8009a48 <memcpy>
      }

      flush();
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7ff ff60 	bl	8001e78 <_ZN13STM32Hardware5flushEv>
    }
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	f004 fcea 	bl	80069a0 <HAL_GetTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
      data(0)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fff6 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	711a      	strb	r2, [r3, #4]
    {
    }
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0800adf4 	.word	0x0800adf4

08002004 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4413      	add	r3, r2
 800201e:	7a3a      	ldrb	r2, [r7, #8]
 8002020:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3301      	adds	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      return offset;
 8002028:	68fb      	ldr	r3, [r7, #12]
    }
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002048:	7a3a      	ldrb	r2, [r7, #8]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002058:	7a3a      	ldrb	r2, [r7, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
     return offset;
 8002064:	68fb      	ldr	r3, [r7, #12]
    }
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800a46c 	.word	0x0800a46c

08002090 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800a47c 	.word	0x0800a47c

080020ac <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ff8c 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <_ZN8std_msgs5EmptyC1Ev+0x20>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	601a      	str	r2, [r3, #0]
    }
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800addc 	.word	0x0800addc

080020d0 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80020de:	68fb      	ldr	r3, [r7, #12]
    }
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80020fa:	68fb      	ldr	r3, [r7, #12]
    }
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_ZN8std_msgs5Empty7getTypeEv>:

    const char * getType(){ return "std_msgs/Empty"; };
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	0800a4a0 	.word	0x0800a4a0

08002124 <_ZN8std_msgs5Empty6getMD5Ev>:
    const char * getMD5(){ return "d41d8cd98f00b204e9800998ecf8427e"; };
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	0800a4b0 	.word	0x0800a4b0

08002140 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe ff42 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3308      	adds	r3, #8
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ff26 	bl	8000fb2 <_ZN3ros4TimeC1Ev>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800216a:	611a      	str	r2, [r3, #16]
    {
    }
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	0800adc4 	.word	0x0800adc4
 800217c:	0800a3a8 	.word	0x0800a3a8

08002180 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	b2ca      	uxtb	r2, r1
 800219a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0a19      	lsrs	r1, r3, #8
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3301      	adds	r3, #1
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0c19      	lsrs	r1, r3, #16
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3302      	adds	r3, #2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	b2ca      	uxtb	r2, r1
 80021be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0e19      	lsrs	r1, r3, #24
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3303      	adds	r3, #3
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	b2ca      	uxtb	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3304      	adds	r3, #4
 80021d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	b2ca      	uxtb	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a19      	lsrs	r1, r3, #8
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	0c19      	lsrs	r1, r3, #16
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3302      	adds	r3, #2
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0e19      	lsrs	r1, r3, #24
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3303      	adds	r3, #3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	b2ca      	uxtb	r2, r1
 800221a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3304      	adds	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	b2ca      	uxtb	r2, r1
 800222e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a19      	lsrs	r1, r3, #8
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	0c19      	lsrs	r1, r3, #16
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3302      	adds	r3, #2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0e19      	lsrs	r1, r3, #24
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3303      	adds	r3, #3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffbd 	bl	80001f0 <strlen>
 8002276:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	4413      	add	r3, r2
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f913 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	18d0      	adds	r0, r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4619      	mov	r1, r3
 800229a:	f007 fbd5 	bl	8009a48 <memcpy>
      offset += length_frame_id;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80022a6:	68fb      	ldr	r3, [r7, #12]
    }
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	3301      	adds	r3, #1
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	440b      	add	r3, r1
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3302      	adds	r3, #2
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	440b      	add	r3, r1
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3303      	adds	r3, #3
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	440b      	add	r3, r1
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3304      	adds	r3, #4
 8002312:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	3301      	adds	r3, #1
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	440b      	add	r3, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3302      	adds	r3, #2
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	440b      	add	r3, r1
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3303      	adds	r3, #3
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	440b      	add	r3, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	3304      	adds	r3, #4
 8002368:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	3301      	adds	r3, #1
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	440b      	add	r3, r1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3302      	adds	r3, #2
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	440b      	add	r3, r1
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	3303      	adds	r3, #3
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	440b      	add	r3, r1
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3304      	adds	r3, #4
 80023be:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	441a      	add	r2, r3
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 f88b 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	3304      	adds	r3, #4
 80023d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4413      	add	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d20c      	bcs.n	8002402 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	441a      	add	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e7ec      	b.n	80023dc <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	3b01      	subs	r3, #1
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3b01      	subs	r3, #1
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
     return offset;
 8002426:	693b      	ldr	r3, [r7, #16]
    }
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	0800a4d4 	.word	0x0800a4d4

0800244c <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0800a4e4 	.word	0x0800a4e4

08002468 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef float _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fdae 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe5c 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
    {
    }
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	0800adac 	.word	0x0800adac

080024c8 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	1d18      	adds	r0, r3, #4
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7ff fe4d 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6999      	ldr	r1, [r3, #24]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	0a19      	lsrs	r1, r3, #8
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	b2ca      	uxtb	r2, r1
 800250c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	0c19      	lsrs	r1, r3, #16
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3302      	adds	r3, #2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	b2ca      	uxtb	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	0e19      	lsrs	r1, r3, #24
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3303      	adds	r3, #3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < name_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	429a      	cmp	r2, r3
 8002544:	d228      	bcs.n	8002598 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd fe4c 	bl	80001f0 <strlen>
 8002558:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_namei);
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 ffa2 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3304      	adds	r3, #4
 800256c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->name[i], length_namei);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	18d0      	adds	r0, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	4619      	mov	r1, r3
 8002584:	f007 fa60 	bl	8009a48 <memcpy>
      offset += length_namei;
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < name_length; i++){
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3301      	adds	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e7d1      	b.n	800253c <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	0a19      	lsrs	r1, r3, #8
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	b2ca      	uxtb	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	0c19      	lsrs	r1, r3, #16
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3302      	adds	r3, #2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	0e19      	lsrs	r1, r3, #24
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3303      	adds	r3, #3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3304      	adds	r3, #4
 80025e0:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < position_length; i++){
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d216      	bcs.n	800261e <_ZNK11sensor_msgs10JointState9serializeEPh+0x156>
      offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	18d1      	adds	r1, r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eeb0 0a67 	vmov.f32	s0, s15
 8002608:	4608      	mov	r0, r1
 800260a:	f7fe fc06 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800260e:	4602      	mov	r2, r0
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < position_length; i++){
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e7e3      	b.n	80025e6 <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	0a19      	lsrs	r1, r3, #8
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	b2ca      	uxtb	r2, r1
 800263c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	0c19      	lsrs	r1, r3, #16
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3302      	adds	r3, #2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	0e19      	lsrs	r1, r3, #24
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3303      	adds	r3, #3
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < velocity_length; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d216      	bcs.n	80026a4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x1dc>
      offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	18d1      	adds	r1, r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eeb0 0a67 	vmov.f32	s0, s15
 800268e:	4608      	mov	r0, r1
 8002690:	f7fe fbc3 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002694:	4602      	mov	r2, r0
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < velocity_length; i++){
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3301      	adds	r3, #1
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e7e3      	b.n	800266c <_ZNK11sensor_msgs10JointState9serializeEPh+0x1a4>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	0a19      	lsrs	r1, r3, #8
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	0c19      	lsrs	r1, r3, #16
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3302      	adds	r3, #2
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	b2ca      	uxtb	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	0e19      	lsrs	r1, r3, #24
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	3303      	adds	r3, #3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3304      	adds	r3, #4
 80026ec:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < effort_length; i++){
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d216      	bcs.n	800272a <_ZNK11sensor_msgs10JointState9serializeEPh+0x262>
      offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	eeb0 0a67 	vmov.f32	s0, s15
 8002714:	4608      	mov	r0, r1
 8002716:	f7fe fb80 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800271a:	4602      	mov	r2, r0
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
      for( uint32_t i = 0; i < effort_length; i++){
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3301      	adds	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e7e3      	b.n	80026f2 <_ZNK11sensor_msgs10JointState9serializeEPh+0x22a>
      }
      return offset;
 800272a:	69fb      	ldr	r3, [r7, #28]
    }
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.deserialize(inbuffer + offset);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1d18      	adds	r0, r3, #4
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7ff fdaf 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 8002752:	4602      	mov	r2, r0
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	4413      	add	r3, r2
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	61fb      	str	r3, [r7, #28]
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	3301      	adds	r3, #1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4313      	orrs	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	3302      	adds	r3, #2
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4313      	orrs	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	3303      	adds	r3, #3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->name_length);
 800279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279c:	3304      	adds	r3, #4
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
      if(name_lengthT > name_length)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90a      	bls.n	80027c0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x8c>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f007 f95d 	bl	8009a74 <realloc>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < name_length; i++){
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d23f      	bcs.n	8002854 <_ZN11sensor_msgs10JointState11deserializeEPh+0x120>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	441a      	add	r2, r3
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fe81 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	3304      	adds	r3, #4
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d20c      	bcs.n	8002816 <_ZN11sensor_msgs10JointState11deserializeEPh+0xe2>
          inbuffer[k-1]=inbuffer[k];
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	441a      	add	r2, r3
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	3b01      	subs	r3, #1
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	3301      	adds	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	e7ec      	b.n	80027f0 <_ZN11sensor_msgs10JointState11deserializeEPh+0xbc>
      }
      inbuffer[offset+length_st_name-1]=0;
 8002816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	3b01      	subs	r3, #1
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	3b01      	subs	r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8002832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	321c      	adds	r2, #28
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < name_length; i++){
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	3301      	adds	r3, #1
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
 8002852:	e7ba      	b.n	80027ca <_ZN11sensor_msgs10JointState11deserializeEPh+0x96>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	3301      	adds	r3, #1
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	3302      	adds	r3, #2
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	3303      	adds	r3, #3
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4413      	add	r3, r2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->position_length);
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	3304      	adds	r3, #4
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
      if(position_lengthT > position_length)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d90a      	bls.n	80028ba <_ZN11sensor_msgs10JointState11deserializeEPh+0x186>
        this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f007 f8e0 	bl	8009a74 <realloc>
 80028b4:	4602      	mov	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
      position_length = position_lengthT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d219      	bcs.n	8002902 <_ZN11sensor_msgs10JointState11deserializeEPh+0x1ce>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3328      	adds	r3, #40	; 0x28
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7fe fb09 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	4413      	add	r3, r2
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	3228      	adds	r2, #40	; 0x28
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < position_length; i++){
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	3301      	adds	r3, #1
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002900:	e7e0      	b.n	80028c4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x190>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	3301      	adds	r3, #1
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	3302      	adds	r3, #2
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	3303      	adds	r3, #3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
      offset += sizeof(this->velocity_length);
 8002942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002944:	3304      	adds	r3, #4
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
      if(velocity_lengthT > velocity_length)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90a      	bls.n	8002968 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f007 f889 	bl	8009a74 <realloc>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
      velocity_length = velocity_lengthT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
      for( uint32_t i = 0; i < velocity_length; i++){
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	429a      	cmp	r2, r3
 800297a:	d219      	bcs.n	80029b0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x27c>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	441a      	add	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3334      	adds	r3, #52	; 0x34
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7fe fab2 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800298e:	4602      	mov	r2, r0
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	4413      	add	r3, r2
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	3234      	adds	r2, #52	; 0x34
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < velocity_length; i++){
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	3301      	adds	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	e7e0      	b.n	8002972 <_ZN11sensor_msgs10JointState11deserializeEPh+0x23e>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	613b      	str	r3, [r7, #16]
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	3301      	adds	r3, #1
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	3302      	adds	r3, #2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	3303      	adds	r3, #3
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
      offset += sizeof(this->effort_length);
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	3304      	adds	r3, #4
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(effort_lengthT > effort_length)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d90a      	bls.n	8002a16 <_ZN11sensor_msgs10JointState11deserializeEPh+0x2e2>
        this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f007 f832 	bl	8009a74 <realloc>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
      effort_length = effort_lengthT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      for( uint32_t i = 0; i < effort_length; i++){
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d219      	bcs.n	8002a5e <_ZN11sensor_msgs10JointState11deserializeEPh+0x32a>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3340      	adds	r3, #64	; 0x40
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f7fe fa5b 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	4413      	add	r3, r2
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	3240      	adds	r2, #64	; 0x40
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < effort_length; i++){
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	e7e0      	b.n	8002a20 <_ZN11sensor_msgs10JointState11deserializeEPh+0x2ec>
      }
     return offset;
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a60:	4618      	mov	r0, r3
 8002a62:	3738      	adds	r7, #56	; 0x38
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	0800a508 	.word	0x0800a508

08002a84 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	0800a520 	.word	0x0800a520

08002aa0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fa92 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002ab0:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
    {
    }
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	0800ad94 	.word	0x0800ad94

08002adc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7fe f98d 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe f97e 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b32:	eeb0 0a67 	vmov.f32	s0, s15
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7fe f96f 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b44:	68fb      	ldr	r3, [r7, #12]
    }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7fe f9c2 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f7fe f9b5 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7fe f9a8 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
     return offset;
 8002baa:	68fb      	ldr	r3, [r7, #12]
    }
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	0800a544 	.word	0x0800a544

08002bd0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	0800a55c 	.word	0x0800a55c

08002bec <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f9ec 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
    {
    }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	0800ad7c 	.word	0x0800ad7c

08002c30 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7fe f8e3 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c68:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f7fe f8d4 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7fe f8c5 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7fe f8b6 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7fe f909 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fe f8fc 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	441a      	add	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7fe f8ef 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3310      	adds	r3, #16
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7fe f8e2 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
     return offset;
 8002d36:	68fb      	ldr	r3, [r7, #12]
    }
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	0800a580 	.word	0x0800a580

08002d5c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0800a59c 	.word	0x0800a59c

08002d78 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe f926 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe84 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff25 	bl	8002bec <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	0800ad64 	.word	0x0800ad64

08002db0 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1d18      	adds	r0, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7ff fe87 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f103 0014 	add.w	r0, r3, #20
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7ff ff24 	bl	8002c30 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
      return offset;
 8002df0:	68fb      	ldr	r3, [r7, #12]
    }
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	1d18      	adds	r0, r3, #4
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7ff fe9b 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0014 	add.w	r0, r3, #20
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7ff ff47 	bl	8002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	0800a5c0 	.word	0x0800a5c0

08002e60 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	0800a5d8 	.word	0x0800a5d8

08002e7c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f8a4 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f952 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	331c      	adds	r3, #28
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff66 	bl	8002d78 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	0800ad4c 	.word	0x0800ad4c
 8002ebc:	0800a3a8 	.word	0x0800a3a8

08002ec0 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1d18      	adds	r0, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7ff f951 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd f980 	bl	80001f0 <strlen>
 8002ef0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fad6 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	18d0      	adds	r0, r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	4619      	mov	r1, r3
 8002f14:	f006 fd98 	bl	8009a48 <memcpy>
      offset += length_child_frame_id;
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 001c 	add.w	r0, r3, #28
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7ff ff3f 	bl	8002db0 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1d18      	adds	r0, r3, #4
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff f9a7 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	441a      	add	r2, r3
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fab6 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d20c      	bcs.n	8002fac <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	441a      	add	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	440b      	add	r3, r1
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e7ec      	b.n	8002f86 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f103 001c 	add.w	r0, r3, #28
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7ff ff0c 	bl	8002dfa <_ZN13geometry_msgs9Transform11deserializeEPh>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
     return offset;
 8002fea:	693b      	ldr	r3, [r7, #16]
    }
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	0800a5fc 	.word	0x0800a5fc

08003010 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	0800a61c 	.word	0x0800a61c

0800302c <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd ffcc 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <_ZN2tf9tfMessageC1Ev+0x38>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3308      	adds	r3, #8
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff15 	bl	8002e7c <_ZN13geometry_msgs16TransformStampedC1Ev>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	0800ad34 	.word	0x0800ad34

08003068 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4413      	add	r3, r2
 8003080:	b2ca      	uxtb	r2, r1
 8003082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0a19      	lsrs	r1, r3, #8
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3301      	adds	r3, #1
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4413      	add	r3, r2
 8003092:	b2ca      	uxtb	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0c19      	lsrs	r1, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3302      	adds	r3, #2
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	b2ca      	uxtb	r2, r1
 80030a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0e19      	lsrs	r1, r3, #24
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3303      	adds	r3, #3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	b2ca      	uxtb	r2, r1
 80030b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d223      	bcs.n	8003116 <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	18c8      	adds	r0, r1, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	440a      	add	r2, r1
 8003102:	4611      	mov	r1, r2
 8003104:	4798      	blx	r3
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e7d6      	b.n	80030c4 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8003116:	68fb      	ldr	r3, [r7, #12]
    }
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3302      	adds	r3, #2
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3303      	adds	r3, #3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3304      	adds	r3, #4
 8003172:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4619      	mov	r1, r3
 800318e:	f006 fc71 	bl	8009a74 <realloc>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d21e      	bcs.n	80031ea <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f103 0008 	add.w	r0, r3, #8
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7ff fec3 	bl	8002f44 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4413      	add	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	18c8      	adds	r0, r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3308      	adds	r3, #8
 80031da:	2244      	movs	r2, #68	; 0x44
 80031dc:	4619      	mov	r1, r3
 80031de:	f006 fc33 	bl	8009a48 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3301      	adds	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e7db      	b.n	80031a2 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 80031ea:	697b      	ldr	r3, [r7, #20]
    }
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <_ZN2tf9tfMessage7getTypeEv+0x18>)
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	0800a640 	.word	0x0800a640

08003210 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	0800a650 	.word	0x0800a650

0800322c <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fef8 	bl	800302c <_ZN2tf9tfMessageC1Ev>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	2300      	movs	r3, #0
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8003248:	f7fe fd96 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	0800a674 	.word	0x0800a674

0800325c <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd feb4 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 800326c:	4a09      	ldr	r2, [pc, #36]	; (8003294 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
    {
    }
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800ad08 	.word	0x0800ad08

08003298 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	441a      	add	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b2:	eeb0 0a67 	vmov.f32	s0, s15
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fd fdaf 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fd fda0 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ee:	eeb0 0a67 	vmov.f32	s0, s15
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fd fd91 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
      return offset;
 8003300:	68fb      	ldr	r3, [r7, #12]
    }
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fd fde4 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3308      	adds	r3, #8
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fd fdd7 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	330c      	adds	r3, #12
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7fd fdca 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
     return offset;
 8003366:	68fb      	ldr	r3, [r7, #12]
    }
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	0800a678 	.word	0x0800a678

0800338c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	0800a55c 	.word	0x0800a55c

080033a8 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fe0e 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff4a 	bl	800325c <_ZN13geometry_msgs5PointC1Ev>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3314      	adds	r3, #20
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fc0d 	bl	8002bec <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	0800acf0 	.word	0x0800acf0

080033e0 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1d18      	adds	r0, r3, #4
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7ff ff4d 	bl	8003298 <_ZNK13geometry_msgs5Point9serializeEPh>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0014 	add.w	r0, r3, #20
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f7ff fc0c 	bl	8002c30 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003420:	68fb      	ldr	r3, [r7, #12]
    }
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1d18      	adds	r0, r3, #4
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f7ff ff61 	bl	800330a <_ZN13geometry_msgs5Point11deserializeEPh>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0014 	add.w	r0, r3, #20
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	4413      	add	r3, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f7ff fc2f 	bl	8002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
     return offset;
 800346a:	68fb      	ldr	r3, [r7, #12]
    }
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	0800a68c 	.word	0x0800a68c

08003490 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	0800a6a0 	.word	0x0800a6a0

080034ac <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fd8c 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff6e 	bl	80033a8 <_ZN13geometry_msgs4PoseC1Ev>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80034d2:	2323      	movs	r3, #35	; 0x23
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db05      	blt.n	80034e4 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	6011      	str	r1, [r2, #0]
 80034de:	3204      	adds	r2, #4
 80034e0:	3b01      	subs	r3, #1
 80034e2:	e7f7      	b.n	80034d4 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	0800acd8 	.word	0x0800acd8

080034f4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	1d18      	adds	r0, r3, #4
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7ff ff67 	bl	80033e0 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b23      	cmp	r3, #35	; 0x23
 8003522:	d817      	bhi.n	8003554 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	18d1      	adds	r1, r2, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	330a      	adds	r3, #10
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eeb0 0a67 	vmov.f32	s0, s15
 800353e:	4608      	mov	r0, r1
 8003540:	f7fd fc6b 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	e7e4      	b.n	800351e <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8003554:	68fb      	ldr	r3, [r7, #12]
    }
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1d18      	adds	r0, r3, #4
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	4413      	add	r3, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f7ff ff57 	bl	800342a <_ZN13geometry_msgs4Pose11deserializeEPh>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b23      	cmp	r3, #35	; 0x23
 800358c:	d813      	bhi.n	80035b6 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	18d0      	adds	r0, r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	330a      	adds	r3, #10
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fca6 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	e7e8      	b.n	8003588 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 80035b6:	68fb      	ldr	r3, [r7, #12]
    }
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	0800a6c4 	.word	0x0800a6c4

080035dc <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	0800a6e8 	.word	0x0800a6e8

080035f8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fce6 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fa44 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3314      	adds	r3, #20
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fa3f 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	0800acc0 	.word	0x0800acc0

08003630 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	1d18      	adds	r0, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7ff fa47 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0014 	add.w	r0, r3, #20
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4413      	add	r3, r2
 8003662:	4619      	mov	r1, r3
 8003664:	f7ff fa3a 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003670:	68fb      	ldr	r3, [r7, #12]
    }
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1d18      	adds	r0, r3, #4
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff fa5b 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0014 	add.w	r0, r3, #20
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7ff fa4e 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80036ba:	68fb      	ldr	r3, [r7, #12]
    }
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	0800a70c 	.word	0x0800a70c

080036e0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	0800a720 	.word	0x0800a720

080036fc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fc64 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 800370c:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff6e 	bl	80035f8 <_ZN13geometry_msgs5TwistC1Ev>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003722:	2323      	movs	r3, #35	; 0x23
 8003724:	2b00      	cmp	r3, #0
 8003726:	db05      	blt.n	8003734 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	3204      	adds	r2, #4
 8003730:	3b01      	subs	r3, #1
 8003732:	e7f7      	b.n	8003724 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	0800aca8 	.word	0x0800aca8

08003744 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	1d18      	adds	r0, r3, #4
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4413      	add	r3, r2
 800375c:	4619      	mov	r1, r3
 800375e:	f7ff ff67 	bl	8003630 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b23      	cmp	r3, #35	; 0x23
 8003772:	d816      	bhi.n	80037a2 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	18d1      	adds	r1, r2, r3
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	330a      	adds	r3, #10
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	4608      	mov	r0, r1
 800378e:	f7fd fb44 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	e7e5      	b.n	800376e <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 80037a2:	68fb      	ldr	r3, [r7, #12]
    }
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1d18      	adds	r0, r3, #4
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7ff ff58 	bl	800367a <_ZN13geometry_msgs5Twist11deserializeEPh>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b23      	cmp	r3, #35	; 0x23
 80037da:	d812      	bhi.n	8003802 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	18d0      	adds	r0, r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	330a      	adds	r3, #10
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fd fb80 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e7e9      	b.n	80037d6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8003802:	68fb      	ldr	r3, [r7, #12]
    }
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	0800a744 	.word	0x0800a744

08003828 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	0800a768 	.word	0x0800a768

08003844 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fbc0 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8003854:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fc6e 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8003868:	619a      	str	r2, [r3, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	331c      	adds	r3, #28
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fe1c 	bl	80034ac <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	33d8      	adds	r3, #216	; 0xd8
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff3f 	bl	80036fc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	0800ac90 	.word	0x0800ac90
 800388c:	0800a3a8 	.word	0x0800a3a8

08003890 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1d18      	adds	r0, r3, #4
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f7fe fc69 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fc98 	bl	80001f0 <strlen>
 80038c0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fdee 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	18d0      	adds	r0, r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f006 f8b0 	bl	8009a48 <memcpy>
      offset += length_child_frame_id;
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f103 001c 	add.w	r0, r3, #28
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7ff fdf9 	bl	80034f4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4413      	add	r3, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f7ff ff14 	bl	8003744 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
      return offset;
 8003924:	68fb      	ldr	r3, [r7, #12]
    }
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1d18      	adds	r0, r3, #4
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fe fcb2 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	441a      	add	r2, r3
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fdc1 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3304      	adds	r3, #4
 800396a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	d20c      	bcs.n	8003996 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	441a      	add	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3b01      	subs	r3, #1
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	440b      	add	r3, r1
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3301      	adds	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e7ec      	b.n	8003970 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	3b01      	subs	r3, #1
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f103 001c 	add.w	r0, r3, #28
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7ff fdc9 	bl	800355e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f7ff fee3 	bl	80037ac <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
     return offset;
 80039ee:	693b      	ldr	r3, [r7, #16]
    }
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	0800a78c 	.word	0x0800a78c

08003a14 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800a7a0 	.word	0x0800a7a0

08003a30 <_ZN15turtlebot3_msgs11SensorStateC1Ev>:
      enum { ERROR_LEFT_MOTOR =  1 };
      enum { ERROR_RIGHT_MOTOR =  2 };
      enum { TORQUE_ON =  1 };
      enum { TORQUE_OFF =  2 };

    SensorState():
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
      led(0),
      button(0),
      torque(0),
      left_encoder(0),
      right_encoder(0),
      battery(0)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd faca 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <_ZN15turtlebot3_msgs11SensorStateC1Ev+0x74>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fb78 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	761a      	strb	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0800ac78 	.word	0x0800ac78

08003aa8 <_ZNK15turtlebot3_msgs11SensorState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.serialize(outbuffer + offset);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1d18      	adds	r0, r3, #4
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7fe fb5d 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	4413      	add	r3, r2
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->bumper >> (8 * 0)) & 0xFF;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	7e12      	ldrb	r2, [r2, #24]
 8003ad8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->bumper);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	3301      	adds	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_cliff;
      u_cliff.real = this->cliff;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_cliff.base >> (8 * 0)) & 0xFF;
 8003ae6:	6a39      	ldr	r1, [r7, #32]
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	b2ca      	uxtb	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_cliff.base >> (8 * 1)) & 0xFF;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	0a19      	lsrs	r1, r3, #8
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	b2ca      	uxtb	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_cliff.base >> (8 * 2)) & 0xFF;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	0c19      	lsrs	r1, r3, #16
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	3302      	adds	r3, #2
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_cliff.base >> (8 * 3)) & 0xFF;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	0e19      	lsrs	r1, r3, #24
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	3303      	adds	r3, #3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b2ca      	uxtb	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->cliff);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3304      	adds	r3, #4
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_sonar;
      u_sonar.real = this->sonar;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_sonar.base >> (8 * 0)) & 0xFF;
 8003b2e:	69f9      	ldr	r1, [r7, #28]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	b2ca      	uxtb	r2, r1
 8003b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_sonar.base >> (8 * 1)) & 0xFF;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	0a19      	lsrs	r1, r3, #8
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	b2ca      	uxtb	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_sonar.base >> (8 * 2)) & 0xFF;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	0c19      	lsrs	r1, r3, #16
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3302      	adds	r3, #2
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	b2ca      	uxtb	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_sonar.base >> (8 * 3)) & 0xFF;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	0e19      	lsrs	r1, r3, #24
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	3303      	adds	r3, #3
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4413      	add	r3, r2
 8003b66:	b2ca      	uxtb	r2, r1
 8003b68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->sonar);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_illumination;
      u_illumination.real = this->illumination;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_illumination.base >> (8 * 0)) & 0xFF;
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b2ca      	uxtb	r2, r1
 8003b80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_illumination.base >> (8 * 1)) & 0xFF;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	0a19      	lsrs	r1, r3, #8
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	3301      	adds	r3, #1
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b2ca      	uxtb	r2, r1
 8003b90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_illumination.base >> (8 * 2)) & 0xFF;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	0c19      	lsrs	r1, r3, #16
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	3302      	adds	r3, #2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	b2ca      	uxtb	r2, r1
 8003ba0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_illumination.base >> (8 * 3)) & 0xFF;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	0e19      	lsrs	r1, r3, #24
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	3303      	adds	r3, #3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	b2ca      	uxtb	r2, r1
 8003bb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->illumination);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->led >> (8 * 0)) & 0xFF;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003bc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->led);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	3301      	adds	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->button >> (8 * 0)) & 0xFF;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8003bd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->button);
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        bool real;
        uint8_t base;
      } u_torque;
      u_torque.real = this->torque;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003be6:	753b      	strb	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_torque.base >> (8 * 0)) & 0xFF;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	7d3a      	ldrb	r2, [r7, #20]
 8003bf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->torque);
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        int32_t real;
        uint32_t base;
      } u_left_encoder;
      u_left_encoder.real = this->left_encoder;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_left_encoder.base >> (8 * 0)) & 0xFF;
 8003bfe:	6939      	ldr	r1, [r7, #16]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_left_encoder.base >> (8 * 1)) & 0xFF;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	0a19      	lsrs	r1, r3, #8
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	3301      	adds	r3, #1
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2ca      	uxtb	r2, r1
 8003c18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_left_encoder.base >> (8 * 2)) & 0xFF;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	0c19      	lsrs	r1, r3, #16
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	3302      	adds	r3, #2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	b2ca      	uxtb	r2, r1
 8003c28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_left_encoder.base >> (8 * 3)) & 0xFF;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	0e19      	lsrs	r1, r3, #24
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	3303      	adds	r3, #3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	b2ca      	uxtb	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->left_encoder);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        int32_t real;
        uint32_t base;
      } u_right_encoder;
      u_right_encoder.real = this->right_encoder;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_right_encoder.base >> (8 * 0)) & 0xFF;
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	b2ca      	uxtb	r2, r1
 8003c50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_right_encoder.base >> (8 * 1)) & 0xFF;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0a19      	lsrs	r1, r3, #8
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	3301      	adds	r3, #1
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2ca      	uxtb	r2, r1
 8003c60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_right_encoder.base >> (8 * 2)) & 0xFF;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0c19      	lsrs	r1, r3, #16
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	3302      	adds	r3, #2
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2ca      	uxtb	r2, r1
 8003c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_right_encoder.base >> (8 * 3)) & 0xFF;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0e19      	lsrs	r1, r3, #24
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	3303      	adds	r3, #3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2ca      	uxtb	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->right_encoder);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	3304      	adds	r3, #4
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_battery;
      u_battery.real = this->battery;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_battery.base >> (8 * 0)) & 0xFF;
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_battery.base >> (8 * 1)) & 0xFF;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0a19      	lsrs	r1, r3, #8
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2ca      	uxtb	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_battery.base >> (8 * 2)) & 0xFF;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	0c19      	lsrs	r1, r3, #16
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2ca      	uxtb	r2, r1
 8003cb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_battery.base >> (8 * 3)) & 0xFF;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	0e19      	lsrs	r1, r3, #24
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3303      	adds	r3, #3
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2ca      	uxtb	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->battery);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	3304      	adds	r3, #4
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZN15turtlebot3_msgs11SensorState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
      offset += this->header.deserialize(inbuffer + offset);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1d18      	adds	r0, r3, #4
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fe fadc 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	4413      	add	r3, r2
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
      this->bumper =  ((uint8_t) (*(inbuffer + offset)));
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->bumper);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	3301      	adds	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_cliff;
      u_cliff.base = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
      u_cliff.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	623b      	str	r3, [r7, #32]
      u_cliff.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	3301      	adds	r3, #1
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	4313      	orrs	r3, r2
 8003d34:	623b      	str	r3, [r7, #32]
      u_cliff.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	440b      	add	r3, r1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	4313      	orrs	r3, r2
 8003d46:	623b      	str	r3, [r7, #32]
      u_cliff.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	3303      	adds	r3, #3
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	440b      	add	r3, r1
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	4313      	orrs	r3, r2
 8003d58:	623b      	str	r3, [r7, #32]
      this->cliff = u_cliff.real;
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->cliff);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	3304      	adds	r3, #4
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_sonar;
      u_sonar.base = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
      u_sonar.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	440a      	add	r2, r1
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
      u_sonar.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	440b      	add	r3, r1
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61fb      	str	r3, [r7, #28]
      u_sonar.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3302      	adds	r3, #2
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	440b      	add	r3, r1
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
      u_sonar.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	3303      	adds	r3, #3
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	440b      	add	r3, r1
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61fb      	str	r3, [r7, #28]
      this->sonar = u_sonar.real;
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->sonar);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	3304      	adds	r3, #4
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_illumination;
      u_illumination.base = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
      u_illumination.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	6839      	ldr	r1, [r7, #0]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      u_illumination.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
      u_illumination.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	3302      	adds	r3, #2
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	440b      	add	r3, r1
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
      u_illumination.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3303      	adds	r3, #3
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	440b      	add	r3, r1
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      this->illumination = u_illumination.real;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->illumination);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
      this->led =  ((uint8_t) (*(inbuffer + offset)));
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->led);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	3301      	adds	r3, #1
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
      this->button =  ((uint8_t) (*(inbuffer + offset)));
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      offset += sizeof(this->button);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	3301      	adds	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        bool real;
        uint8_t base;
      } u_torque;
      u_torque.base = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	753b      	strb	r3, [r7, #20]
      u_torque.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e3a:	7d3a      	ldrb	r2, [r7, #20]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	440b      	add	r3, r1
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	753b      	strb	r3, [r7, #20]
      this->torque = u_torque.real;
 8003e4a:	7d3a      	ldrb	r2, [r7, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      offset += sizeof(this->torque);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	3301      	adds	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        int32_t real;
        uint32_t base;
      } u_left_encoder;
      u_left_encoder.base = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
      u_left_encoder.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	440a      	add	r2, r1
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
      u_left_encoder.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	3301      	adds	r3, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	440b      	add	r3, r1
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
      u_left_encoder.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	3302      	adds	r3, #2
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	440b      	add	r3, r1
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      u_left_encoder.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	3303      	adds	r3, #3
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	440b      	add	r3, r1
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
      this->left_encoder = u_left_encoder.real;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	62da      	str	r2, [r3, #44]	; 0x2c
      offset += sizeof(this->left_encoder);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        int32_t real;
        uint32_t base;
      } u_right_encoder;
      u_right_encoder.base = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
      u_right_encoder.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
      u_right_encoder.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	440b      	add	r3, r1
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
      u_right_encoder.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	440b      	add	r3, r1
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
      u_right_encoder.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	440b      	add	r3, r1
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
      this->right_encoder = u_right_encoder.real;
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
      offset += sizeof(this->right_encoder);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3304      	adds	r3, #4
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_battery;
      u_battery.base = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
      u_battery.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
      u_battery.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	3301      	adds	r3, #1
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	440b      	add	r3, r1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
      u_battery.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	3302      	adds	r3, #2
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	440b      	add	r3, r1
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]
      u_battery.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	3303      	adds	r3, #3
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	440b      	add	r3, r1
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
      this->battery = u_battery.real;
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->battery);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3304      	adds	r3, #4
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f56:	4618      	mov	r0, r3
 8003f58:	3728      	adds	r7, #40	; 0x28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_ZN15turtlebot3_msgs11SensorState7getTypeEv>:

    const char * getType(){ return "turtlebot3_msgs/SensorState"; };
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <_ZN15turtlebot3_msgs11SensorState7getTypeEv+0x18>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	0800a7c4 	.word	0x0800a7c4

08003f7c <_ZN15turtlebot3_msgs11SensorState6getMD5Ev>:
    const char * getMD5(){ return "7250c1dc0b61c4190e78f528f599285f"; };
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <_ZN15turtlebot3_msgs11SensorState6getMD5Ev+0x18>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	0800a7e0 	.word	0x0800a7e0

08003f98 <_ZN15turtlebot3_msgs5SoundC1Ev>:
      enum { LOW_BATTERY =  2 };
      enum { ERROR =  3 };
      enum { BUTTON1 =  4 };
      enum { BUTTON2 =  5 };

    Sound():
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
      value(0)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd f816 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <_ZN15turtlebot3_msgs5SoundC1Ev+0x28>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	711a      	strb	r2, [r3, #4]
    {
    }
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	0800ac60 	.word	0x0800ac60

08003fc4 <_ZNK15turtlebot3_msgs5Sound9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->value >> (8 * 0)) & 0xFF;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	7912      	ldrb	r2, [r2, #4]
 8003fdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->value);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
      return offset;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZN15turtlebot3_msgs5Sound11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
      this->value =  ((uint8_t) (*(inbuffer + offset)));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4413      	add	r3, r2
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->value);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
     return offset;
 8004012:	68fb      	ldr	r3, [r7, #12]
    }
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_ZN15turtlebot3_msgs5Sound7getTypeEv>:

    const char * getType(){ return "turtlebot3_msgs/Sound"; };
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <_ZN15turtlebot3_msgs5Sound7getTypeEv+0x18>)
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	0800a804 	.word	0x0800a804

0800403c <_ZN15turtlebot3_msgs5Sound6getMD5Ev>:
    const char * getMD5(){ return "e1f8c7f8a9a61383b5734fbdeca2f99a"; };
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <_ZN15turtlebot3_msgs5Sound6getMD5Ev+0x18>)
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	0800a81c 	.word	0x0800a81c

08004058 <_ZN15turtlebot3_msgs11VersionInfoC1Ev>:
      typedef const char* _firmware_type;
      _firmware_type firmware;
      typedef const char* _software_type;
      _software_type software;

    VersionInfo():
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
      hardware(""),
      firmware(""),
      software("")
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc ffb6 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <_ZN15turtlebot3_msgs11VersionInfoC1Ev+0x34>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <_ZN15turtlebot3_msgs11VersionInfoC1Ev+0x38>)
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a06      	ldr	r2, [pc, #24]	; (8004090 <_ZN15turtlebot3_msgs11VersionInfoC1Ev+0x38>)
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <_ZN15turtlebot3_msgs11VersionInfoC1Ev+0x38>)
 800407e:	60da      	str	r2, [r3, #12]
    {
    }
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0800ac48 	.word	0x0800ac48
 8004090:	0800a3a8 	.word	0x0800a3a8

08004094 <_ZNK15turtlebot3_msgs11VersionInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
      uint32_t length_hardware = strlen(this->hardware);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc f8a2 	bl	80001f0 <strlen>
 80040ac:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_hardware);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f9f8 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3304      	adds	r3, #4
 80040c0:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->hardware, length_hardware);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	18d0      	adds	r0, r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4619      	mov	r1, r3
 80040d0:	f005 fcba 	bl	8009a48 <memcpy>
      offset += length_hardware;
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
      uint32_t length_firmware = strlen(this->firmware);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc f885 	bl	80001f0 <strlen>
 80040e6:	60f8      	str	r0, [r7, #12]
      varToArr(outbuffer + offset, length_firmware);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f9db 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3304      	adds	r3, #4
 80040fa:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->firmware, length_firmware);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	18d0      	adds	r0, r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4619      	mov	r1, r3
 800410a:	f005 fc9d 	bl	8009a48 <memcpy>
      offset += length_firmware;
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
      uint32_t length_software = strlen(this->software);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc f868 	bl	80001f0 <strlen>
 8004120:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_software);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f9be 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3304      	adds	r3, #4
 8004134:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->software, length_software);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	18d0      	adds	r0, r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4619      	mov	r1, r3
 8004144:	f005 fc80 	bl	8009a48 <memcpy>
      offset += length_software;
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
      return offset;
 8004150:	697b      	ldr	r3, [r7, #20]
    }
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
      uint32_t length_hardware;
      arrToVar(length_hardware, (inbuffer + offset));
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	441a      	add	r2, r3
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f9b7 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	3304      	adds	r3, #4
 800417e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_hardware; ++k){
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	429a      	cmp	r2, r3
 800418e:	d20c      	bcs.n	80041aa <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	441a      	add	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	3b01      	subs	r3, #1
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	440b      	add	r3, r1
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_hardware; ++k){
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	3301      	adds	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e7ec      	b.n	8004184 <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_hardware-1]=0;
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	3b01      	subs	r3, #1
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4413      	add	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
      this->hardware = (char *)(inbuffer + offset-1);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3b01      	subs	r3, #1
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]
      offset += length_hardware;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_firmware;
      arrToVar(length_firmware, (inbuffer + offset));
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	441a      	add	r2, r3
 80041d4:	f107 0310 	add.w	r3, r7, #16
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f984 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	3304      	adds	r3, #4
 80041e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_firmware; ++k){
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0xb6>
          inbuffer[k-1]=inbuffer[k];
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	441a      	add	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	440b      	add	r3, r1
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_firmware; ++k){
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	3301      	adds	r3, #1
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	e7ec      	b.n	80041ea <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0x90>
      }
      inbuffer[offset+length_firmware-1]=0;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	3b01      	subs	r3, #1
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	4413      	add	r3, r2
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
      this->firmware = (char *)(inbuffer + offset-1);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	3b01      	subs	r3, #1
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
      offset += length_firmware;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4413      	add	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      uint32_t length_software;
      arrToVar(length_software, (inbuffer + offset));
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	441a      	add	r2, r3
 800423a:	f107 030c 	add.w	r3, r7, #12
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f951 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3304      	adds	r3, #4
 800424a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_software; ++k){
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	429a      	cmp	r2, r3
 800425a:	d20c      	bcs.n	8004276 <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0x11c>
          inbuffer[k-1]=inbuffer[k];
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	441a      	add	r2, r3
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b01      	subs	r3, #1
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	440b      	add	r3, r1
 800426a:	7812      	ldrb	r2, [r2, #0]
 800426c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_software; ++k){
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3301      	adds	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e7ec      	b.n	8004250 <_ZN15turtlebot3_msgs11VersionInfo11deserializeEPh+0xf6>
      }
      inbuffer[offset+length_software-1]=0;
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	3b01      	subs	r3, #1
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
      this->software = (char *)(inbuffer + offset-1);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3b01      	subs	r3, #1
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
      offset += length_software;
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
     return offset;
 800429a:	69bb      	ldr	r3, [r7, #24]
    }
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZN15turtlebot3_msgs11VersionInfo7getTypeEv>:

    const char * getType(){ return "turtlebot3_msgs/VersionInfo"; };
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <_ZN15turtlebot3_msgs11VersionInfo7getTypeEv+0x18>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	0800a840 	.word	0x0800a840

080042c0 <_ZN15turtlebot3_msgs11VersionInfo6getMD5Ev>:
    const char * getMD5(){ return "43e0361461af2970a33107409403ef3c"; };
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <_ZN15turtlebot3_msgs11VersionInfo6getMD5Ev+0x18>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	0800a85c 	.word	0x0800a85c

080042dc <_ZN11sensor_msgs3ImuC1Ev>:
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      
      float linear_acceleration_covariance[9];

    Imu():
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc fe74 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80042ec:	4a1f      	ldr	r2, [pc, #124]	; (800436c <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd ff22 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3318      	adds	r3, #24
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fc73 	bl	8002bec <_ZN13geometry_msgs10QuaternionC1Ev>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800430c:	2308      	movs	r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	db05      	blt.n	800431e <_ZN11sensor_msgs3ImuC1Ev+0x42>
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	6011      	str	r1, [r2, #0]
 8004318:	3204      	adds	r2, #4
 800431a:	3b01      	subs	r3, #1
 800431c:	e7f7      	b.n	800430e <_ZN11sensor_msgs3ImuC1Ev+0x32>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3350      	adds	r3, #80	; 0x50
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fbbc 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800432e:	2308      	movs	r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	db05      	blt.n	8004340 <_ZN11sensor_msgs3ImuC1Ev+0x64>
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	3204      	adds	r2, #4
 800433c:	3b01      	subs	r3, #1
 800433e:	e7f7      	b.n	8004330 <_ZN11sensor_msgs3ImuC1Ev+0x54>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3384      	adds	r3, #132	; 0x84
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fbab 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8004350:	2308      	movs	r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	db05      	blt.n	8004362 <_ZN11sensor_msgs3ImuC1Ev+0x86>
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	6011      	str	r1, [r2, #0]
 800435c:	3204      	adds	r2, #4
 800435e:	3b01      	subs	r3, #1
 8004360:	e7f7      	b.n	8004352 <_ZN11sensor_msgs3ImuC1Ev+0x76>
    {
    }
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	0800ac30 	.word	0x0800ac30

08004370 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1d18      	adds	r0, r3, #4
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	4619      	mov	r1, r3
 800438a:	f7fd fef9 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4413      	add	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f103 0018 	add.w	r0, r3, #24
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fe fc44 	bl	8002c30 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80043a8:	4602      	mov	r2, r0
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4413      	add	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d817      	bhi.n	80043ea <_ZNK11sensor_msgs3Imu9serializeEPh+0x7a>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	18d1      	adds	r1, r2, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	330a      	adds	r3, #10
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	3304      	adds	r3, #4
 80043cc:	edd3 7a00 	vldr	s15, [r3]
 80043d0:	eeb0 0a67 	vmov.f32	s0, s15
 80043d4:	4608      	mov	r0, r1
 80043d6:	f7fc fd20 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e7e4      	b.n	80043b4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	4413      	add	r3, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f7fe fb70 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4413      	add	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d816      	bhi.n	800443c <_ZNK11sensor_msgs3Imu9serializeEPh+0xcc>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	18d1      	adds	r1, r2, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3318      	adds	r3, #24
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	eeb0 0a67 	vmov.f32	s0, s15
 8004426:	4608      	mov	r0, r1
 8004428:	f7fc fcf7 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e7e5      	b.n	8004408 <_ZNK11sensor_msgs3Imu9serializeEPh+0x98>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fe fb47 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d817      	bhi.n	8004490 <_ZNK11sensor_msgs3Imu9serializeEPh+0x120>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	18d1      	adds	r1, r2, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3324      	adds	r3, #36	; 0x24
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	eeb0 0a67 	vmov.f32	s0, s15
 800447a:	4608      	mov	r0, r1
 800447c:	f7fc fccd 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004480:	4602      	mov	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	e7e4      	b.n	800445a <_ZNK11sensor_msgs3Imu9serializeEPh+0xea>
      }
      return offset;
 8004490:	697b      	ldr	r3, [r7, #20]
    }
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4413      	add	r3, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fd fefc 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f103 0018 	add.w	r0, r3, #24
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fe fbf7 	bl	8002cc0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d813      	bhi.n	800450c <_ZN11sensor_msgs3Imu11deserializeEPh+0x72>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	18d0      	adds	r0, r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	330a      	adds	r3, #10
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	f7fc fcfb 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4413      	add	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3301      	adds	r3, #1
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e7e8      	b.n	80044de <_ZN11sensor_msgs3Imu11deserializeEPh+0x44>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	4413      	add	r3, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f7fe fb18 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d812      	bhi.n	8004556 <_ZN11sensor_msgs3Imu11deserializeEPh+0xbc>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	18d0      	adds	r0, r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3318      	adds	r3, #24
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f7fc fcd6 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4413      	add	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e7e9      	b.n	800452a <_ZN11sensor_msgs3Imu11deserializeEPh+0x90>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f103 0084 	add.w	r0, r3, #132	; 0x84
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4413      	add	r3, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f7fe faf3 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4413      	add	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d813      	bhi.n	80045a2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x108>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	18d0      	adds	r0, r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	f7fc fcb0 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3301      	adds	r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e7e8      	b.n	8004574 <_ZN11sensor_msgs3Imu11deserializeEPh+0xda>
      }
     return offset;
 80045a2:	697b      	ldr	r3, [r7, #20]
    }
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	0800a880 	.word	0x0800a880

080045c8 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	0800a890 	.word	0x0800a890

080045e4 <_ZN11sensor_msgs13MagneticFieldC1Ev>:
      _header_type header;
      typedef geometry_msgs::Vector3 _magnetic_field_type;
      _magnetic_field_type magnetic_field;
      float magnetic_field_covariance[9];

    MagneticField():
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
      header(),
      magnetic_field(),
      magnetic_field_covariance()
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc fcf0 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x4c>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fd9e 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3318      	adds	r3, #24
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fa49 	bl	8002aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004614:	2308      	movs	r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	db05      	blt.n	8004626 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x42>
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	3204      	adds	r2, #4
 8004622:	3b01      	subs	r3, #1
 8004624:	e7f7      	b.n	8004616 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x32>
    {
    }
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	0800ac18 	.word	0x0800ac18

08004634 <_ZNK11sensor_msgs13MagneticField9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	1d18      	adds	r0, r3, #4
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4413      	add	r3, r2
 800464c:	4619      	mov	r1, r3
 800464e:	f7fd fd97 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.serialize(outbuffer + offset);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 0018 	add.w	r0, r3, #24
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4413      	add	r3, r2
 8004666:	4619      	mov	r1, r3
 8004668:	f7fe fa38 	bl	8002adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d816      	bhi.n	80046ac <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x78>
      offset += serializeAvrFloat64(outbuffer + offset, this->magnetic_field_covariance[i]);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	18d1      	adds	r1, r2, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	330a      	adds	r3, #10
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	eeb0 0a67 	vmov.f32	s0, s15
 8004696:	4608      	mov	r0, r1
 8004698:	f7fc fbbf 	bl	8000e1a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	e7e5      	b.n	8004678 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x44>
      }
      return offset;
 80046ac:	68fb      	ldr	r3, [r7, #12]
    }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ZN11sensor_msgs13MagneticField11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f7fd fdee 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.deserialize(inbuffer + offset);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f103 0018 	add.w	r0, r3, #24
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fe fa30 	bl	8002b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d812      	bhi.n	8004726 <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x70>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->magnetic_field_covariance[i]));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	18d0      	adds	r0, r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	330a      	adds	r3, #10
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	4619      	mov	r1, r3
 8004712:	f7fc fbee 	bl	8000ef2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3301      	adds	r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	e7e9      	b.n	80046fa <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x44>
      }
     return offset;
 8004726:	68fb      	ldr	r3, [r7, #12]
    }
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZN11sensor_msgs13MagneticField7getTypeEv>:

    const char * getType(){ return "sensor_msgs/MagneticField"; };
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <_ZN11sensor_msgs13MagneticField7getTypeEv+0x18>)
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	0800a8b4 	.word	0x0800a8b4

0800474c <_ZN11sensor_msgs13MagneticField6getMD5Ev>:
    const char * getMD5(){ return "2f3b0b43eed0c9501de0fa3ff89a45aa"; };
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <_ZN11sensor_msgs13MagneticField6getMD5Ev+0x18>)
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	0800a8d0 	.word	0x0800a8d0

08004768 <_ZN11sensor_msgs12BatteryStateC1Ev>:
      enum { POWER_SUPPLY_TECHNOLOGY_LIPO =  3 };
      enum { POWER_SUPPLY_TECHNOLOGY_LIFE =  4 };
      enum { POWER_SUPPLY_TECHNOLOGY_NICD =  5 };
      enum { POWER_SUPPLY_TECHNOLOGY_LIMN =  6 };

    BatteryState():
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
      power_supply_health(0),
      power_supply_technology(0),
      present(0),
      cell_voltage_length(0), cell_voltage(NULL),
      location(""),
      serial_number("")
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fc2e 	bl	8000fd4 <_ZN3ros3MsgC1Ev>
 8004778:	4a20      	ldr	r2, [pc, #128]	; (80047fc <_ZN11sensor_msgs12BatteryStateC1Ev+0x94>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd fcdc 	bl	8002140 <_ZN8std_msgs6HeaderC1Ev>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	61da      	str	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a06      	ldr	r2, [pc, #24]	; (8004800 <_ZN11sensor_msgs12BatteryStateC1Ev+0x98>)
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <_ZN11sensor_msgs12BatteryStateC1Ev+0x98>)
 80047ee:	645a      	str	r2, [r3, #68]	; 0x44
    {
    }
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	0800ac00 	.word	0x0800ac00
 8004800:	0800a3a8 	.word	0x0800a3a8

08004804 <_ZNK11sensor_msgs12BatteryState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4413      	add	r3, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f7fd fcaf 	bl	8002180 <_ZNK8std_msgs6Header9serializeEPh>
 8004822:	4602      	mov	r2, r0
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	4413      	add	r3, r2
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_voltage;
      u_voltage.real = this->voltage;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_voltage.base >> (8 * 0)) & 0xFF;
 8004830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	4413      	add	r3, r2
 8004838:	b2ca      	uxtb	r2, r1
 800483a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_voltage.base >> (8 * 1)) & 0xFF;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	0a19      	lsrs	r1, r3, #8
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	3301      	adds	r3, #1
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	4413      	add	r3, r2
 8004848:	b2ca      	uxtb	r2, r1
 800484a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_voltage.base >> (8 * 2)) & 0xFF;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	0c19      	lsrs	r1, r3, #16
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	3302      	adds	r3, #2
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	4413      	add	r3, r2
 8004858:	b2ca      	uxtb	r2, r1
 800485a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_voltage.base >> (8 * 3)) & 0xFF;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	0e19      	lsrs	r1, r3, #24
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	3303      	adds	r3, #3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4413      	add	r3, r2
 8004868:	b2ca      	uxtb	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->voltage);
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	3304      	adds	r3, #4
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_current;
      u_current.real = this->current;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_current.base >> (8 * 0)) & 0xFF;
 8004878:	6a39      	ldr	r1, [r7, #32]
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	4413      	add	r3, r2
 8004880:	b2ca      	uxtb	r2, r1
 8004882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_current.base >> (8 * 1)) & 0xFF;
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	0a19      	lsrs	r1, r3, #8
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	3301      	adds	r3, #1
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4413      	add	r3, r2
 8004890:	b2ca      	uxtb	r2, r1
 8004892:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_current.base >> (8 * 2)) & 0xFF;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	0c19      	lsrs	r1, r3, #16
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	3302      	adds	r3, #2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	b2ca      	uxtb	r2, r1
 80048a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_current.base >> (8 * 3)) & 0xFF;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	0e19      	lsrs	r1, r3, #24
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	3303      	adds	r3, #3
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	b2ca      	uxtb	r2, r1
 80048b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->current);
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	3304      	adds	r3, #4
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_charge;
      u_charge.real = this->charge;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_charge.base >> (8 * 0)) & 0xFF;
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	b2ca      	uxtb	r2, r1
 80048ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_charge.base >> (8 * 1)) & 0xFF;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	0a19      	lsrs	r1, r3, #8
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	3301      	adds	r3, #1
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	b2ca      	uxtb	r2, r1
 80048da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_charge.base >> (8 * 2)) & 0xFF;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	0c19      	lsrs	r1, r3, #16
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	3302      	adds	r3, #2
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	b2ca      	uxtb	r2, r1
 80048ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_charge.base >> (8 * 3)) & 0xFF;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	0e19      	lsrs	r1, r3, #24
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	3303      	adds	r3, #3
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	b2ca      	uxtb	r2, r1
 80048fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->charge);
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	3304      	adds	r3, #4
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_capacity;
      u_capacity.real = this->capacity;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_capacity.base >> (8 * 0)) & 0xFF;
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	4413      	add	r3, r2
 8004910:	b2ca      	uxtb	r2, r1
 8004912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_capacity.base >> (8 * 1)) & 0xFF;
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	0a19      	lsrs	r1, r3, #8
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	3301      	adds	r3, #1
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	4413      	add	r3, r2
 8004920:	b2ca      	uxtb	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_capacity.base >> (8 * 2)) & 0xFF;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	0c19      	lsrs	r1, r3, #16
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	3302      	adds	r3, #2
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	4413      	add	r3, r2
 8004930:	b2ca      	uxtb	r2, r1
 8004932:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_capacity.base >> (8 * 3)) & 0xFF;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	0e19      	lsrs	r1, r3, #24
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	3303      	adds	r3, #3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	4413      	add	r3, r2
 8004940:	b2ca      	uxtb	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->capacity);
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	3304      	adds	r3, #4
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_design_capacity;
      u_design_capacity.real = this->design_capacity;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_design_capacity.base >> (8 * 0)) & 0xFF;
 8004950:	6979      	ldr	r1, [r7, #20]
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	4413      	add	r3, r2
 8004958:	b2ca      	uxtb	r2, r1
 800495a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_design_capacity.base >> (8 * 1)) & 0xFF;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	0a19      	lsrs	r1, r3, #8
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	3301      	adds	r3, #1
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	4413      	add	r3, r2
 8004968:	b2ca      	uxtb	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_design_capacity.base >> (8 * 2)) & 0xFF;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0c19      	lsrs	r1, r3, #16
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	3302      	adds	r3, #2
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	b2ca      	uxtb	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_design_capacity.base >> (8 * 3)) & 0xFF;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	0e19      	lsrs	r1, r3, #24
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	3303      	adds	r3, #3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4413      	add	r3, r2
 8004988:	b2ca      	uxtb	r2, r1
 800498a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->design_capacity);
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	3304      	adds	r3, #4
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        float real;
        uint32_t base;
      } u_percentage;
      u_percentage.real = this->percentage;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_percentage.base >> (8 * 0)) & 0xFF;
 8004998:	6939      	ldr	r1, [r7, #16]
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	4413      	add	r3, r2
 80049a0:	b2ca      	uxtb	r2, r1
 80049a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_percentage.base >> (8 * 1)) & 0xFF;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	0a19      	lsrs	r1, r3, #8
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	3301      	adds	r3, #1
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4413      	add	r3, r2
 80049b0:	b2ca      	uxtb	r2, r1
 80049b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_percentage.base >> (8 * 2)) & 0xFF;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	0c19      	lsrs	r1, r3, #16
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	3302      	adds	r3, #2
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4413      	add	r3, r2
 80049c0:	b2ca      	uxtb	r2, r1
 80049c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_percentage.base >> (8 * 3)) & 0xFF;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	0e19      	lsrs	r1, r3, #24
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	3303      	adds	r3, #3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	b2ca      	uxtb	r2, r1
 80049d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->percentage);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	3304      	adds	r3, #4
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->power_supply_status >> (8 * 0)) & 0xFF;
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80049e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->power_supply_status);
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	3301      	adds	r3, #1
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->power_supply_health >> (8 * 0)) & 0xFF;
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80049fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->power_supply_health);
 80049fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fe:	3301      	adds	r3, #1
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->power_supply_technology >> (8 * 0)) & 0xFF;
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004a0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->power_supply_technology);
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	3301      	adds	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
      union {
        bool real;
        uint8_t base;
      } u_present;
      u_present.real = this->present;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004a1c:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_present.base >> (8 * 0)) & 0xFF;
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	4413      	add	r3, r2
 8004a24:	7b3a      	ldrb	r2, [r7, #12]
 8004a26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->present);
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->cell_voltage_length >> (8 * 0)) & 0xFF;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	b2ca      	uxtb	r2, r1
 8004a3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->cell_voltage_length >> (8 * 1)) & 0xFF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	0a19      	lsrs	r1, r3, #8
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	3301      	adds	r3, #1
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	b2ca      	uxtb	r2, r1
 8004a4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->cell_voltage_length >> (8 * 2)) & 0xFF;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	0c19      	lsrs	r1, r3, #16
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	3302      	adds	r3, #2
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	b2ca      	uxtb	r2, r1
 8004a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->cell_voltage_length >> (8 * 3)) & 0xFF;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	0e19      	lsrs	r1, r3, #24
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	3303      	adds	r3, #3
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b2ca      	uxtb	r2, r1
 8004a70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->cell_voltage_length);
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	3304      	adds	r3, #4
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8004a78:	2300      	movs	r3, #0
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d22b      	bcs.n	8004ade <_ZNK11sensor_msgs12BatteryState9serializeEPh+0x2da>
      union {
        float real;
        uint32_t base;
      } u_cell_voltagei;
      u_cell_voltagei.real = this->cell_voltage[i];
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_cell_voltagei.base >> (8 * 0)) & 0xFF;
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	b2ca      	uxtb	r2, r1
 8004a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_cell_voltagei.base >> (8 * 1)) & 0xFF;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	0a19      	lsrs	r1, r3, #8
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	b2ca      	uxtb	r2, r1
 8004aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_cell_voltagei.base >> (8 * 2)) & 0xFF;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	0c19      	lsrs	r1, r3, #16
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	4413      	add	r3, r2
 8004abc:	b2ca      	uxtb	r2, r1
 8004abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_cell_voltagei.base >> (8 * 3)) & 0xFF;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0e19      	lsrs	r1, r3, #24
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	3303      	adds	r3, #3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	b2ca      	uxtb	r2, r1
 8004ace:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->cell_voltage[i]);
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	3301      	adds	r3, #1
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
 8004adc:	e7ce      	b.n	8004a7c <_ZNK11sensor_msgs12BatteryState9serializeEPh+0x278>
      }
      uint32_t length_location = strlen(this->location);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fb fb84 	bl	80001f0 <strlen>
 8004ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
      varToArr(outbuffer + offset, length_location);
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fcda 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	3304      	adds	r3, #4
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->location, length_location);
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	18d0      	adds	r0, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f004 ff9c 	bl	8009a48 <memcpy>
      offset += length_location;
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	4413      	add	r3, r2
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t length_serial_number = strlen(this->serial_number);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fb67 	bl	80001f0 <strlen>
 8004b22:	62b8      	str	r0, [r7, #40]	; 0x28
      varToArr(outbuffer + offset, length_serial_number);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fcbd 	bl	80054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	3304      	adds	r3, #4
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->serial_number, length_serial_number);
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	18d0      	adds	r0, r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b44:	4619      	mov	r1, r3
 8004b46:	f004 ff7f 	bl	8009a48 <memcpy>
      offset += length_serial_number;
 8004b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	4413      	add	r3, r2
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
      return offset;
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004b54:	4618      	mov	r0, r3
 8004b56:	3738      	adds	r7, #56	; 0x38
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <_ZN11sensor_msgs12BatteryState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b092      	sub	sp, #72	; 0x48
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	647b      	str	r3, [r7, #68]	; 0x44
      offset += this->header.deserialize(inbuffer + offset);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1d18      	adds	r0, r3, #4
 8004b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	f7fd fb9b 	bl	80022b0 <_ZN8std_msgs6Header11deserializeEPh>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	4413      	add	r3, r2
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_voltage;
      u_voltage.base = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	633b      	str	r3, [r7, #48]	; 0x30
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	3301      	adds	r3, #1
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	440b      	add	r3, r1
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	3302      	adds	r3, #2
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	440b      	add	r3, r1
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bbc:	3303      	adds	r3, #3
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	440b      	add	r3, r1
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30
      this->voltage = u_voltage.real;
 8004bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->voltage);
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_current;
      u_current.base = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	440a      	add	r2, r1
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bec:	3301      	adds	r3, #1
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	440b      	add	r3, r1
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfe:	3302      	adds	r3, #2
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	440b      	add	r3, r1
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	3303      	adds	r3, #3
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	440b      	add	r3, r1
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      this->current = u_current.real;
 8004c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->current);
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	3304      	adds	r3, #4
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_charge;
      u_charge.base = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	440a      	add	r2, r1
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	3301      	adds	r3, #1
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	440b      	add	r3, r1
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c52:	3302      	adds	r3, #2
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	440b      	add	r3, r1
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c64:	3303      	adds	r3, #3
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	440b      	add	r3, r1
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
      this->charge = u_charge.real;
 8004c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->charge);
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_capacity;
      u_capacity.base = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c86:	6839      	ldr	r1, [r7, #0]
 8004c88:	440a      	add	r2, r1
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c94:	3301      	adds	r3, #1
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	440b      	add	r3, r1
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca6:	3302      	adds	r3, #2
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	440b      	add	r3, r1
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb8:	3303      	adds	r3, #3
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	440b      	add	r3, r1
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
      this->capacity = u_capacity.real;
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->capacity);
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cce:	3304      	adds	r3, #4
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_design_capacity;
      u_design_capacity.base = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	623b      	str	r3, [r7, #32]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	440a      	add	r2, r1
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	623b      	str	r3, [r7, #32]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	3301      	adds	r3, #1
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	440b      	add	r3, r1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	623b      	str	r3, [r7, #32]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	440b      	add	r3, r1
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	4313      	orrs	r3, r2
 8004d06:	623b      	str	r3, [r7, #32]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	440b      	add	r3, r1
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	4313      	orrs	r3, r2
 8004d18:	623b      	str	r3, [r7, #32]
      this->design_capacity = u_design_capacity.real;
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->design_capacity);
 8004d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d22:	3304      	adds	r3, #4
 8004d24:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        float real;
        uint32_t base;
      } u_percentage;
      u_percentage.base = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	440a      	add	r2, r1
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	440b      	add	r3, r1
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61fb      	str	r3, [r7, #28]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4e:	3302      	adds	r3, #2
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	440b      	add	r3, r1
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	3303      	adds	r3, #3
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	440b      	add	r3, r1
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]
      this->percentage = u_percentage.real;
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c
      offset += sizeof(this->percentage);
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	3304      	adds	r3, #4
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
      this->power_supply_status =  ((uint8_t) (*(inbuffer + offset)));
 8004d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      offset += sizeof(this->power_supply_status);
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
      this->power_supply_health =  ((uint8_t) (*(inbuffer + offset)));
 8004d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      offset += sizeof(this->power_supply_health);
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	3301      	adds	r3, #1
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
      this->power_supply_technology =  ((uint8_t) (*(inbuffer + offset)));
 8004da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
      offset += sizeof(this->power_supply_technology);
 8004db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db2:	3301      	adds	r3, #1
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        bool real;
        uint8_t base;
      } u_present;
      u_present.base = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	763b      	strb	r3, [r7, #24]
      u_present.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004dba:	7e3a      	ldrb	r2, [r7, #24]
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	763b      	strb	r3, [r7, #24]
      this->present = u_present.real;
 8004dca:	7e3a      	ldrb	r2, [r7, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
      offset += sizeof(this->present);
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	647b      	str	r3, [r7, #68]	; 0x44
      uint32_t cell_voltage_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de4:	3301      	adds	r3, #1
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	4413      	add	r3, r2
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df0:	4313      	orrs	r3, r2
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df6:	3302      	adds	r3, #2
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	4313      	orrs	r3, r2
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e08:	3303      	adds	r3, #3
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e14:	4313      	orrs	r3, r2
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
      offset += sizeof(this->cell_voltage_length);
 8004e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(cell_voltage_lengthT > cell_voltage_length)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d90a      	bls.n	8004e3e <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x2e2>
        this->cell_voltage = (float*)realloc(this->cell_voltage, cell_voltage_lengthT * sizeof(float));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f004 fe1e 	bl	8009a74 <realloc>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	63da      	str	r2, [r3, #60]	; 0x3c
      cell_voltage_length = cell_voltage_lengthT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	635a      	str	r2, [r3, #52]	; 0x34
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8004e44:	2300      	movs	r3, #0
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d236      	bcs.n	8004ec0 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x364>
      union {
        float real;
        uint32_t base;
      } u_st_cell_voltage;
      u_st_cell_voltage.base = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e68:	3301      	adds	r3, #1
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	440b      	add	r3, r1
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8c:	3303      	adds	r3, #3
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	440b      	add	r3, r1
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
      this->st_cell_voltage = u_st_cell_voltage.real;
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
      offset += sizeof(this->st_cell_voltage);
 8004ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
        memcpy( &(this->cell_voltage[i]), &(this->st_cell_voltage), sizeof(float));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	3238      	adds	r2, #56	; 0x38
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eba:	3301      	adds	r3, #1
 8004ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ebe:	e7c3      	b.n	8004e48 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x2ec>
      }
      uint32_t length_location;
      arrToVar(length_location, (inbuffer + offset));
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	441a      	add	r2, r3
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fb0b 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
      for(unsigned int k= offset; k< offset+length_location; ++k){
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d20c      	bcs.n	8004f02 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x3a6>
          inbuffer[k-1]=inbuffer[k];
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	441a      	add	r2, r3
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	440b      	add	r3, r1
 8004ef6:	7812      	ldrb	r2, [r2, #0]
 8004ef8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_location; ++k){
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	3301      	adds	r3, #1
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f00:	e7ec      	b.n	8004edc <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x380>
      }
      inbuffer[offset+length_location-1]=0;
 8004f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
      this->location = (char *)(inbuffer + offset-1);
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	3b01      	subs	r3, #1
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
      offset += length_location;
 8004f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
      uint32_t length_serial_number;
      arrToVar(length_serial_number, (inbuffer + offset));
 8004f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	441a      	add	r2, r3
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fad8 	bl	80054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
      for(unsigned int k= offset; k< offset+length_serial_number; ++k){
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d20c      	bcs.n	8004f68 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x40c>
          inbuffer[k-1]=inbuffer[k];
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	441a      	add	r2, r3
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	3b01      	subs	r3, #1
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	440b      	add	r3, r1
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_serial_number; ++k){
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	3301      	adds	r3, #1
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f66:	e7ec      	b.n	8004f42 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x3e6>
      }
      inbuffer[offset+length_serial_number-1]=0;
 8004f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
      this->serial_number = (char *)(inbuffer + offset-1);
 8004f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
      offset += length_serial_number;
 8004f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3748      	adds	r7, #72	; 0x48
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <_ZN11sensor_msgs12BatteryState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/BatteryState"; };
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <_ZN11sensor_msgs12BatteryState7getTypeEv+0x18>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	0800a8f4 	.word	0x0800a8f4

08004fb4 <_ZN11sensor_msgs12BatteryState6getMD5Ev>:
    const char * getMD5(){ return "476f837fa6771f6e16e3bf4ef96f8770"; };
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <_ZN11sensor_msgs12BatteryState6getMD5Ev+0x18>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	0800a910 	.word	0x0800a910

08004fd0 <loop>:
***************** void loop***************************************************
***************** void loop***************************************************
***************** void loop***************************************************
*******************************************************************************/
void loop()
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
	//t는 아마 현재시간?
	uint32_t t = millis;
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <loop+0x34>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	607b      	str	r3, [r7, #4]

	//curent_offset은 현재시간, current_time은 nh.now()(이건 알아봐야한다.)
	updateTime();
 8004fdc:	f000 f8d0 	bl	8005180 <_Z10updateTimev>

	//nh에 연결되면 nh.connected()가 1이 되는가보다.
	updateVariable(nh.connected());
 8004fe0:	4809      	ldr	r0, [pc, #36]	; (8005008 <loop+0x38>)
 8004fe2:	f000 fbd7 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f8e9 	bl	80051c0 <_Z14updateVariableb>
	updateTFPrefix(nh.connected());
 8004fee:	4806      	ldr	r0, [pc, #24]	; (8005008 <loop+0x38>)
 8004ff0:	f000 fbd0 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f8fe 	bl	80051f8 <_Z14updateTFPrefixb>


}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2000009c 	.word	0x2000009c
 8005008:	200000a4 	.word	0x200000a4
 800500c:	00000000 	.word	0x00000000

08005010 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
////////////////////////////////////////////////섭스크라이브 콜백함수///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////콜백함수들은 내비게이션 패키지에서 그냥 주는거니까 받자 그냥 써도 될듯///////////

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  goal_velocity_from_cmd[LINEAR]  = cmd_vel_msg.linear.x;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 800501e:	6013      	str	r3, [r2, #0]
  goal_velocity_from_cmd[ANGULAR] = cmd_vel_msg.angular.z;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 8005026:	6053      	str	r3, [r2, #4]
  //goal_velocity_from_cmd[LINEAR]  = constrain(goal_velocity_from_cmd[LINEAR],  MIN_LINEAR_VELOCITY, MAX_LINEAR_VELOCITY);
  if( goal_velocity_from_cmd[LINEAR]<MIN_LINEAR_VELOCITY) goal_velocity_from_cmd[LINEAR] =MIN_LINEAR_VELOCITY;
 8005028:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb fa9b 	bl	8000568 <__aeabi_f2d>
 8005032:	a323      	add	r3, pc, #140	; (adr r3, 80050c0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xb0>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fb4e 	bl	80006d8 <__aeabi_dcmplt>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x38>
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 8005044:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc4>)
 8005046:	601a      	str	r2, [r3, #0]
  if(goal_velocity_from_cmd[LINEAR]>MAX_LINEAR_VELOCITY) goal_velocity_from_cmd[LINEAR] =MAX_LINEAR_VELOCITY;
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fa8b 	bl	8000568 <__aeabi_f2d>
 8005052:	a31d      	add	r3, pc, #116	; (adr r3, 80050c8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xb8>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb fb5c 	bl	8000714 <__aeabi_dcmpgt>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x58>
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 8005064:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc8>)
 8005066:	601a      	str	r2, [r3, #0]


  //goal_velocity_from_cmd[ANGULAR] = constrain(goal_velocity_from_cmd[ANGULAR], MIN_ANGULAR_VELOCITY, MAX_ANGULAR_VELOCITY);
  if( goal_velocity_from_cmd[ANGULAR]<MIN_LINEAR_VELOCITY) goal_velocity_from_cmd[ANGULAR] =MIN_LINEAR_VELOCITY;
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fa7b 	bl	8000568 <__aeabi_f2d>
 8005072:	a313      	add	r3, pc, #76	; (adr r3, 80050c0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xb0>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fb2e 	bl	80006d8 <__aeabi_dcmplt>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x78>
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc4>)
 8005086:	605a      	str	r2, [r3, #4]
  if(goal_velocity_from_cmd[ANGULAR]>MAX_LINEAR_VELOCITY) goal_velocity_from_cmd[ANGULAR] =MAX_LINEAR_VELOCITY;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fa6b 	bl	8000568 <__aeabi_f2d>
 8005092:	a30d      	add	r3, pc, #52	; (adr r3, 80050c8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xb8>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fb3c 	bl	8000714 <__aeabi_dcmpgt>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x98>
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc0>)
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xc8>)
 80050a6:	605a      	str	r2, [r3, #4]


  tTime[6] = millis;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xcc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0xd0>)
 80050b0:	619a      	str	r2, [r3, #24]
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	d6fc9b3a 	.word	0xd6fc9b3a
 80050c4:	bfcafb85 	.word	0xbfcafb85
 80050c8:	d6fc9b3a 	.word	0xd6fc9b3a
 80050cc:	3fcafb85 	.word	0x3fcafb85
 80050d0:	20001020 	.word	0x20001020
 80050d4:	be57dc2f 	.word	0xbe57dc2f
 80050d8:	3e57dc2f 	.word	0x3e57dc2f
 80050dc:	2000009c 	.word	0x2000009c
 80050e0:	20000ff8 	.word	0x20000ff8

080050e4 <_Z13soundCallbackRKN15turtlebot3_msgs5SoundE>:

void soundCallback(const turtlebot3_msgs::Sound& sound_msg)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	//소리 안내도 되니까 주석
  //sensors.makeSound(sound_msg.value);
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <_Z18motorPowerCallbackRKN8std_msgs4BoolE>:
/*******************************************************************************
* Callback function for motor_power msg
*******************************************************************************/

void motorPowerCallback(const std_msgs::Bool& power_msg)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  bool dxl_power = power_msg.data;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	791b      	ldrb	r3, [r3, #4]
 8005104:	73fb      	strb	r3, [r7, #15]
  //모터 파워 데이터에 따른 동작 구현하기
  //motor_driver.setTorque(dxl_power);
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <_Z13resetCallbackRKN8std_msgs5EmptyE>:

/*******************************************************************************
* Callback function for reset msg
*******************************************************************************/
void resetCallback(const std_msgs::Empty& reset_msg)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b090      	sub	sp, #64	; 0x40
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  char log_msg[50];

  (void)(reset_msg);

  sprintf(log_msg, "Start Calibration of Gyro");
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	4913      	ldr	r1, [pc, #76]	; (8005170 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x5c>)
 8005122:	4618      	mov	r0, r3
 8005124:	f004 fcf2 	bl	8009b0c <siprintf>
  nh.loginfo(log_msg);
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4619      	mov	r1, r3
 800512e:	4811      	ldr	r0, [pc, #68]	; (8005174 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x60>)
 8005130:	f000 fb3d 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

  //sensors.calibrationGyro();

  sprintf(log_msg, "Calibration End");
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	490f      	ldr	r1, [pc, #60]	; (8005178 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x64>)
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fce6 	bl	8009b0c <siprintf>
  nh.loginfo(log_msg);
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4619      	mov	r1, r3
 8005146:	480b      	ldr	r0, [pc, #44]	; (8005174 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x60>)
 8005148:	f000 fb31 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

  initOdom();
 800514c:	f000 f95a 	bl	8005404 <_Z8initOdomv>

  sprintf(log_msg, "Reset Odometry");
 8005150:	f107 030c 	add.w	r3, r7, #12
 8005154:	4909      	ldr	r1, [pc, #36]	; (800517c <_Z13resetCallbackRKN8std_msgs5EmptyE+0x68>)
 8005156:	4618      	mov	r0, r3
 8005158:	f004 fcd8 	bl	8009b0c <siprintf>
  nh.loginfo(log_msg);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	4619      	mov	r1, r3
 8005162:	4804      	ldr	r0, [pc, #16]	; (8005174 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x60>)
 8005164:	f000 fb23 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 8005168:	bf00      	nop
 800516a:	3740      	adds	r7, #64	; 0x40
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	0800a934 	.word	0x0800a934
 8005174:	200000a4 	.word	0x200000a4
 8005178:	0800a950 	.word	0x0800a950
 800517c:	0800a960 	.word	0x0800a960

08005180 <_Z10updateTimev>:
////////////////////////콜백함수들은 내비게이션 패키지에서 그냥 주는거니까 받자 그냥 써도 될듯///////////


//시간 갱신 함수
void updateTime()
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
  current_offset = millis;
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <_Z10updateTimev+0x30>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_Z10updateTimev+0x34>)
 800518e:	601a      	str	r2, [r3, #0]
  current_time = nh.now();
 8005190:	4c09      	ldr	r4, [pc, #36]	; (80051b8 <_Z10updateTimev+0x38>)
 8005192:	463b      	mov	r3, r7
 8005194:	4909      	ldr	r1, [pc, #36]	; (80051bc <_Z10updateTimev+0x3c>)
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fb18 	bl	80057cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 800519c:	4622      	mov	r2, r4
 800519e:	463b      	mov	r3, r7
 80051a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	2000009c 	.word	0x2000009c
 80051b4:	200009e8 	.word	0x200009e8
 80051b8:	200009e0 	.word	0x200009e0
 80051bc:	200000a4 	.word	0x200000a4

080051c0 <_Z14updateVariableb>:

//Update variable (initialization)
void updateVariable(bool isConnected)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
  static bool variable_flag = false;

  if (isConnected)
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <_Z14updateVariableb+0x24>
  {
    if (variable_flag == false)
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <_Z14updateVariableb+0x34>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <_Z14updateVariableb+0x2a>
    {
    	//IMU센서를 시작하는 함수인것같음--> 없어도 됨
      //sensors.initIMU();

      initOdom();
 80051d8:	f000 f914 	bl	8005404 <_Z8initOdomv>

      variable_flag = true;
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <_Z14updateVariableb+0x34>)
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    variable_flag = false;
  }
}
 80051e2:	e002      	b.n	80051ea <_Z14updateVariableb+0x2a>
    variable_flag = false;
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <_Z14updateVariableb+0x34>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20001050 	.word	0x20001050

080051f8 <_Z14updateTFPrefixb>:


//Update TF Prefix
void updateTFPrefix(bool isConnected)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b092      	sub	sp, #72	; 0x48
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
  static bool isChecked = false;
  char log_msg[50];

  if (isConnected)
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80c8 	beq.w	800539a <_Z14updateTFPrefixb+0x1a2>
  {
    if (isChecked == false)
 800520a:	4b67      	ldr	r3, [pc, #412]	; (80053a8 <_Z14updateTFPrefixb+0x1b0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 80c6 	bne.w	80053a0 <_Z14updateTFPrefixb+0x1a8>
    {
      nh.getParam("~tf_prefix", &get_tf_prefix);
 8005214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2301      	movs	r3, #1
 800521c:	4a63      	ldr	r2, [pc, #396]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 800521e:	4964      	ldr	r1, [pc, #400]	; (80053b0 <_Z14updateTFPrefixb+0x1b8>)
 8005220:	4864      	ldr	r0, [pc, #400]	; (80053b4 <_Z14updateTFPrefixb+0x1bc>)
 8005222:	f000 fb13 	bl	800584c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii>

      if (!strcmp(get_tf_prefix, ""))
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d114      	bne.n	800525a <_Z14updateTFPrefixb+0x62>
      {
        sprintf(odom_header_frame_id, "odom");
 8005230:	4961      	ldr	r1, [pc, #388]	; (80053b8 <_Z14updateTFPrefixb+0x1c0>)
 8005232:	4862      	ldr	r0, [pc, #392]	; (80053bc <_Z14updateTFPrefixb+0x1c4>)
 8005234:	f004 fc6a 	bl	8009b0c <siprintf>
        sprintf(odom_child_frame_id, "base_footprint");
 8005238:	4961      	ldr	r1, [pc, #388]	; (80053c0 <_Z14updateTFPrefixb+0x1c8>)
 800523a:	4862      	ldr	r0, [pc, #392]	; (80053c4 <_Z14updateTFPrefixb+0x1cc>)
 800523c:	f004 fc66 	bl	8009b0c <siprintf>

        sprintf(imu_frame_id, "imu_link");
 8005240:	4961      	ldr	r1, [pc, #388]	; (80053c8 <_Z14updateTFPrefixb+0x1d0>)
 8005242:	4862      	ldr	r0, [pc, #392]	; (80053cc <_Z14updateTFPrefixb+0x1d4>)
 8005244:	f004 fc62 	bl	8009b0c <siprintf>
        sprintf(mag_frame_id, "mag_link");
 8005248:	4961      	ldr	r1, [pc, #388]	; (80053d0 <_Z14updateTFPrefixb+0x1d8>)
 800524a:	4862      	ldr	r0, [pc, #392]	; (80053d4 <_Z14updateTFPrefixb+0x1dc>)
 800524c:	f004 fc5e 	bl	8009b0c <siprintf>
        sprintf(joint_state_header_frame_id, "base_link");
 8005250:	4961      	ldr	r1, [pc, #388]	; (80053d8 <_Z14updateTFPrefixb+0x1e0>)
 8005252:	4862      	ldr	r0, [pc, #392]	; (80053dc <_Z14updateTFPrefixb+0x1e4>)
 8005254:	f004 fc5a 	bl	8009b0c <siprintf>
 8005258:	e067      	b.n	800532a <_Z14updateTFPrefixb+0x132>
      }
      else
      {
        strcpy(odom_header_frame_id, get_tf_prefix);
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4619      	mov	r1, r3
 8005260:	4856      	ldr	r0, [pc, #344]	; (80053bc <_Z14updateTFPrefixb+0x1c4>)
 8005262:	f004 fc73 	bl	8009b4c <strcpy>
        strcpy(odom_child_frame_id, get_tf_prefix);
 8005266:	4b51      	ldr	r3, [pc, #324]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4619      	mov	r1, r3
 800526c:	4855      	ldr	r0, [pc, #340]	; (80053c4 <_Z14updateTFPrefixb+0x1cc>)
 800526e:	f004 fc6d 	bl	8009b4c <strcpy>

        strcpy(imu_frame_id, get_tf_prefix);
 8005272:	4b4e      	ldr	r3, [pc, #312]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	4854      	ldr	r0, [pc, #336]	; (80053cc <_Z14updateTFPrefixb+0x1d4>)
 800527a:	f004 fc67 	bl	8009b4c <strcpy>
        strcpy(mag_frame_id, get_tf_prefix);
 800527e:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4853      	ldr	r0, [pc, #332]	; (80053d4 <_Z14updateTFPrefixb+0x1dc>)
 8005286:	f004 fc61 	bl	8009b4c <strcpy>
        strcpy(joint_state_header_frame_id, get_tf_prefix);
 800528a:	4b48      	ldr	r3, [pc, #288]	; (80053ac <_Z14updateTFPrefixb+0x1b4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	4852      	ldr	r0, [pc, #328]	; (80053dc <_Z14updateTFPrefixb+0x1e4>)
 8005292:	f004 fc5b 	bl	8009b4c <strcpy>

        strcat(odom_header_frame_id, "/odom");
 8005296:	4849      	ldr	r0, [pc, #292]	; (80053bc <_Z14updateTFPrefixb+0x1c4>)
 8005298:	f7fa ffaa 	bl	80001f0 <strlen>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	4b46      	ldr	r3, [pc, #280]	; (80053bc <_Z14updateTFPrefixb+0x1c4>)
 80052a2:	4413      	add	r3, r2
 80052a4:	4a4e      	ldr	r2, [pc, #312]	; (80053e0 <_Z14updateTFPrefixb+0x1e8>)
 80052a6:	6810      	ldr	r0, [r2, #0]
 80052a8:	6018      	str	r0, [r3, #0]
 80052aa:	8892      	ldrh	r2, [r2, #4]
 80052ac:	809a      	strh	r2, [r3, #4]
        strcat(odom_child_frame_id, "/base_footprint");
 80052ae:	4845      	ldr	r0, [pc, #276]	; (80053c4 <_Z14updateTFPrefixb+0x1cc>)
 80052b0:	f7fa ff9e 	bl	80001f0 <strlen>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <_Z14updateTFPrefixb+0x1cc>)
 80052ba:	4413      	add	r3, r2
 80052bc:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <_Z14updateTFPrefixb+0x1ec>)
 80052be:	461c      	mov	r4, r3
 80052c0:	4615      	mov	r5, r2
 80052c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c4:	6020      	str	r0, [r4, #0]
 80052c6:	6061      	str	r1, [r4, #4]
 80052c8:	60a2      	str	r2, [r4, #8]
 80052ca:	60e3      	str	r3, [r4, #12]

        strcat(imu_frame_id, "/imu_link");
 80052cc:	483f      	ldr	r0, [pc, #252]	; (80053cc <_Z14updateTFPrefixb+0x1d4>)
 80052ce:	f7fa ff8f 	bl	80001f0 <strlen>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <_Z14updateTFPrefixb+0x1d4>)
 80052d8:	4413      	add	r3, r2
 80052da:	4943      	ldr	r1, [pc, #268]	; (80053e8 <_Z14updateTFPrefixb+0x1f0>)
 80052dc:	461a      	mov	r2, r3
 80052de:	460b      	mov	r3, r1
 80052e0:	cb03      	ldmia	r3!, {r0, r1}
 80052e2:	6010      	str	r0, [r2, #0]
 80052e4:	6051      	str	r1, [r2, #4]
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	8113      	strh	r3, [r2, #8]
        strcat(mag_frame_id, "/mag_link");
 80052ea:	483a      	ldr	r0, [pc, #232]	; (80053d4 <_Z14updateTFPrefixb+0x1dc>)
 80052ec:	f7fa ff80 	bl	80001f0 <strlen>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <_Z14updateTFPrefixb+0x1dc>)
 80052f6:	4413      	add	r3, r2
 80052f8:	493c      	ldr	r1, [pc, #240]	; (80053ec <_Z14updateTFPrefixb+0x1f4>)
 80052fa:	461a      	mov	r2, r3
 80052fc:	460b      	mov	r3, r1
 80052fe:	cb03      	ldmia	r3!, {r0, r1}
 8005300:	6010      	str	r0, [r2, #0]
 8005302:	6051      	str	r1, [r2, #4]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	8113      	strh	r3, [r2, #8]
        strcat(joint_state_header_frame_id, "/base_link");
 8005308:	4834      	ldr	r0, [pc, #208]	; (80053dc <_Z14updateTFPrefixb+0x1e4>)
 800530a:	f7fa ff71 	bl	80001f0 <strlen>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	4b32      	ldr	r3, [pc, #200]	; (80053dc <_Z14updateTFPrefixb+0x1e4>)
 8005314:	4413      	add	r3, r2
 8005316:	4936      	ldr	r1, [pc, #216]	; (80053f0 <_Z14updateTFPrefixb+0x1f8>)
 8005318:	461a      	mov	r2, r3
 800531a:	460b      	mov	r3, r1
 800531c:	cb03      	ldmia	r3!, {r0, r1}
 800531e:	6010      	str	r0, [r2, #0]
 8005320:	6051      	str	r1, [r2, #4]
 8005322:	8819      	ldrh	r1, [r3, #0]
 8005324:	789b      	ldrb	r3, [r3, #2]
 8005326:	8111      	strh	r1, [r2, #8]
 8005328:	7293      	strb	r3, [r2, #10]
      }

      sprintf(log_msg, "Setup TF on Odometry [%s]", odom_header_frame_id);
 800532a:	f107 030c 	add.w	r3, r7, #12
 800532e:	4a23      	ldr	r2, [pc, #140]	; (80053bc <_Z14updateTFPrefixb+0x1c4>)
 8005330:	4930      	ldr	r1, [pc, #192]	; (80053f4 <_Z14updateTFPrefixb+0x1fc>)
 8005332:	4618      	mov	r0, r3
 8005334:	f004 fbea 	bl	8009b0c <siprintf>
      nh.loginfo(log_msg);
 8005338:	f107 030c 	add.w	r3, r7, #12
 800533c:	4619      	mov	r1, r3
 800533e:	481d      	ldr	r0, [pc, #116]	; (80053b4 <_Z14updateTFPrefixb+0x1bc>)
 8005340:	f000 fa35 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

      sprintf(log_msg, "Setup TF on IMU [%s]", imu_frame_id);
 8005344:	f107 030c 	add.w	r3, r7, #12
 8005348:	4a20      	ldr	r2, [pc, #128]	; (80053cc <_Z14updateTFPrefixb+0x1d4>)
 800534a:	492b      	ldr	r1, [pc, #172]	; (80053f8 <_Z14updateTFPrefixb+0x200>)
 800534c:	4618      	mov	r0, r3
 800534e:	f004 fbdd 	bl	8009b0c <siprintf>
      nh.loginfo(log_msg);
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	4619      	mov	r1, r3
 8005358:	4816      	ldr	r0, [pc, #88]	; (80053b4 <_Z14updateTFPrefixb+0x1bc>)
 800535a:	f000 fa28 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

      sprintf(log_msg, "Setup TF on MagneticField [%s]", mag_frame_id);
 800535e:	f107 030c 	add.w	r3, r7, #12
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <_Z14updateTFPrefixb+0x1dc>)
 8005364:	4925      	ldr	r1, [pc, #148]	; (80053fc <_Z14updateTFPrefixb+0x204>)
 8005366:	4618      	mov	r0, r3
 8005368:	f004 fbd0 	bl	8009b0c <siprintf>
      nh.loginfo(log_msg);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	4619      	mov	r1, r3
 8005372:	4810      	ldr	r0, [pc, #64]	; (80053b4 <_Z14updateTFPrefixb+0x1bc>)
 8005374:	f000 fa1b 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

      sprintf(log_msg, "Setup TF on JointState [%s]", joint_state_header_frame_id);
 8005378:	f107 030c 	add.w	r3, r7, #12
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <_Z14updateTFPrefixb+0x1e4>)
 800537e:	4920      	ldr	r1, [pc, #128]	; (8005400 <_Z14updateTFPrefixb+0x208>)
 8005380:	4618      	mov	r0, r3
 8005382:	f004 fbc3 	bl	8009b0c <siprintf>
      nh.loginfo(log_msg);
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	4619      	mov	r1, r3
 800538c:	4809      	ldr	r0, [pc, #36]	; (80053b4 <_Z14updateTFPrefixb+0x1bc>)
 800538e:	f000 fa0e 	bl	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

      isChecked = true;
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <_Z14updateTFPrefixb+0x1b0>)
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    isChecked = false;
  }
}
 8005398:	e002      	b.n	80053a0 <_Z14updateTFPrefixb+0x1a8>
    isChecked = false;
 800539a:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <_Z14updateTFPrefixb+0x1b0>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
}
 80053a0:	bf00      	nop
 80053a2:	3740      	adds	r7, #64	; 0x40
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bdb0      	pop	{r4, r5, r7, pc}
 80053a8:	20001051 	.word	0x20001051
 80053ac:	20000000 	.word	0x20000000
 80053b0:	0800a970 	.word	0x0800a970
 80053b4:	200000a4 	.word	0x200000a4
 80053b8:	0800a97c 	.word	0x0800a97c
 80053bc:	200009f8 	.word	0x200009f8
 80053c0:	0800a984 	.word	0x0800a984
 80053c4:	20000a18 	.word	0x20000a18
 80053c8:	0800a994 	.word	0x0800a994
 80053cc:	20000a38 	.word	0x20000a38
 80053d0:	0800a9a0 	.word	0x0800a9a0
 80053d4:	20000a58 	.word	0x20000a58
 80053d8:	0800a9ac 	.word	0x0800a9ac
 80053dc:	20000a78 	.word	0x20000a78
 80053e0:	0800a9b8 	.word	0x0800a9b8
 80053e4:	0800a9c0 	.word	0x0800a9c0
 80053e8:	0800a9d0 	.word	0x0800a9d0
 80053ec:	0800a9dc 	.word	0x0800a9dc
 80053f0:	0800a9e8 	.word	0x0800a9e8
 80053f4:	0800a9f4 	.word	0x0800a9f4
 80053f8:	0800aa10 	.word	0x0800aa10
 80053fc:	0800aa28 	.word	0x0800aa28
 8005400:	0800aa48 	.word	0x0800aa48

08005404 <_Z8initOdomv>:
* Initialization odometry data
* Initialization odometry data
*******************************************************************************/

void initOdom(void)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
  init_encoder = true;
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <_Z8initOdomv+0x98>)
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]

  for (int index = 0; index < 3; index++)
 8005410:	2300      	movs	r3, #0
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	dc14      	bgt.n	8005444 <_Z8initOdomv+0x40>
  {
    odom_pose[index] = 0.0;
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <_Z8initOdomv+0x9c>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
    odom_vel[index]  = 0.0;
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <_Z8initOdomv+0xa0>)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	18d1      	adds	r1, r2, r3
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9c1 2300 	strd	r2, r3, [r1]
  for (int index = 0; index < 3; index++)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3301      	adds	r3, #1
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	e7e7      	b.n	8005414 <_Z8initOdomv+0x10>
  }

  odom.pose.pose.position.x = 0.0;
 8005444:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <_Z8initOdomv+0xa4>)
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
  odom.pose.pose.position.y = 0.0;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <_Z8initOdomv+0xa4>)
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c
  odom.pose.pose.position.z = 0.0;
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <_Z8initOdomv+0xa4>)
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30

  odom.pose.pose.orientation.x = 0.0;
 800545c:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <_Z8initOdomv+0xa4>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
  odom.pose.pose.orientation.y = 0.0;
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <_Z8initOdomv+0xa4>)
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c
  odom.pose.pose.orientation.z = 0.0;
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <_Z8initOdomv+0xa4>)
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
  odom.pose.pose.orientation.w = 0.0;
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <_Z8initOdomv+0xa4>)
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44

  odom.twist.twist.linear.x  = 0.0;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <_Z8initOdomv+0xa4>)
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  odom.twist.twist.angular.z = 0.0;
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <_Z8initOdomv+0xa4>)
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000004 	.word	0x20000004
 80054a0:	20001028 	.word	0x20001028
 80054a4:	20001038 	.word	0x20001038
 80054a8:	20000c94 	.word	0x20000c94

080054ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d80d      	bhi.n	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	fa22 f103 	lsr.w	r1, r2, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	b2ca      	uxtb	r2, r1
 80054d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e7ee      	b.n	80054ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d811      	bhi.n	8005526 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	440a      	add	r2, r1
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	4611      	mov	r1, r2
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	fa01 f202 	lsl.w	r2, r1, r2
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e7ea      	b.n	80054fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	0800ae24 	.word	0x0800ae24

08005554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ffe8 	bl	8005534 <_ZN3ros15NodeHandleBase_C1Ev>
 8005564:	4a3a      	ldr	r2, [pc, #232]	; (8005650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fc fc38 	bl	8001de4 <_ZN13STM32HardwareC1Ev>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005582:	4618      	mov	r0, r3
 8005584:	f7fc f936 	bl	80017f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2b18      	cmp	r3, #24
 8005590:	d80b      	bhi.n	80055aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3301      	adds	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e7f0      	b.n	800558c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b18      	cmp	r3, #24
 80055b2:	d80a      	bhi.n	80055ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055bc:	2100      	movs	r1, #0
 80055be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	e7f1      	b.n	80055ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d20a      	bcs.n	80055ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e7f0      	b.n	80055ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f6:	d20a      	bcs.n	800560e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3301      	adds	r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	e7f0      	b.n	80055f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0800ad20 	.word	0x0800ad20

08005654 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	4a04      	ldr	r2, [pc, #16]	; (8005670 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	0800ae0c 	.word	0x0800ae0c

08005674 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ffe5 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 800568a:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	330c      	adds	r3, #12
 8005694:	4618      	mov	r0, r3
 8005696:	f7fd ffaf 	bl	80035f8 <_ZN13geometry_msgs5TwistC1Ev>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
  };
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	0800abe8 	.word	0x0800abe8

080056bc <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ffc1 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 80056d2:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	330c      	adds	r3, #12
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fc5b 	bl	8003f98 <_ZN15turtlebot3_msgs5SoundC1Ev>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	615a      	str	r2, [r3, #20]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  };
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	0800abd0 	.word	0x0800abd0

08005704 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff9d 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 800571a:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	330c      	adds	r3, #12
 8005724:	4618      	mov	r0, r3
 8005726:	f7fc fc57 	bl	8001fd8 <_ZN8std_msgs4BoolC1Ev>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	615a      	str	r2, [r3, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  };
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0800abb8 	.word	0x0800abb8

0800574c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff79 	bl	8005654 <_ZN3ros11Subscriber_C1Ev>
 8005762:	4a0b      	ldr	r2, [pc, #44]	; (8005790 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	330c      	adds	r3, #12
 800576c:	4618      	mov	r0, r3
 800576e:	f7fc fc9d 	bl	80020ac <_ZN8std_msgs5EmptyC1Ev>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  };
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	0800aba0 	.word	0x0800aba0

08005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    return SPIN_OK;
  }


  /* Are we connected to the PC? */
  virtual bool connected()
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  {
    return configured_;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	2101      	movs	r1, #1
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f881 	bl	80058c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time()-last_sync_receive_time;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3304      	adds	r3, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fc fbf0 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 80057e0:	4602      	mov	r2, r0
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	60fb      	str	r3, [r7, #12]
    Time current_time;
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fb fbe0 	bl	8000fb2 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x78>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	099a      	lsrs	r2, r3, #6
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005802:	441a      	add	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x78>)
 800580c:	fba3 1302 	umull	r1, r3, r3, r2
 8005810:	099b      	lsrs	r3, r3, #6
 8005812:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x7c>)
 800581e:	fb02 f203 	mul.w	r2, r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005828:	441a      	add	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fb f8f3 	bl	8000a20 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 800583a:	bf00      	nop
  }
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	10624dd3 	.word	0x10624dd3
 8005848:	000f4240 	.word	0x000f4240

0800584c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, char** param, int length = 1, int timeout = 1000)
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f84c 	bl	80058fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d025      	beq.n	80058b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x6a>
    {
      if (length == (int)req_param_resp.strings_length)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
 8005870:	461a      	mov	r2, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	4293      	cmp	r3, r2
 8005876:	d11a      	bne.n	80058ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x62>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	da12      	bge.n	80058aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x5e>
          strcpy(param[i], req_param_resp.strings[i]);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8d3 2938 	ldr.w	r2, [r3, #2360]	; 0x938
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	f004 f955 	bl	8009b4c <strcpy>
        for (int i = 0; i < length; i++)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3301      	adds	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e7e8      	b.n	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x30>
        return true;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e004      	b.n	80058b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x6c>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 80058ae:	4904      	ldr	r1, [pc, #16]	; (80058c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPPcii+0x74>)
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f86b 	bl	800598c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
      }
    }
    return false;
 80058b6:	2300      	movs	r3, #0
  }
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	0800aa64 	.word	0x0800aa64

080058c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	460b      	mov	r3, r1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fb fe40 	bl	800155c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f107 0214 	add.w	r2, r7, #20
 80058ee:	2107      	movs	r1, #7
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	4798      	blx	r3
  }
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
    rosserial_msgs::RequestParamRequest req;
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	4618      	mov	r0, r3
 8005916:	f7fb fed1 	bl	80016bc <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f107 0214 	add.w	r2, r7, #20
 8005928:	2106      	movs	r1, #6
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3304      	adds	r3, #4
 8005932:	4618      	mov	r0, r3
 8005934:	f7fc fb44 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x82>
      spinOnce();
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3304      	adds	r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	4798      	blx	r3
      if (hardware_.time() > end_time)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7fc fb30 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005960:	4602      	mov	r2, r0
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4293      	cmp	r3, r2
 8005966:	bf34      	ite	cc
 8005968:	2301      	movcc	r3, #1
 800596a:	2300      	movcs	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0e6      	beq.n	8005940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x44>
        logwarn("Failed to get param: timeout expired");
 8005972:	4905      	ldr	r1, [pc, #20]	; (8005988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x8c>)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f809 	bl	800598c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
        return false;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x84>
    return true;
 800597e:	2301      	movs	r3, #1
  }
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	0800aa8c 	.word	0x0800aa8c

0800598c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>:
  void logwarn(const char *msg)
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	2102      	movs	r1, #2
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff92 	bl	80058c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b63      	cmp	r3, #99	; 0x63
 80059b8:	dd09      	ble.n	80059ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80059c0:	f083 0301 	eor.w	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e077      	b.n	8005abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80059da:	3207      	adds	r2, #7
 80059dc:	4611      	mov	r1, r2
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
 80059e2:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	22ff      	movs	r2, #255	; 0xff
 80059e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	22fe      	movs	r2, #254	; 0xfe
 80059f0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	121b      	asrs	r3, r3, #8
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8005a18:	4413      	add	r3, r2
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	b21b      	sxth	r3, r3
 8005a34:	121b      	asrs	r3, r3, #8
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005a42:	2305      	movs	r3, #5
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3306      	adds	r3, #6
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	dc0d      	bgt.n	8005a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	4413      	add	r3, r2
 8005a56:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e7ec      	b.n	8005a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3307      	adds	r3, #7
 8005a70:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	425a      	negs	r2, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	bf58      	it	pl
 8005a7c:	4253      	negpl	r3, r2
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	6179      	str	r1, [r7, #20]
 8005a86:	43d2      	mvns	r2, r2
 8005a88:	b2d1      	uxtb	r1, r2
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	460a      	mov	r2, r1
 8005a90:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	dc0a      	bgt.n	8005ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1d18      	adds	r0, r3, #4
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f7fc fa43 	bl	8001f34 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	e005      	b.n	8005abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 8005ab2:	4905      	ldr	r1, [pc, #20]	; (8005ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f9e2 	bl	8005e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	0800aab4 	.word	0x0800aab4

08005acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc fa71 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005ade:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d903      	bls.n	8005afa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d903      	bls.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d014      	beq.n	8005b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc fa4a 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	bf8c      	ite	hi
 8005b3c:	2301      	movhi	r3, #1
 8005b3e:	2300      	movls	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005b46:	f06f 0301 	mvn.w	r3, #1
 8005b4a:	e194      	b.n	8005e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fc f963 	bl	8001e1c <_ZN13STM32Hardware4readEv>
 8005b56:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f2c0 8174 	blt.w	8005e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b76:	2b07      	cmp	r3, #7
 8005b78:	d11e      	bne.n	8005bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	b2d1      	uxtb	r1, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	4413      	add	r3, r2
 8005b90:	460a      	mov	r2, r1
 8005b92:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1b4      	bne.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005bb6:	e7af      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d128      	bne.n	8005c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2bff      	cmp	r3, #255	; 0xff
 8005bc6:	d10d      	bne.n	8005be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f103 0214 	add.w	r2, r3, #20
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005be2:	e799      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fc f9e9 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bf8c      	ite	hi
 8005bfc:	2301      	movhi	r3, #1
 8005bfe:	2300      	movls	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d088      	beq.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005c0e:	f06f 0301 	mvn.w	r3, #1
 8005c12:	e130      	b.n	8005e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d118      	bne.n	8005c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2bfe      	cmp	r3, #254	; 0xfe
 8005c22:	d107      	bne.n	8005c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005c32:	e771      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f af68 	bne.w	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f926 	bl	8005e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005c4e:	e763      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d113      	bne.n	8005c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005c80:	e74a      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d110      	bne.n	8005cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005cac:	e734      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d116      	bne.n	8005ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005cbe:	425a      	negs	r2, r3
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	bf58      	it	pl
 8005cc6:	4253      	negpl	r3, r2
 8005cc8:	2bff      	cmp	r3, #255	; 0xff
 8005cca:	d107      	bne.n	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005cda:	e71d      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005ce4:	e718      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d10f      	bne.n	8005d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005d0e:	e703      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d117      	bne.n	8005d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	441a      	add	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2207      	movs	r2, #7
 8005d30:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f aeec 	bne.w	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2208      	movs	r2, #8
 8005d44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005d48:	e6e6      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	f47f aee1 	bne.w	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005d64:	425a      	negs	r2, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	bf58      	it	pl
 8005d6c:	4253      	negpl	r3, r2
 8005d6e:	2bff      	cmp	r3, #255	; 0xff
 8005d70:	f47f aed2 	bne.w	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d110      	bne.n	8005da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f88b 	bl	8005e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8a6 	bl	8005ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	e06a      	b.n	8005e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005da6:	2b0a      	cmp	r3, #10
 8005da8:	d107      	bne.n	8005dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f96e 	bl	8006094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005db8:	e6ae      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d10e      	bne.n	8005de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fb fe43 	bl	8001a5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005de0:	e69a      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005de8:	2b0b      	cmp	r3, #11
 8005dea:	d104      	bne.n	8005df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005df4:	e690      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005dfc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f43f ae84 	beq.w	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005e16:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005e2a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005e42:	4611      	mov	r1, r2
 8005e44:	4798      	blx	r3
    while (true)
 8005e46:	e667      	b.n	8005b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005e48:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d906      	bls.n	8005e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f817 	bl	8005e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8005e74:	2300      	movs	r3, #0
  }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logerror(const char*msg)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fd19 	bl	80058c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fb f8a4 	bl	8000ff4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f107 020c 	add.w	r2, r7, #12
 8005eb6:	210a      	movs	r1, #10
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    rt_time = hardware_.time();
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fc f87d 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b08b      	sub	sp, #44	; 0x2c
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fb f976 	bl	80011d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	2b18      	cmp	r3, #24
 8005ef0:	dc63      	bgt.n	8005fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d056      	beq.n	8005fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4608      	mov	r0, r1
 8005f52:	4798      	blx	r3
 8005f54:	4603      	mov	r3, r0
 8005f56:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4798      	blx	r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681c      	ldr	r4, [r3, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fb ff00 	bl	8001da6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	461a      	mov	r2, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	e798      	b.n	8005eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	dc5f      	bgt.n	8006084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d053      	beq.n	800607c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005ffe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006006:	f202 2222 	addw	r2, r2, #546	; 0x222
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4608      	mov	r0, r1
 8006016:	4798      	blx	r3
 8006018:	4603      	mov	r3, r0
 800601a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006020:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4608      	mov	r0, r1
 800603c:	4798      	blx	r3
 800603e:	4603      	mov	r3, r0
 8006040:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8006042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006046:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681c      	ldr	r4, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4608      	mov	r0, r1
 800606e:	4798      	blx	r3
 8006070:	4601      	mov	r1, r0
 8006072:	f107 030c 	add.w	r3, r7, #12
 8006076:	461a      	mov	r2, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	3301      	adds	r3, #1
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	e79c      	b.n	8005fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800608c:	bf00      	nop
 800608e:	372c      	adds	r7, #44	; 0x2c
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}

08006094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa ffa6 	bl	8000ff4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fb ff87 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 80060b2:	4602      	mov	r2, r0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fb f805 	bl	80010d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4915      	ldr	r1, [pc, #84]	; (8006124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80060d0:	fba1 1303 	umull	r1, r3, r1, r3
 80060d4:	099b      	lsrs	r3, r3, #6
 80060d6:	4413      	add	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4b11      	ldr	r3, [pc, #68]	; (8006124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80060e0:	fba3 0302 	umull	r0, r3, r3, r2
 80060e4:	099b      	lsrs	r3, r3, #6
 80060e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	440b      	add	r3, r1
 80060f8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f812 	bl	800612c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fb ff57 	bl	8001fc0 <_ZN13STM32Hardware4timeEv>
 8006112:	4602      	mov	r2, r0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	10624dd3 	.word	0x10624dd3
 8006128:	000f4240 	.word	0x000f4240

0800612c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
    sec_offset = new_now.sec;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7fa fc61 	bl	8000a20 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <_Z41__static_initialization_and_destruction_0ii>:
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d170      	bne.n	800625a <_Z41__static_initialization_and_destruction_0ii+0xf2>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800617e:	4293      	cmp	r3, r2
 8006180:	d16b      	bne.n	800625a <_Z41__static_initialization_and_destruction_0ii+0xf2>
void waitForSerialLink(bool isConnected);

/*******************************************************************************
* ROS NodeHandle
*******************************************************************************/
ros::NodeHandle nh;	//노드 만들기
 8006182:	4838      	ldr	r0, [pc, #224]	; (8006264 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8006184:	f7ff f9e6 	bl	8005554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Time current_time;	//시간에 대한 변수 선언
 8006188:	4837      	ldr	r0, [pc, #220]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800618a:	f7fa ff12 	bl	8000fb2 <_ZN3ros4TimeC1Ev>
char joint_state_header_frame_id[30];

/*******************************************************************************
* Subscriber
*******************************************************************************/
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 800618e:	2301      	movs	r3, #1
 8006190:	4a36      	ldr	r2, [pc, #216]	; (800626c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8006192:	4937      	ldr	r1, [pc, #220]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8006194:	4837      	ldr	r0, [pc, #220]	; (8006274 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8006196:	f7ff fa6d 	bl	8005674 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>

ros::Subscriber<turtlebot3_msgs::Sound> sound_sub("sound", soundCallback);
 800619a:	2301      	movs	r3, #1
 800619c:	4a36      	ldr	r2, [pc, #216]	; (8006278 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800619e:	4937      	ldr	r1, [pc, #220]	; (800627c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80061a0:	4837      	ldr	r0, [pc, #220]	; (8006280 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80061a2:	f7ff fa8b 	bl	80056bc <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvEC1EPKcPFvRKS2_Ei>

ros::Subscriber<std_msgs::Bool> motor_power_sub("motor_power", motorPowerCallback);
 80061a6:	2301      	movs	r3, #1
 80061a8:	4a36      	ldr	r2, [pc, #216]	; (8006284 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80061aa:	4937      	ldr	r1, [pc, #220]	; (8006288 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80061ac:	4837      	ldr	r0, [pc, #220]	; (800628c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80061ae:	f7ff faa9 	bl	8005704 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>

ros::Subscriber<std_msgs::Empty> reset_sub("reset", resetCallback);
 80061b2:	2301      	movs	r3, #1
 80061b4:	4a36      	ldr	r2, [pc, #216]	; (8006290 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80061b6:	4937      	ldr	r1, [pc, #220]	; (8006294 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80061b8:	4837      	ldr	r0, [pc, #220]	; (8006298 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80061ba:	f7ff fac7 	bl	800574c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>

/*******************************************************************************
* Publisher
*******************************************************************************/
// Bumpers, cliffs, buttons, encoders, battery of Turtlebot3
turtlebot3_msgs::SensorState sensor_state_msg;
 80061be:	4837      	ldr	r0, [pc, #220]	; (800629c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80061c0:	f7fd fc36 	bl	8003a30 <_ZN15turtlebot3_msgs11SensorStateC1Ev>
ros::Publisher sensor_state_pub("sensor_state", &sensor_state_msg);
 80061c4:	2300      	movs	r3, #0
 80061c6:	4a35      	ldr	r2, [pc, #212]	; (800629c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80061c8:	4935      	ldr	r1, [pc, #212]	; (80062a0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80061ca:	4836      	ldr	r0, [pc, #216]	; (80062a4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80061cc:	f7fb fdd4 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Version information of Turtlebot3
turtlebot3_msgs::VersionInfo version_info_msg;
 80061d0:	4835      	ldr	r0, [pc, #212]	; (80062a8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80061d2:	f7fd ff41 	bl	8004058 <_ZN15turtlebot3_msgs11VersionInfoC1Ev>
ros::Publisher version_info_pub("firmware_version", &version_info_msg);
 80061d6:	2300      	movs	r3, #0
 80061d8:	4a33      	ldr	r2, [pc, #204]	; (80062a8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80061da:	4934      	ldr	r1, [pc, #208]	; (80062ac <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80061dc:	4834      	ldr	r0, [pc, #208]	; (80062b0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80061de:	f7fb fdcb 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// IMU of Turtlebot3
sensor_msgs::Imu imu_msg;
 80061e2:	4834      	ldr	r0, [pc, #208]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80061e4:	f7fe f87a 	bl	80042dc <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher imu_pub("imu", &imu_msg);
 80061e8:	2300      	movs	r3, #0
 80061ea:	4a32      	ldr	r2, [pc, #200]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80061ec:	4932      	ldr	r1, [pc, #200]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80061ee:	4833      	ldr	r0, [pc, #204]	; (80062bc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80061f0:	f7fb fdc2 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Command velocity of Turtlebot3 using RC100 remote controller
geometry_msgs::Twist cmd_vel_rc100_msg;
 80061f4:	4832      	ldr	r0, [pc, #200]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80061f6:	f7fd f9ff 	bl	80035f8 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher cmd_vel_rc100_pub("cmd_vel_rc100", &cmd_vel_rc100_msg);
 80061fa:	2300      	movs	r3, #0
 80061fc:	4a30      	ldr	r2, [pc, #192]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80061fe:	4931      	ldr	r1, [pc, #196]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8006200:	4831      	ldr	r0, [pc, #196]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8006202:	f7fb fdb9 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Odometry of Turtlebot3
nav_msgs::Odometry odom;
 8006206:	4831      	ldr	r0, [pc, #196]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8006208:	f7fd fb1c 	bl	8003844 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher odom_pub("odom", &odom);
 800620c:	2300      	movs	r3, #0
 800620e:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8006210:	492f      	ldr	r1, [pc, #188]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8006212:	4830      	ldr	r0, [pc, #192]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8006214:	f7fb fdb0 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Joint(Dynamixel) state of Turtlebot3
sensor_msgs::JointState joint_states;
 8006218:	482f      	ldr	r0, [pc, #188]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800621a:	f7fc f925 	bl	8002468 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 800621e:	2300      	movs	r3, #0
 8006220:	4a2d      	ldr	r2, [pc, #180]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8006222:	492e      	ldr	r1, [pc, #184]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8006224:	482e      	ldr	r0, [pc, #184]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8006226:	f7fb fda7 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Battey state of Turtlebot3

sensor_msgs::BatteryState battery_state_msg;
 800622a:	482e      	ldr	r0, [pc, #184]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 800622c:	f7fe fa9c 	bl	8004768 <_ZN11sensor_msgs12BatteryStateC1Ev>

ros::Publisher battery_state_pub("battery_state", &battery_state_msg);
 8006230:	2300      	movs	r3, #0
 8006232:	4a2c      	ldr	r2, [pc, #176]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8006234:	492c      	ldr	r1, [pc, #176]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8006236:	482d      	ldr	r0, [pc, #180]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8006238:	f7fb fd9e 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

// Magnetic field
sensor_msgs::MagneticField mag_msg;
 800623c:	482c      	ldr	r0, [pc, #176]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800623e:	f7fe f9d1 	bl	80045e4 <_ZN11sensor_msgs13MagneticFieldC1Ev>
ros::Publisher mag_pub("magnetic_field", &mag_msg);
 8006242:	2300      	movs	r3, #0
 8006244:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8006246:	492b      	ldr	r1, [pc, #172]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8006248:	482b      	ldr	r0, [pc, #172]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 800624a:	f7fb fd95 	bl	8001d78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

/*******************************************************************************
* Transform Broadcaster
*******************************************************************************/
// TF of Turtlebot3
geometry_msgs::TransformStamped odom_tf;
 800624e:	482b      	ldr	r0, [pc, #172]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8006250:	f7fc fe14 	bl	8002e7c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 8006254:	482a      	ldr	r0, [pc, #168]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8006256:	f7fc ffe9 	bl	800322c <_ZN2tf20TransformBroadcasterC1Ev>
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200000a4 	.word	0x200000a4
 8006268:	200009e0 	.word	0x200009e0
 800626c:	08005011 	.word	0x08005011
 8006270:	0800aaf0 	.word	0x0800aaf0
 8006274:	20000a98 	.word	0x20000a98
 8006278:	080050e5 	.word	0x080050e5
 800627c:	0800aaf8 	.word	0x0800aaf8
 8006280:	20000ad0 	.word	0x20000ad0
 8006284:	080050f9 	.word	0x080050f9
 8006288:	0800ab00 	.word	0x0800ab00
 800628c:	20000aec 	.word	0x20000aec
 8006290:	08005115 	.word	0x08005115
 8006294:	0800ab0c 	.word	0x0800ab0c
 8006298:	20000b08 	.word	0x20000b08
 800629c:	20000b20 	.word	0x20000b20
 80062a0:	0800ab14 	.word	0x0800ab14
 80062a4:	20000b58 	.word	0x20000b58
 80062a8:	20000b6c 	.word	0x20000b6c
 80062ac:	0800ab24 	.word	0x0800ab24
 80062b0:	20000b7c 	.word	0x20000b7c
 80062b4:	20000b90 	.word	0x20000b90
 80062b8:	0800ab38 	.word	0x0800ab38
 80062bc:	20000c48 	.word	0x20000c48
 80062c0:	20000c5c 	.word	0x20000c5c
 80062c4:	0800ab3c 	.word	0x0800ab3c
 80062c8:	20000c80 	.word	0x20000c80
 80062cc:	20000c94 	.word	0x20000c94
 80062d0:	0800a97c 	.word	0x0800a97c
 80062d4:	20000e24 	.word	0x20000e24
 80062d8:	20000e38 	.word	0x20000e38
 80062dc:	0800ab4c 	.word	0x0800ab4c
 80062e0:	20000e80 	.word	0x20000e80
 80062e4:	20000e94 	.word	0x20000e94
 80062e8:	0800ab5c 	.word	0x0800ab5c
 80062ec:	20000edc 	.word	0x20000edc
 80062f0:	20000ef0 	.word	0x20000ef0
 80062f4:	0800ab6c 	.word	0x0800ab6c
 80062f8:	20000f3c 	.word	0x20000f3c
 80062fc:	20000f50 	.word	0x20000f50
 8006300:	20000f94 	.word	0x20000f94

08006304 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	330c      	adds	r3, #12
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7fb fee9 	bl	80020ec <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	320c      	adds	r2, #12
 8006322:	4610      	mov	r0, r2
 8006324:	4798      	blx	r3
  }
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
  }
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	330c      	adds	r3, #12
 8006352:	4618      	mov	r0, r3
 8006354:	f7fb fed8 	bl	8002108 <_ZN8std_msgs5Empty7getTypeEv>
 8006358:	4603      	mov	r3, r0
  }
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	330c      	adds	r3, #12
 800636e:	4618      	mov	r0, r3
 8006370:	f7fb fed8 	bl	8002124 <_ZN8std_msgs5Empty6getMD5Ev>
 8006374:	4603      	mov	r3, r0
  }
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	330c      	adds	r3, #12
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fb fe51 	bl	8002036 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	320c      	adds	r2, #12
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
  }
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
  }
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	330c      	adds	r3, #12
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fb fe51 	bl	8002074 <_ZN8std_msgs4Bool7getTypeEv>
 80063d2:	4603      	mov	r3, r0
  }
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	330c      	adds	r3, #12
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fb fe51 	bl	8002090 <_ZN8std_msgs4Bool6getMD5Ev>
 80063ee:	4603      	mov	r3, r0
  }
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	330c      	adds	r3, #12
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fd fdf2 	bl	8003ff2 <_ZN15turtlebot3_msgs5Sound11deserializeEPh>
    this->cb_(msg);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	320c      	adds	r2, #12
 8006416:	4610      	mov	r0, r2
 8006418:	4798      	blx	r3
  }
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
  }
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	330c      	adds	r3, #12
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fdea 	bl	8004020 <_ZN15turtlebot3_msgs5Sound7getTypeEv>
 800644c:	4603      	mov	r3, r0
  }
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZN3ros10SubscriberIN15turtlebot3_msgs5SoundEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	330c      	adds	r3, #12
 8006462:	4618      	mov	r0, r3
 8006464:	f7fd fdea 	bl	800403c <_ZN15turtlebot3_msgs5Sound6getMD5Ev>
 8006468:	4603      	mov	r3, r0
  }
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	330c      	adds	r3, #12
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7fd f8f9 	bl	800367a <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	320c      	adds	r2, #12
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
  }
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	330c      	adds	r3, #12
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fd f8ff 	bl	80036c4 <_ZN13geometry_msgs5Twist7getTypeEv>
 80064c6:	4603      	mov	r3, r0
  }
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	330c      	adds	r3, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fd f8ff 	bl	80036e0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80064e2:	4603      	mov	r3, r0
  }
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_GLOBAL__sub_I_nh>:
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064f4:	2001      	movs	r0, #1
 80064f6:	f7ff fe37 	bl	8006168 <_Z41__static_initialization_and_destruction_0ii>
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <HAL_MspInit+0x4c>)
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	4a0f      	ldr	r2, [pc, #60]	; (8006548 <HAL_MspInit+0x4c>)
 800650c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006510:	6453      	str	r3, [r2, #68]	; 0x44
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <HAL_MspInit+0x4c>)
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_MspInit+0x4c>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_MspInit+0x4c>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	6413      	str	r3, [r2, #64]	; 0x40
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_MspInit+0x4c>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800

0800654c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <HAL_TIM_Base_MspInit+0x48>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d115      	bne.n	800658a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <HAL_TIM_Base_MspInit+0x4c>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <HAL_TIM_Base_MspInit+0x4c>)
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <HAL_TIM_Base_MspInit+0x4c>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800657a:	2200      	movs	r2, #0
 800657c:	2100      	movs	r1, #0
 800657e:	201d      	movs	r0, #29
 8006580:	f000 fb19 	bl	8006bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006584:	201d      	movs	r0, #29
 8006586:	f000 fb32 	bl	8006bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40000400 	.word	0x40000400
 8006598:	40023800 	.word	0x40023800

0800659c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a4:	f107 0314 	add.w	r3, r7, #20
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	609a      	str	r2, [r3, #8]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a4c      	ldr	r2, [pc, #304]	; (80066ec <HAL_UART_MspInit+0x150>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	f040 8092 	bne.w	80066e4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	4b4a      	ldr	r3, [pc, #296]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	4a49      	ldr	r2, [pc, #292]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ce:	6413      	str	r3, [r2, #64]	; 0x40
 80065d0:	4b47      	ldr	r3, [pc, #284]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	4a42      	ldr	r2, [pc, #264]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065e6:	f043 0304 	orr.w	r3, r3, #4
 80065ea:	6313      	str	r3, [r2, #48]	; 0x30
 80065ec:	4b40      	ldr	r3, [pc, #256]	; (80066f0 <HAL_UART_MspInit+0x154>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80065f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065fe:	2302      	movs	r3, #2
 8006600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006606:	2303      	movs	r3, #3
 8006608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800660a:	2307      	movs	r3, #7
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	4619      	mov	r1, r3
 8006614:	4837      	ldr	r0, [pc, #220]	; (80066f4 <HAL_UART_MspInit+0x158>)
 8006616:	f000 ff07 	bl	8007428 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800661a:	4b37      	ldr	r3, [pc, #220]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <HAL_UART_MspInit+0x160>)
 800661e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006620:	4b35      	ldr	r3, [pc, #212]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006626:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006628:	4b33      	ldr	r3, [pc, #204]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800662e:	4b32      	ldr	r3, [pc, #200]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006630:	2200      	movs	r2, #0
 8006632:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800663a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800663c:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 800663e:	2200      	movs	r2, #0
 8006640:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006644:	2200      	movs	r2, #0
 8006646:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006648:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 800664a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800664e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006650:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006652:	2200      	movs	r2, #0
 8006654:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006656:	4b28      	ldr	r3, [pc, #160]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006658:	2200      	movs	r2, #0
 800665a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800665c:	4826      	ldr	r0, [pc, #152]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 800665e:	f000 fae1 	bl	8006c24 <HAL_DMA_Init>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006668:	f7fa fbd2 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <HAL_UART_MspInit+0x15c>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006678:	4b21      	ldr	r3, [pc, #132]	; (8006700 <HAL_UART_MspInit+0x164>)
 800667a:	4a22      	ldr	r2, [pc, #136]	; (8006704 <HAL_UART_MspInit+0x168>)
 800667c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <HAL_UART_MspInit+0x164>)
 8006680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006684:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_UART_MspInit+0x164>)
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800668c:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <HAL_UART_MspInit+0x164>)
 800668e:	2200      	movs	r2, #0
 8006690:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006692:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <HAL_UART_MspInit+0x164>)
 8006694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006698:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800669a:	4b19      	ldr	r3, [pc, #100]	; (8006700 <HAL_UART_MspInit+0x164>)
 800669c:	2200      	movs	r2, #0
 800669e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80066b8:	4811      	ldr	r0, [pc, #68]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066ba:	f000 fab3 	bl	8006c24 <HAL_DMA_Init>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80066c4:	f7fa fba4 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066cc:	635a      	str	r2, [r3, #52]	; 0x34
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <HAL_UART_MspInit+0x164>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80066d4:	2200      	movs	r2, #0
 80066d6:	2100      	movs	r1, #0
 80066d8:	2027      	movs	r0, #39	; 0x27
 80066da:	f000 fa6c 	bl	8006bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80066de:	2027      	movs	r0, #39	; 0x27
 80066e0:	f000 fa85 	bl	8006bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80066e4:	bf00      	nop
 80066e6:	3728      	adds	r7, #40	; 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40004800 	.word	0x40004800
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40020800 	.word	0x40020800
 80066f8:	20001060 	.word	0x20001060
 80066fc:	40026028 	.word	0x40026028
 8006700:	20001104 	.word	0x20001104
 8006704:	40026058 	.word	0x40026058

08006708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800670c:	e7fe      	b.n	800670c <NMI_Handler+0x4>

0800670e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800670e:	b480      	push	{r7}
 8006710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006712:	e7fe      	b.n	8006712 <HardFault_Handler+0x4>

08006714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006718:	e7fe      	b.n	8006718 <MemManage_Handler+0x4>

0800671a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800671a:	b480      	push	{r7}
 800671c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800671e:	e7fe      	b.n	800671e <BusFault_Handler+0x4>

08006720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006724:	e7fe      	b.n	8006724 <UsageFault_Handler+0x4>

08006726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006726:	b480      	push	{r7}
 8006728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800672a:	bf00      	nop
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006754:	f000 f910 	bl	8006978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}

0800675c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006760:	4802      	ldr	r0, [pc, #8]	; (800676c <DMA1_Stream1_IRQHandler+0x10>)
 8006762:	f000 fbf7 	bl	8006f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006766:	bf00      	nop
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20001060 	.word	0x20001060

08006770 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006774:	4802      	ldr	r0, [pc, #8]	; (8006780 <DMA1_Stream3_IRQHandler+0x10>)
 8006776:	f000 fbed 	bl	8006f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20001104 	.word	0x20001104

08006784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <TIM3_IRQHandler+0x10>)
 800678a:	f001 fd97 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20001164 	.word	0x20001164

08006798 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800679c:	4802      	ldr	r0, [pc, #8]	; (80067a8 <USART3_IRQHandler+0x10>)
 800679e:	f002 fa1b 	bl	8008bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200010c0 	.word	0x200010c0

080067ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
	return 1;
 80067b0:	2301      	movs	r3, #1
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <_kill>:

int _kill(int pid, int sig)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80067c6:	f003 f915 	bl	80099f4 <__errno>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2216      	movs	r2, #22
 80067ce:	601a      	str	r2, [r3, #0]
	return -1;
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_exit>:

void _exit (int status)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80067e4:	f04f 31ff 	mov.w	r1, #4294967295
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ffe7 	bl	80067bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80067ee:	e7fe      	b.n	80067ee <_exit+0x12>

080067f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067f8:	4a14      	ldr	r2, [pc, #80]	; (800684c <_sbrk+0x5c>)
 80067fa:	4b15      	ldr	r3, [pc, #84]	; (8006850 <_sbrk+0x60>)
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006804:	4b13      	ldr	r3, [pc, #76]	; (8006854 <_sbrk+0x64>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <_sbrk+0x64>)
 800680e:	4a12      	ldr	r2, [pc, #72]	; (8006858 <_sbrk+0x68>)
 8006810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006812:	4b10      	ldr	r3, [pc, #64]	; (8006854 <_sbrk+0x64>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	429a      	cmp	r2, r3
 800681e:	d207      	bcs.n	8006830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006820:	f003 f8e8 	bl	80099f4 <__errno>
 8006824:	4603      	mov	r3, r0
 8006826:	220c      	movs	r2, #12
 8006828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	e009      	b.n	8006844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <_sbrk+0x64>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <_sbrk+0x64>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	4a05      	ldr	r2, [pc, #20]	; (8006854 <_sbrk+0x64>)
 8006840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20030000 	.word	0x20030000
 8006850:	00000400 	.word	0x00000400
 8006854:	20001054 	.word	0x20001054
 8006858:	200011c0 	.word	0x200011c0

0800685c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <SystemInit+0x20>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <SystemInit+0x20>)
 8006868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800686c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	e000ed00 	.word	0xe000ed00

08006880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006884:	480d      	ldr	r0, [pc, #52]	; (80068bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006886:	490e      	ldr	r1, [pc, #56]	; (80068c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006888:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800688a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800688c:	e002      	b.n	8006894 <LoopCopyDataInit>

0800688e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800688e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006892:	3304      	adds	r3, #4

08006894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006898:	d3f9      	bcc.n	800688e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800689a:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800689c:	4c0b      	ldr	r4, [pc, #44]	; (80068cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800689e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068a0:	e001      	b.n	80068a6 <LoopFillZerobss>

080068a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068a4:	3204      	adds	r2, #4

080068a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068a8:	d3fb      	bcc.n	80068a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068aa:	f7ff ffd7 	bl	800685c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068ae:	f003 f8a7 	bl	8009a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068b2:	f7fa f8e1 	bl	8000a78 <main>
  bx  lr    
 80068b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80068b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80068bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80068c4:	0800af28 	.word	0x0800af28
  ldr r2, =_sbss
 80068c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80068cc:	200011c0 	.word	0x200011c0

080068d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068d0:	e7fe      	b.n	80068d0 <ADC_IRQHandler>
	...

080068d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <HAL_Init+0x40>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <HAL_Init+0x40>)
 80068de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_Init+0x40>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <HAL_Init+0x40>)
 80068ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_Init+0x40>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a07      	ldr	r2, [pc, #28]	; (8006914 <HAL_Init+0x40>)
 80068f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068fc:	2003      	movs	r0, #3
 80068fe:	f000 f94f 	bl	8006ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006902:	200f      	movs	r0, #15
 8006904:	f000 f808 	bl	8006918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006908:	f7ff fdf8 	bl	80064fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40023c00 	.word	0x40023c00

08006918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_InitTick+0x54>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <HAL_InitTick+0x58>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	4619      	mov	r1, r3
 800692a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800692e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f967 	bl	8006c0a <HAL_SYSTICK_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e00e      	b.n	8006964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d80a      	bhi.n	8006962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800694c:	2200      	movs	r2, #0
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	f000 f92f 	bl	8006bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <HAL_InitTick+0x5c>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e000      	b.n	8006964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000008 	.word	0x20000008
 8006970:	20000010 	.word	0x20000010
 8006974:	2000000c 	.word	0x2000000c

08006978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_IncTick+0x20>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_IncTick+0x24>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4413      	add	r3, r2
 8006988:	4a04      	ldr	r2, [pc, #16]	; (800699c <HAL_IncTick+0x24>)
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000010 	.word	0x20000010
 800699c:	200011ac 	.word	0x200011ac

080069a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return uwTick;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_GetTick+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	200011ac 	.word	0x200011ac

080069b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069c0:	f7ff ffee 	bl	80069a0 <HAL_GetTick>
 80069c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d005      	beq.n	80069de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <HAL_Delay+0x44>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069de:	bf00      	nop
 80069e0:	f7ff ffde 	bl	80069a0 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d8f7      	bhi.n	80069e0 <HAL_Delay+0x28>
  {
  }
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000010 	.word	0x20000010

08006a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <__NVIC_SetPriorityGrouping+0x44>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a32:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <__NVIC_SetPriorityGrouping+0x44>)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	60d3      	str	r3, [r2, #12]
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	e000ed00 	.word	0xe000ed00

08006a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <__NVIC_GetPriorityGrouping+0x18>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	0a1b      	lsrs	r3, r3, #8
 8006a52:	f003 0307 	and.w	r3, r3, #7
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	db0b      	blt.n	8006a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	f003 021f 	and.w	r2, r3, #31
 8006a7c:	4907      	ldr	r1, [pc, #28]	; (8006a9c <__NVIC_EnableIRQ+0x38>)
 8006a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	2001      	movs	r0, #1
 8006a86:	fa00 f202 	lsl.w	r2, r0, r2
 8006a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e000e100 	.word	0xe000e100

08006aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	db0a      	blt.n	8006aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	490c      	ldr	r1, [pc, #48]	; (8006aec <__NVIC_SetPriority+0x4c>)
 8006aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006abe:	0112      	lsls	r2, r2, #4
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ac8:	e00a      	b.n	8006ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	4908      	ldr	r1, [pc, #32]	; (8006af0 <__NVIC_SetPriority+0x50>)
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	0112      	lsls	r2, r2, #4
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	440b      	add	r3, r1
 8006ade:	761a      	strb	r2, [r3, #24]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	e000e100 	.word	0xe000e100
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f1c3 0307 	rsb	r3, r3, #7
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	bf28      	it	cs
 8006b12:	2304      	movcs	r3, #4
 8006b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d902      	bls.n	8006b24 <NVIC_EncodePriority+0x30>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3b03      	subs	r3, #3
 8006b22:	e000      	b.n	8006b26 <NVIC_EncodePriority+0x32>
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43da      	mvns	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	401a      	ands	r2, r3
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	43d9      	mvns	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b4c:	4313      	orrs	r3, r2
         );
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3724      	adds	r7, #36	; 0x24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b6c:	d301      	bcc.n	8006b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e00f      	b.n	8006b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <SysTick_Config+0x40>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b7a:	210f      	movs	r1, #15
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	f7ff ff8e 	bl	8006aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <SysTick_Config+0x40>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b8a:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <SysTick_Config+0x40>)
 8006b8c:	2207      	movs	r2, #7
 8006b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	e000e010 	.word	0xe000e010

08006ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff29 	bl	8006a00 <__NVIC_SetPriorityGrouping>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bc8:	f7ff ff3e 	bl	8006a48 <__NVIC_GetPriorityGrouping>
 8006bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff8e 	bl	8006af4 <NVIC_EncodePriority>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff5d 	bl	8006aa0 <__NVIC_SetPriority>
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff ff31 	bl	8006a64 <__NVIC_EnableIRQ>
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff ffa2 	bl	8006b5c <SysTick_Config>
 8006c18:	4603      	mov	r3, r0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c30:	f7ff feb6 	bl	80069a0 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e099      	b.n	8006d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c60:	e00f      	b.n	8006c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c62:	f7ff fe9d 	bl	80069a0 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d908      	bls.n	8006c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2203      	movs	r2, #3
 8006c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e078      	b.n	8006d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e8      	bne.n	8006c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <HAL_DMA_Init+0x158>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d107      	bne.n	8006cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0307 	bic.w	r3, r3, #7
 8006d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d117      	bne.n	8006d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb01 	bl	8007330 <DMA_CheckFifoParam>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d42:	2301      	movs	r3, #1
 8006d44:	e016      	b.n	8006d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fab8 	bl	80072c4 <DMA_CalcBaseAndBitshift>
 8006d54:	4603      	mov	r3, r0
 8006d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	223f      	movs	r2, #63	; 0x3f
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	f010803f 	.word	0xf010803f

08006d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_DMA_Start_IT+0x26>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e040      	b.n	8006e28 <HAL_DMA_Start_IT+0xa8>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d12f      	bne.n	8006e1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa4a 	bl	8007268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	223f      	movs	r2, #63	; 0x3f
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0216 	orr.w	r2, r2, #22
 8006dee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0208 	orr.w	r2, r2, #8
 8006e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e005      	b.n	8006e26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
 8006e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e3e:	f7ff fdaf 	bl	80069a0 <HAL_GetTick>
 8006e42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d008      	beq.n	8006e62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e052      	b.n	8006f08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0216 	bic.w	r2, r2, #22
 8006e70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <HAL_DMA_Abort+0x62>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0208 	bic.w	r2, r2, #8
 8006ea0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006eb2:	e013      	b.n	8006edc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006eb4:	f7ff fd74 	bl	80069a0 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d90c      	bls.n	8006edc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2203      	movs	r2, #3
 8006ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e015      	b.n	8006f08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e4      	bne.n	8006eb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eee:	223f      	movs	r2, #63	; 0x3f
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2280      	movs	r2, #128	; 0x80
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00c      	b.n	8006f48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2205      	movs	r2, #5
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f60:	4b92      	ldr	r3, [pc, #584]	; (80071ac <HAL_DMA_IRQHandler+0x258>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a92      	ldr	r2, [pc, #584]	; (80071b0 <HAL_DMA_IRQHandler+0x25c>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	0a9b      	lsrs	r3, r3, #10
 8006f6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	2208      	movs	r2, #8
 8006f80:	409a      	lsls	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01a      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d013      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0204 	bic.w	r2, r2, #4
 8006fa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fac:	2208      	movs	r2, #8
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	f043 0201 	orr.w	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d012      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	f043 0202 	orr.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	409a      	lsls	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4013      	ands	r3, r2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d012      	beq.n	800702c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	2204      	movs	r2, #4
 800701a:	409a      	lsls	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	f043 0204 	orr.w	r2, r3, #4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007030:	2210      	movs	r2, #16
 8007032:	409a      	lsls	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4013      	ands	r3, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d043      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d03c      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704e:	2210      	movs	r2, #16
 8007050:	409a      	lsls	r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d018      	beq.n	8007096 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d024      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
 8007082:	e01f      	b.n	80070c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01b      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	e016      	b.n	80070c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0208 	bic.w	r2, r2, #8
 80070b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	2220      	movs	r2, #32
 80070ca:	409a      	lsls	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 808e 	beq.w	80071f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8086 	beq.w	80071f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	2220      	movs	r2, #32
 80070ec:	409a      	lsls	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d136      	bne.n	800716c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0216 	bic.w	r2, r2, #22
 800710c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800711c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <HAL_DMA_IRQHandler+0x1da>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0208 	bic.w	r2, r2, #8
 800713c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	223f      	movs	r2, #63	; 0x3f
 8007144:	409a      	lsls	r2, r3
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d07d      	beq.n	800725e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
        }
        return;
 800716a:	e078      	b.n	800725e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01c      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718c:	2b00      	cmp	r3, #0
 800718e:	d030      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	e02b      	b.n	80071f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d027      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
 80071aa:	e022      	b.n	80071f2 <HAL_DMA_IRQHandler+0x29e>
 80071ac:	20000008 	.word	0x20000008
 80071b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10f      	bne.n	80071e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0210 	bic.w	r2, r2, #16
 80071d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d032      	beq.n	8007260 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d022      	beq.n	800724c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2205      	movs	r2, #5
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3301      	adds	r3, #1
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	429a      	cmp	r2, r3
 8007228:	d307      	bcc.n	800723a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f2      	bne.n	800721e <HAL_DMA_IRQHandler+0x2ca>
 8007238:	e000      	b.n	800723c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800723a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	e000      	b.n	8007260 <HAL_DMA_IRQHandler+0x30c>
        return;
 800725e:	bf00      	nop
    }
  }
}
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop

08007268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d108      	bne.n	80072a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072a6:	e007      	b.n	80072b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	60da      	str	r2, [r3, #12]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	3b10      	subs	r3, #16
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <DMA_CalcBaseAndBitshift+0x64>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <DMA_CalcBaseAndBitshift+0x68>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d909      	bls.n	8007306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	1d1a      	adds	r2, r3, #4
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	659a      	str	r2, [r3, #88]	; 0x58
 8007304:	e007      	b.n	8007316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	aaaaaaab 	.word	0xaaaaaaab
 800732c:	0800aed8 	.word	0x0800aed8

08007330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11f      	bne.n	800738a <DMA_CheckFifoParam+0x5a>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d856      	bhi.n	80073fe <DMA_CheckFifoParam+0xce>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <DMA_CheckFifoParam+0x28>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	08007369 	.word	0x08007369
 800735c:	0800737b 	.word	0x0800737b
 8007360:	08007369 	.word	0x08007369
 8007364:	080073ff 	.word	0x080073ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d046      	beq.n	8007402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007378:	e043      	b.n	8007402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007382:	d140      	bne.n	8007406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007388:	e03d      	b.n	8007406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007392:	d121      	bne.n	80073d8 <DMA_CheckFifoParam+0xa8>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b03      	cmp	r3, #3
 8007398:	d837      	bhi.n	800740a <DMA_CheckFifoParam+0xda>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <DMA_CheckFifoParam+0x70>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073b7 	.word	0x080073b7
 80073a8:	080073b1 	.word	0x080073b1
 80073ac:	080073c9 	.word	0x080073c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
      break;
 80073b4:	e030      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d025      	beq.n	800740e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c6:	e022      	b.n	800740e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073d0:	d11f      	bne.n	8007412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073d6:	e01c      	b.n	8007412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d903      	bls.n	80073e6 <DMA_CheckFifoParam+0xb6>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d003      	beq.n	80073ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073e4:	e018      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ea:	e015      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e00b      	b.n	8007416 <DMA_CheckFifoParam+0xe6>
      break;
 80073fe:	bf00      	nop
 8007400:	e00a      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;
 8007402:	bf00      	nop
 8007404:	e008      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;
 8007406:	bf00      	nop
 8007408:	e006      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;
 800740a:	bf00      	nop
 800740c:	e004      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;
 800740e:	bf00      	nop
 8007410:	e002      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;   
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <DMA_CheckFifoParam+0xe8>
      break;
 8007416:	bf00      	nop
    }
  } 
  
  return status; 
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop

08007428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007428:	b480      	push	{r7}
 800742a:	b089      	sub	sp, #36	; 0x24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800743a:	2300      	movs	r3, #0
 800743c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	e177      	b.n	8007734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007444:	2201      	movs	r2, #1
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4013      	ands	r3, r2
 8007456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	f040 8166 	bne.w	800772e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d005      	beq.n	800747a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007476:	2b02      	cmp	r3, #2
 8007478:	d130      	bne.n	80074dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	2203      	movs	r2, #3
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074b0:	2201      	movs	r2, #1
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	fa02 f303 	lsl.w	r3, r2, r3
 80074b8:	43db      	mvns	r3, r3
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	4013      	ands	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	091b      	lsrs	r3, r3, #4
 80074c6:	f003 0201 	and.w	r2, r3, #1
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d017      	beq.n	8007518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	2203      	movs	r2, #3
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	43db      	mvns	r3, r3
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	4013      	ands	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	4313      	orrs	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d123      	bne.n	800756c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	08da      	lsrs	r2, r3, #3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3208      	adds	r2, #8
 800752c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	220f      	movs	r2, #15
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	43db      	mvns	r3, r3
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	4013      	ands	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4313      	orrs	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	08da      	lsrs	r2, r3, #3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3208      	adds	r2, #8
 8007566:	69b9      	ldr	r1, [r7, #24]
 8007568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	2203      	movs	r2, #3
 8007578:	fa02 f303 	lsl.w	r3, r2, r3
 800757c:	43db      	mvns	r3, r3
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	4013      	ands	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 0203 	and.w	r2, r3, #3
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80c0 	beq.w	800772e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	4b66      	ldr	r3, [pc, #408]	; (800774c <HAL_GPIO_Init+0x324>)
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	4a65      	ldr	r2, [pc, #404]	; (800774c <HAL_GPIO_Init+0x324>)
 80075b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075bc:	6453      	str	r3, [r2, #68]	; 0x44
 80075be:	4b63      	ldr	r3, [pc, #396]	; (800774c <HAL_GPIO_Init+0x324>)
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075ca:	4a61      	ldr	r2, [pc, #388]	; (8007750 <HAL_GPIO_Init+0x328>)
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	089b      	lsrs	r3, r3, #2
 80075d0:	3302      	adds	r3, #2
 80075d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	220f      	movs	r2, #15
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	43db      	mvns	r3, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4013      	ands	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a58      	ldr	r2, [pc, #352]	; (8007754 <HAL_GPIO_Init+0x32c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d037      	beq.n	8007666 <HAL_GPIO_Init+0x23e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a57      	ldr	r2, [pc, #348]	; (8007758 <HAL_GPIO_Init+0x330>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d031      	beq.n	8007662 <HAL_GPIO_Init+0x23a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a56      	ldr	r2, [pc, #344]	; (800775c <HAL_GPIO_Init+0x334>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d02b      	beq.n	800765e <HAL_GPIO_Init+0x236>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a55      	ldr	r2, [pc, #340]	; (8007760 <HAL_GPIO_Init+0x338>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d025      	beq.n	800765a <HAL_GPIO_Init+0x232>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a54      	ldr	r2, [pc, #336]	; (8007764 <HAL_GPIO_Init+0x33c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01f      	beq.n	8007656 <HAL_GPIO_Init+0x22e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a53      	ldr	r2, [pc, #332]	; (8007768 <HAL_GPIO_Init+0x340>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d019      	beq.n	8007652 <HAL_GPIO_Init+0x22a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a52      	ldr	r2, [pc, #328]	; (800776c <HAL_GPIO_Init+0x344>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_GPIO_Init+0x226>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a51      	ldr	r2, [pc, #324]	; (8007770 <HAL_GPIO_Init+0x348>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00d      	beq.n	800764a <HAL_GPIO_Init+0x222>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a50      	ldr	r2, [pc, #320]	; (8007774 <HAL_GPIO_Init+0x34c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d007      	beq.n	8007646 <HAL_GPIO_Init+0x21e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a4f      	ldr	r2, [pc, #316]	; (8007778 <HAL_GPIO_Init+0x350>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <HAL_GPIO_Init+0x21a>
 800763e:	2309      	movs	r3, #9
 8007640:	e012      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007642:	230a      	movs	r3, #10
 8007644:	e010      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007646:	2308      	movs	r3, #8
 8007648:	e00e      	b.n	8007668 <HAL_GPIO_Init+0x240>
 800764a:	2307      	movs	r3, #7
 800764c:	e00c      	b.n	8007668 <HAL_GPIO_Init+0x240>
 800764e:	2306      	movs	r3, #6
 8007650:	e00a      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007652:	2305      	movs	r3, #5
 8007654:	e008      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007656:	2304      	movs	r3, #4
 8007658:	e006      	b.n	8007668 <HAL_GPIO_Init+0x240>
 800765a:	2303      	movs	r3, #3
 800765c:	e004      	b.n	8007668 <HAL_GPIO_Init+0x240>
 800765e:	2302      	movs	r3, #2
 8007660:	e002      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_GPIO_Init+0x240>
 8007666:	2300      	movs	r3, #0
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	f002 0203 	and.w	r2, r2, #3
 800766e:	0092      	lsls	r2, r2, #2
 8007670:	4093      	lsls	r3, r2
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4313      	orrs	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007678:	4935      	ldr	r1, [pc, #212]	; (8007750 <HAL_GPIO_Init+0x328>)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	089b      	lsrs	r3, r3, #2
 800767e:	3302      	adds	r3, #2
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007686:	4b3d      	ldr	r3, [pc, #244]	; (800777c <HAL_GPIO_Init+0x354>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	43db      	mvns	r3, r3
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4013      	ands	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076aa:	4a34      	ldr	r2, [pc, #208]	; (800777c <HAL_GPIO_Init+0x354>)
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80076b0:	4b32      	ldr	r3, [pc, #200]	; (800777c <HAL_GPIO_Init+0x354>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076d4:	4a29      	ldr	r2, [pc, #164]	; (800777c <HAL_GPIO_Init+0x354>)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076da:	4b28      	ldr	r3, [pc, #160]	; (800777c <HAL_GPIO_Init+0x354>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <HAL_GPIO_Init+0x354>)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <HAL_GPIO_Init+0x354>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	43db      	mvns	r3, r3
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007728:	4a14      	ldr	r2, [pc, #80]	; (800777c <HAL_GPIO_Init+0x354>)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	3301      	adds	r3, #1
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	f67f ae84 	bls.w	8007444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	3724      	adds	r7, #36	; 0x24
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40023800 	.word	0x40023800
 8007750:	40013800 	.word	0x40013800
 8007754:	40020000 	.word	0x40020000
 8007758:	40020400 	.word	0x40020400
 800775c:	40020800 	.word	0x40020800
 8007760:	40020c00 	.word	0x40020c00
 8007764:	40021000 	.word	0x40021000
 8007768:	40021400 	.word	0x40021400
 800776c:	40021800 	.word	0x40021800
 8007770:	40021c00 	.word	0x40021c00
 8007774:	40022000 	.word	0x40022000
 8007778:	40022400 	.word	0x40022400
 800777c:	40013c00 	.word	0x40013c00

08007780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
 800778c:	4613      	mov	r3, r2
 800778e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007790:	787b      	ldrb	r3, [r7, #1]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007796:	887a      	ldrh	r2, [r7, #2]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800779c:	e003      	b.n	80077a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	041a      	lsls	r2, r3, #16
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	619a      	str	r2, [r3, #24]
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <HAL_PWREx_EnableOverDrive+0x90>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <HAL_PWREx_EnableOverDrive+0x90>)
 80077c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b1d      	ldr	r3, [pc, #116]	; (8007844 <HAL_PWREx_EnableOverDrive+0x90>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <HAL_PWREx_EnableOverDrive+0x94>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077e0:	f7ff f8de 	bl	80069a0 <HAL_GetTick>
 80077e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077e6:	e009      	b.n	80077fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077e8:	f7ff f8da 	bl	80069a0 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077f6:	d901      	bls.n	80077fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01f      	b.n	800783c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077fc:	4b13      	ldr	r3, [pc, #76]	; (800784c <HAL_PWREx_EnableOverDrive+0x98>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d1ee      	bne.n	80077e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <HAL_PWREx_EnableOverDrive+0x9c>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007810:	f7ff f8c6 	bl	80069a0 <HAL_GetTick>
 8007814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007816:	e009      	b.n	800782c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007818:	f7ff f8c2 	bl	80069a0 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007826:	d901      	bls.n	800782c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e007      	b.n	800783c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <HAL_PWREx_EnableOverDrive+0x98>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007838:	d1ee      	bne.n	8007818 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40023800 	.word	0x40023800
 8007848:	420e0040 	.word	0x420e0040
 800784c:	40007000 	.word	0x40007000
 8007850:	420e0044 	.word	0x420e0044

08007854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e264      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d075      	beq.n	800795e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007872:	4ba3      	ldr	r3, [pc, #652]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 030c 	and.w	r3, r3, #12
 800787a:	2b04      	cmp	r3, #4
 800787c:	d00c      	beq.n	8007898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800787e:	4ba0      	ldr	r3, [pc, #640]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007886:	2b08      	cmp	r3, #8
 8007888:	d112      	bne.n	80078b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800788a:	4b9d      	ldr	r3, [pc, #628]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007896:	d10b      	bne.n	80078b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	4b99      	ldr	r3, [pc, #612]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05b      	beq.n	800795c <HAL_RCC_OscConfig+0x108>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d157      	bne.n	800795c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e23f      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b8:	d106      	bne.n	80078c8 <HAL_RCC_OscConfig+0x74>
 80078ba:	4b91      	ldr	r3, [pc, #580]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a90      	ldr	r2, [pc, #576]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e01d      	b.n	8007904 <HAL_RCC_OscConfig+0xb0>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078d0:	d10c      	bne.n	80078ec <HAL_RCC_OscConfig+0x98>
 80078d2:	4b8b      	ldr	r3, [pc, #556]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a8a      	ldr	r2, [pc, #552]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	4b88      	ldr	r3, [pc, #544]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a87      	ldr	r2, [pc, #540]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e00b      	b.n	8007904 <HAL_RCC_OscConfig+0xb0>
 80078ec:	4b84      	ldr	r3, [pc, #528]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a83      	ldr	r2, [pc, #524]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	4b81      	ldr	r3, [pc, #516]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a80      	ldr	r2, [pc, #512]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80078fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d013      	beq.n	8007934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800790c:	f7ff f848 	bl	80069a0 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007914:	f7ff f844 	bl	80069a0 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	; 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e204      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	4b76      	ldr	r3, [pc, #472]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCC_OscConfig+0xc0>
 8007932:	e014      	b.n	800795e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007934:	f7ff f834 	bl	80069a0 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800793c:	f7ff f830 	bl	80069a0 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	; 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e1f0      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800794e:	4b6c      	ldr	r3, [pc, #432]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f0      	bne.n	800793c <HAL_RCC_OscConfig+0xe8>
 800795a:	e000      	b.n	800795e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800795c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d063      	beq.n	8007a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800796a:	4b65      	ldr	r3, [pc, #404]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007976:	4b62      	ldr	r3, [pc, #392]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800797e:	2b08      	cmp	r3, #8
 8007980:	d11c      	bne.n	80079bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007982:	4b5f      	ldr	r3, [pc, #380]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d116      	bne.n	80079bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	4b5c      	ldr	r3, [pc, #368]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_RCC_OscConfig+0x152>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d001      	beq.n	80079a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e1c4      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a6:	4b56      	ldr	r3, [pc, #344]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4952      	ldr	r1, [pc, #328]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ba:	e03a      	b.n	8007a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d020      	beq.n	8007a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079c4:	4b4f      	ldr	r3, [pc, #316]	; (8007b04 <HAL_RCC_OscConfig+0x2b0>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fe ffe9 	bl	80069a0 <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079d2:	f7fe ffe5 	bl	80069a0 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e1a5      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e4:	4b46      	ldr	r3, [pc, #280]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f0      	beq.n	80079d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f0:	4b43      	ldr	r3, [pc, #268]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4940      	ldr	r1, [pc, #256]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	600b      	str	r3, [r1, #0]
 8007a04:	e015      	b.n	8007a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a06:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <HAL_RCC_OscConfig+0x2b0>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fe ffc8 	bl	80069a0 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a14:	f7fe ffc4 	bl	80069a0 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e184      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a26:	4b36      	ldr	r3, [pc, #216]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d030      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d016      	beq.n	8007a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a46:	4b30      	ldr	r3, [pc, #192]	; (8007b08 <HAL_RCC_OscConfig+0x2b4>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a4c:	f7fe ffa8 	bl	80069a0 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a54:	f7fe ffa4 	bl	80069a0 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e164      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a66:	4b26      	ldr	r3, [pc, #152]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x200>
 8007a72:	e015      	b.n	8007aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a74:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <HAL_RCC_OscConfig+0x2b4>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a7a:	f7fe ff91 	bl	80069a0 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a82:	f7fe ff8d 	bl	80069a0 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e14d      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f0      	bne.n	8007a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80a0 	beq.w	8007bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ab2:	4b13      	ldr	r3, [pc, #76]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10f      	bne.n	8007ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <HAL_RCC_OscConfig+0x2ac>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ada:	2301      	movs	r3, #1
 8007adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ade:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <HAL_RCC_OscConfig+0x2b8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d121      	bne.n	8007b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007aea:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <HAL_RCC_OscConfig+0x2b8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a07      	ldr	r2, [pc, #28]	; (8007b0c <HAL_RCC_OscConfig+0x2b8>)
 8007af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007af6:	f7fe ff53 	bl	80069a0 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007afc:	e011      	b.n	8007b22 <HAL_RCC_OscConfig+0x2ce>
 8007afe:	bf00      	nop
 8007b00:	40023800 	.word	0x40023800
 8007b04:	42470000 	.word	0x42470000
 8007b08:	42470e80 	.word	0x42470e80
 8007b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b10:	f7fe ff46 	bl	80069a0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e106      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b22:	4b85      	ldr	r3, [pc, #532]	; (8007d38 <HAL_RCC_OscConfig+0x4e4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0f0      	beq.n	8007b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d106      	bne.n	8007b44 <HAL_RCC_OscConfig+0x2f0>
 8007b36:	4b81      	ldr	r3, [pc, #516]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a80      	ldr	r2, [pc, #512]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6713      	str	r3, [r2, #112]	; 0x70
 8007b42:	e01c      	b.n	8007b7e <HAL_RCC_OscConfig+0x32a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RCC_OscConfig+0x312>
 8007b4c:	4b7b      	ldr	r3, [pc, #492]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b50:	4a7a      	ldr	r2, [pc, #488]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b52:	f043 0304 	orr.w	r3, r3, #4
 8007b56:	6713      	str	r3, [r2, #112]	; 0x70
 8007b58:	4b78      	ldr	r3, [pc, #480]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5c:	4a77      	ldr	r2, [pc, #476]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6713      	str	r3, [r2, #112]	; 0x70
 8007b64:	e00b      	b.n	8007b7e <HAL_RCC_OscConfig+0x32a>
 8007b66:	4b75      	ldr	r3, [pc, #468]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	4a74      	ldr	r2, [pc, #464]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	6713      	str	r3, [r2, #112]	; 0x70
 8007b72:	4b72      	ldr	r3, [pc, #456]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b76:	4a71      	ldr	r2, [pc, #452]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007b78:	f023 0304 	bic.w	r3, r3, #4
 8007b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d015      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b86:	f7fe ff0b 	bl	80069a0 <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b8c:	e00a      	b.n	8007ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8e:	f7fe ff07 	bl	80069a0 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e0c5      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ba4:	4b65      	ldr	r3, [pc, #404]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0ee      	beq.n	8007b8e <HAL_RCC_OscConfig+0x33a>
 8007bb0:	e014      	b.n	8007bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bb2:	f7fe fef5 	bl	80069a0 <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb8:	e00a      	b.n	8007bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bba:	f7fe fef1 	bl	80069a0 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e0af      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bd0:	4b5a      	ldr	r3, [pc, #360]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1ee      	bne.n	8007bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d105      	bne.n	8007bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007be2:	4b56      	ldr	r3, [pc, #344]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	4a55      	ldr	r2, [pc, #340]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 809b 	beq.w	8007d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bf8:	4b50      	ldr	r3, [pc, #320]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d05c      	beq.n	8007cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d141      	bne.n	8007c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0c:	4b4c      	ldr	r3, [pc, #304]	; (8007d40 <HAL_RCC_OscConfig+0x4ec>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c12:	f7fe fec5 	bl	80069a0 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c1a:	f7fe fec1 	bl	80069a0 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e081      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2c:	4b43      	ldr	r3, [pc, #268]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	019b      	lsls	r3, r3, #6
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	061b      	lsls	r3, r3, #24
 8007c5c:	4937      	ldr	r1, [pc, #220]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <HAL_RCC_OscConfig+0x4ec>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c68:	f7fe fe9a 	bl	80069a0 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c70:	f7fe fe96 	bl	80069a0 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e056      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c82:	4b2e      	ldr	r3, [pc, #184]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0x41c>
 8007c8e:	e04e      	b.n	8007d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <HAL_RCC_OscConfig+0x4ec>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c96:	f7fe fe83 	bl	80069a0 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c9c:	e008      	b.n	8007cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c9e:	f7fe fe7f 	bl	80069a0 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e03f      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cb0:	4b22      	ldr	r3, [pc, #136]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1f0      	bne.n	8007c9e <HAL_RCC_OscConfig+0x44a>
 8007cbc:	e037      	b.n	8007d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e032      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cca:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <HAL_RCC_OscConfig+0x4e8>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d028      	beq.n	8007d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d121      	bne.n	8007d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d11a      	bne.n	8007d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d111      	bne.n	8007d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	3b01      	subs	r3, #1
 8007d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d107      	bne.n	8007d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d001      	beq.n	8007d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40007000 	.word	0x40007000
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	42470060 	.word	0x42470060

08007d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0cc      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d58:	4b68      	ldr	r3, [pc, #416]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d90c      	bls.n	8007d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d66:	4b65      	ldr	r3, [pc, #404]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6e:	4b63      	ldr	r3, [pc, #396]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0b8      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d020      	beq.n	8007dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d98:	4b59      	ldr	r3, [pc, #356]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4a58      	ldr	r2, [pc, #352]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007db0:	4b53      	ldr	r3, [pc, #332]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	4a52      	ldr	r2, [pc, #328]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dbc:	4b50      	ldr	r3, [pc, #320]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	494d      	ldr	r1, [pc, #308]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d044      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d107      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de2:	4b47      	ldr	r3, [pc, #284]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d119      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e07f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d003      	beq.n	8007e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d107      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e02:	4b3f      	ldr	r3, [pc, #252]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e06f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e12:	4b3b      	ldr	r3, [pc, #236]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e067      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e22:	4b37      	ldr	r3, [pc, #220]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f023 0203 	bic.w	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4934      	ldr	r1, [pc, #208]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e34:	f7fe fdb4 	bl	80069a0 <HAL_GetTick>
 8007e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e3c:	f7fe fdb0 	bl	80069a0 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e04f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 020c 	and.w	r2, r3, #12
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d1eb      	bne.n	8007e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e64:	4b25      	ldr	r3, [pc, #148]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d20c      	bcs.n	8007e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7a:	4b20      	ldr	r3, [pc, #128]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d001      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e032      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e98:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4916      	ldr	r1, [pc, #88]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	490e      	ldr	r1, [pc, #56]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eca:	f000 f821 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	490a      	ldr	r1, [pc, #40]	; (8007f04 <HAL_RCC_ClockConfig+0x1c0>)
 8007edc:	5ccb      	ldrb	r3, [r1, r3]
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ee6:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fd14 	bl	8006918 <HAL_InitTick>

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40023c00 	.word	0x40023c00
 8007f00:	40023800 	.word	0x40023800
 8007f04:	0800aec0 	.word	0x0800aec0
 8007f08:	20000008 	.word	0x20000008
 8007f0c:	2000000c 	.word	0x2000000c

08007f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	2300      	movs	r3, #0
 8007f22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f28:	4b67      	ldr	r3, [pc, #412]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 030c 	and.w	r3, r3, #12
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d00d      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0x40>
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	f200 80bd 	bhi.w	80080b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_RCC_GetSysClockFreq+0x34>
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d003      	beq.n	8007f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007f42:	e0b7      	b.n	80080b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f44:	4b61      	ldr	r3, [pc, #388]	; (80080cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f46:	60bb      	str	r3, [r7, #8]
       break;
 8007f48:	e0b7      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f4a:	4b61      	ldr	r3, [pc, #388]	; (80080d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f4c:	60bb      	str	r3, [r7, #8]
      break;
 8007f4e:	e0b4      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f50:	4b5d      	ldr	r3, [pc, #372]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f5a:	4b5b      	ldr	r3, [pc, #364]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d04d      	beq.n	8008002 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f66:	4b58      	ldr	r3, [pc, #352]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	099b      	lsrs	r3, r3, #6
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f76:	f04f 0100 	mov.w	r1, #0
 8007f7a:	ea02 0800 	and.w	r8, r2, r0
 8007f7e:	ea03 0901 	and.w	r9, r3, r1
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	014b      	lsls	r3, r1, #5
 8007f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f94:	0142      	lsls	r2, r0, #5
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	ebb0 0008 	subs.w	r0, r0, r8
 8007f9e:	eb61 0109 	sbc.w	r1, r1, r9
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	018b      	lsls	r3, r1, #6
 8007fac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fb0:	0182      	lsls	r2, r0, #6
 8007fb2:	1a12      	subs	r2, r2, r0
 8007fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8007fb8:	f04f 0000 	mov.w	r0, #0
 8007fbc:	f04f 0100 	mov.w	r1, #0
 8007fc0:	00d9      	lsls	r1, r3, #3
 8007fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fc6:	00d0      	lsls	r0, r2, #3
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	eb12 0208 	adds.w	r2, r2, r8
 8007fd0:	eb43 0309 	adc.w	r3, r3, r9
 8007fd4:	f04f 0000 	mov.w	r0, #0
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	0259      	lsls	r1, r3, #9
 8007fde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007fe2:	0250      	lsls	r0, r2, #9
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	f7f8 fb98 	bl	8000728 <__aeabi_uldivmod>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e04a      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008002:	4b31      	ldr	r3, [pc, #196]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	099b      	lsrs	r3, r3, #6
 8008008:	461a      	mov	r2, r3
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008012:	f04f 0100 	mov.w	r1, #0
 8008016:	ea02 0400 	and.w	r4, r2, r0
 800801a:	ea03 0501 	and.w	r5, r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	014b      	lsls	r3, r1, #5
 800802c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008030:	0142      	lsls	r2, r0, #5
 8008032:	4610      	mov	r0, r2
 8008034:	4619      	mov	r1, r3
 8008036:	1b00      	subs	r0, r0, r4
 8008038:	eb61 0105 	sbc.w	r1, r1, r5
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	018b      	lsls	r3, r1, #6
 8008046:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800804a:	0182      	lsls	r2, r0, #6
 800804c:	1a12      	subs	r2, r2, r0
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	00d9      	lsls	r1, r3, #3
 800805c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008060:	00d0      	lsls	r0, r2, #3
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	1912      	adds	r2, r2, r4
 8008068:	eb45 0303 	adc.w	r3, r5, r3
 800806c:	f04f 0000 	mov.w	r0, #0
 8008070:	f04f 0100 	mov.w	r1, #0
 8008074:	0299      	lsls	r1, r3, #10
 8008076:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800807a:	0290      	lsls	r0, r2, #10
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4610      	mov	r0, r2
 8008082:	4619      	mov	r1, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	461a      	mov	r2, r3
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	f7f8 fb4c 	bl	8000728 <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4613      	mov	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	0c1b      	lsrs	r3, r3, #16
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	3301      	adds	r3, #1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	60bb      	str	r3, [r7, #8]
      break;
 80080b2:	e002      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080b6:	60bb      	str	r3, [r7, #8]
      break;
 80080b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ba:	68bb      	ldr	r3, [r7, #8]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080c6:	bf00      	nop
 80080c8:	40023800 	.word	0x40023800
 80080cc:	00f42400 	.word	0x00f42400
 80080d0:	007a1200 	.word	0x007a1200

080080d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080d8:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80080da:	681b      	ldr	r3, [r3, #0]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20000008 	.word	0x20000008

080080ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080f0:	f7ff fff0 	bl	80080d4 <HAL_RCC_GetHCLKFreq>
 80080f4:	4602      	mov	r2, r0
 80080f6:	4b05      	ldr	r3, [pc, #20]	; (800810c <HAL_RCC_GetPCLK1Freq+0x20>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	0a9b      	lsrs	r3, r3, #10
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	4903      	ldr	r1, [pc, #12]	; (8008110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008102:	5ccb      	ldrb	r3, [r1, r3]
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008108:	4618      	mov	r0, r3
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40023800 	.word	0x40023800
 8008110:	0800aed0 	.word	0x0800aed0

08008114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008118:	f7ff ffdc 	bl	80080d4 <HAL_RCC_GetHCLKFreq>
 800811c:	4602      	mov	r2, r0
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	0b5b      	lsrs	r3, r3, #13
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	4903      	ldr	r1, [pc, #12]	; (8008138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800812a:	5ccb      	ldrb	r3, [r1, r3]
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40023800 	.word	0x40023800
 8008138:	0800aed0 	.word	0x0800aed0

0800813c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e041      	b.n	80081d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe f9f2 	bl	800654c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f000 fa96 	bl	80086ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d001      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e04e      	b.n	8008292 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a23      	ldr	r2, [pc, #140]	; (80082a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d022      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d01d      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <HAL_TIM_Base_Start_IT+0xd0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x80>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d111      	bne.n	8008280 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b06      	cmp	r3, #6
 800826c:	d010      	beq.n	8008290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827e:	e007      	b.n	8008290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40000c00 	.word	0x40000c00
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40001800 	.word	0x40001800

080082bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d122      	bne.n	8008318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d11b      	bne.n	8008318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0202 	mvn.w	r2, #2
 80082e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9b5 	bl	800866e <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9a7 	bl	800865a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f9b8 	bl	8008682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0204 	mvn.w	r2, #4
 800833c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f98b 	bl	800866e <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f97d 	bl	800865a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f98e 	bl	8008682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b08      	cmp	r3, #8
 8008378:	d122      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d11b      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0208 	mvn.w	r2, #8
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f961 	bl	800866e <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f953 	bl	800865a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f964 	bl	8008682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0210 	mvn.w	r2, #16
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2208      	movs	r2, #8
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f937 	bl	800866e <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f929 	bl	800865a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f93a 	bl	8008682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b01      	cmp	r3, #1
 8008420:	d10e      	bne.n	8008440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d107      	bne.n	8008440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0201 	mvn.w	r2, #1
 8008438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7f8 fca8 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d10e      	bne.n	800846c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d107      	bne.n	800846c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fae0 	bl	8008a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d10e      	bne.n	8008498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d107      	bne.n	8008498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f8ff 	bl	8008696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d10e      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0220 	mvn.w	r2, #32
 80084bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 faaa 	bl	8008a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e0b4      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x186>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008520:	d03e      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0xd4>
 8008522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008526:	f200 8087 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 800852a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852e:	f000 8086 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x172>
 8008532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008536:	d87f      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008538:	2b70      	cmp	r3, #112	; 0x70
 800853a:	d01a      	beq.n	8008572 <HAL_TIM_ConfigClockSource+0xa6>
 800853c:	2b70      	cmp	r3, #112	; 0x70
 800853e:	d87b      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008540:	2b60      	cmp	r3, #96	; 0x60
 8008542:	d050      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x11a>
 8008544:	2b60      	cmp	r3, #96	; 0x60
 8008546:	d877      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008548:	2b50      	cmp	r3, #80	; 0x50
 800854a:	d03c      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0xfa>
 800854c:	2b50      	cmp	r3, #80	; 0x50
 800854e:	d873      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d058      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x13a>
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d86f      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008558:	2b30      	cmp	r3, #48	; 0x30
 800855a:	d064      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x15a>
 800855c:	2b30      	cmp	r3, #48	; 0x30
 800855e:	d86b      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b20      	cmp	r3, #32
 8008562:	d060      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x15a>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d867      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d05c      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x15a>
 800856c:	2b10      	cmp	r3, #16
 800856e:	d05a      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x15a>
 8008570:	e062      	b.n	8008638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6899      	ldr	r1, [r3, #8]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f000 f9ad 	bl	80088e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	609a      	str	r2, [r3, #8]
      break;
 800859e:	e04f      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6899      	ldr	r1, [r3, #8]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f000 f996 	bl	80088e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085c2:	609a      	str	r2, [r3, #8]
      break;
 80085c4:	e03c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6859      	ldr	r1, [r3, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 f90a 	bl	80087ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2150      	movs	r1, #80	; 0x50
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f963 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 80085e4:	e02c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6859      	ldr	r1, [r3, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	461a      	mov	r2, r3
 80085f4:	f000 f929 	bl	800884a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2160      	movs	r1, #96	; 0x60
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f953 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008604:	e01c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6859      	ldr	r1, [r3, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	461a      	mov	r2, r3
 8008614:	f000 f8ea 	bl	80087ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2140      	movs	r1, #64	; 0x40
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f943 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008624:	e00c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f000 f93a 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008636:	e003      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	73fb      	strb	r3, [r7, #15]
      break;
 800863c:	e000      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800863e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800868a:	bf00      	nop
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a40      	ldr	r2, [pc, #256]	; (80087c0 <TIM_Base_SetConfig+0x114>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ca:	d00f      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3d      	ldr	r2, [pc, #244]	; (80087c4 <TIM_Base_SetConfig+0x118>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00b      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a3c      	ldr	r2, [pc, #240]	; (80087c8 <TIM_Base_SetConfig+0x11c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d007      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a3b      	ldr	r2, [pc, #236]	; (80087cc <TIM_Base_SetConfig+0x120>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d003      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3a      	ldr	r2, [pc, #232]	; (80087d0 <TIM_Base_SetConfig+0x124>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d108      	bne.n	80086fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2f      	ldr	r2, [pc, #188]	; (80087c0 <TIM_Base_SetConfig+0x114>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d02b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870c:	d027      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2c      	ldr	r2, [pc, #176]	; (80087c4 <TIM_Base_SetConfig+0x118>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d023      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2b      	ldr	r2, [pc, #172]	; (80087c8 <TIM_Base_SetConfig+0x11c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01f      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2a      	ldr	r2, [pc, #168]	; (80087cc <TIM_Base_SetConfig+0x120>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <TIM_Base_SetConfig+0x124>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d017      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a28      	ldr	r2, [pc, #160]	; (80087d4 <TIM_Base_SetConfig+0x128>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a27      	ldr	r2, [pc, #156]	; (80087d8 <TIM_Base_SetConfig+0x12c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00f      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a26      	ldr	r2, [pc, #152]	; (80087dc <TIM_Base_SetConfig+0x130>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <TIM_Base_SetConfig+0x134>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <TIM_Base_SetConfig+0x138>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a23      	ldr	r2, [pc, #140]	; (80087e8 <TIM_Base_SetConfig+0x13c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d108      	bne.n	8008770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a0a      	ldr	r2, [pc, #40]	; (80087c0 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_Base_SetConfig+0xf8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a0c      	ldr	r2, [pc, #48]	; (80087d0 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d103      	bne.n	80087ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	615a      	str	r2, [r3, #20]
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40014000 	.word	0x40014000
 80087d8:	40014400 	.word	0x40014400
 80087dc:	40014800 	.word	0x40014800
 80087e0:	40001800 	.word	0x40001800
 80087e4:	40001c00 	.word	0x40001c00
 80087e8:	40002000 	.word	0x40002000

080087ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f023 0201 	bic.w	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f023 030a 	bic.w	r3, r3, #10
 8008828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0210 	bic.w	r2, r3, #16
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	031b      	lsls	r3, r3, #12
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f043 0307 	orr.w	r3, r3, #7
 80088cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	609a      	str	r2, [r3, #8]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	021a      	lsls	r2, r3, #8
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	431a      	orrs	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	609a      	str	r2, [r3, #8]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008934:	2302      	movs	r3, #2
 8008936:	e05a      	b.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a21      	ldr	r2, [pc, #132]	; (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d022      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008984:	d01d      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1d      	ldr	r2, [pc, #116]	; (8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d018      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a1a      	ldr	r2, [pc, #104]	; (8008a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a15      	ldr	r2, [pc, #84]	; (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10c      	bne.n	80089dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40010000 	.word	0x40010000
 8008a00:	40000400 	.word	0x40000400
 8008a04:	40000800 	.word	0x40000800
 8008a08:	40000c00 	.word	0x40000c00
 8008a0c:	40010400 	.word	0x40010400
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40001800 	.word	0x40001800

08008a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e03f      	b.n	8008ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fd fd98 	bl	800659c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2224      	movs	r2, #36	; 0x24
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fdd1 	bl	800962c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	d165      	bne.n	8008bc2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <HAL_UART_Transmit_DMA+0x26>
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e05e      	b.n	8008bc4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_UART_Transmit_DMA+0x38>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e057      	b.n	8008bc4 <HAL_UART_Transmit_DMA+0xe8>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	88fa      	ldrh	r2, [r7, #6]
 8008b26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	88fa      	ldrh	r2, [r7, #6]
 8008b2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2221      	movs	r2, #33	; 0x21
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b40:	4a22      	ldr	r2, [pc, #136]	; (8008bcc <HAL_UART_Transmit_DMA+0xf0>)
 8008b42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <HAL_UART_Transmit_DMA+0xf4>)
 8008b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b50:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <HAL_UART_Transmit_DMA+0xf8>)
 8008b52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b58:	2200      	movs	r2, #0
 8008b5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	6819      	ldr	r1, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	461a      	mov	r2, r3
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	f7fe f904 	bl	8006d80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	617b      	str	r3, [r7, #20]
   return(result);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008baa:	627a      	str	r2, [r7, #36]	; 0x24
 8008bac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6a39      	ldr	r1, [r7, #32]
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e5      	bne.n	8008b8a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e000      	b.n	8008bc4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008bc2:	2302      	movs	r3, #2
  }
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3730      	adds	r7, #48	; 0x30
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	0800915d 	.word	0x0800915d
 8008bd0:	080091f7 	.word	0x080091f7
 8008bd4:	08009213 	.word	0x08009213

08008bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b0ba      	sub	sp, #232	; 0xe8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10f      	bne.n	8008c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <HAL_UART_IRQHandler+0x66>
 8008c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fc3c 	bl	80094b4 <UART_Receive_IT>
      return;
 8008c3c:	e256      	b.n	80090ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 80de 	beq.w	8008e04 <HAL_UART_IRQHandler+0x22c>
 8008c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80d1 	beq.w	8008e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <HAL_UART_IRQHandler+0xae>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f043 0201 	orr.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <HAL_UART_IRQHandler+0xd2>
 8008c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	f043 0202 	orr.w	r2, r3, #2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00b      	beq.n	8008cce <HAL_UART_IRQHandler+0xf6>
 8008cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d005      	beq.n	8008cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f043 0204 	orr.w	r2, r3, #4
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd2:	f003 0308 	and.w	r3, r3, #8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d011      	beq.n	8008cfe <HAL_UART_IRQHandler+0x126>
 8008cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d105      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	f043 0208 	orr.w	r2, r3, #8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 81ed 	beq.w	80090e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <HAL_UART_IRQHandler+0x14e>
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fbc7 	bl	80094b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	bf0c      	ite	eq
 8008d34:	2301      	moveq	r3, #1
 8008d36:	2300      	movne	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <HAL_UART_IRQHandler+0x17a>
 8008d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d04f      	beq.n	8008df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 facf 	bl	80092f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d141      	bne.n	8008dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3314      	adds	r3, #20
 8008d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1d9      	bne.n	8008d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d013      	beq.n	8008de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	4a7d      	ldr	r2, [pc, #500]	; (8008fb4 <HAL_UART_IRQHandler+0x3dc>)
 8008dc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe f8a2 	bl	8006f10 <HAL_DMA_Abort_IT>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d016      	beq.n	8008e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de0:	e00e      	b.n	8008e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9a4 	bl	8009130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	e00a      	b.n	8008e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9a0 	bl	8009130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df0:	e006      	b.n	8008e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f99c 	bl	8009130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008dfe:	e170      	b.n	80090e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e00:	bf00      	nop
    return;
 8008e02:	e16e      	b.n	80090e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	f040 814a 	bne.w	80090a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8143 	beq.w	80090a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 813c 	beq.w	80090a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60bb      	str	r3, [r7, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60bb      	str	r3, [r7, #8]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	f040 80b4 	bne.w	8008fb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8140 	beq.w	80090e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	f080 8139 	bcs.w	80090e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e86:	f000 8088 	beq.w	8008f9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	330c      	adds	r3, #12
 8008e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1d9      	bne.n	8008e8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3314      	adds	r3, #20
 8008edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008efe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e1      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3314      	adds	r3, #20
 8008f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3314      	adds	r3, #20
 8008f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e3      	bne.n	8008f12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6a:	f023 0310 	bic.w	r3, r3, #16
 8008f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	330c      	adds	r3, #12
 8008f78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e3      	bne.n	8008f58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd ff4b 	bl	8006e30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f8ca 	bl	8009144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fb0:	e099      	b.n	80090e6 <HAL_UART_IRQHandler+0x50e>
 8008fb2:	bf00      	nop
 8008fb4:	080093bd 	.word	0x080093bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 808b 	beq.w	80090ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 8086 	beq.w	80090ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	330c      	adds	r3, #12
 8008fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009002:	647a      	str	r2, [r7, #68]	; 0x44
 8009004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e3      	bne.n	8008fde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3314      	adds	r3, #20
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	623b      	str	r3, [r7, #32]
   return(result);
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3314      	adds	r3, #20
 8009036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800903a:	633a      	str	r2, [r7, #48]	; 0x30
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e3      	bne.n	8009016 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	60fb      	str	r3, [r7, #12]
   return(result);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0310 	bic.w	r3, r3, #16
 8009072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009080:	61fa      	str	r2, [r7, #28]
 8009082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	69b9      	ldr	r1, [r7, #24]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	617b      	str	r3, [r7, #20]
   return(result);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e3      	bne.n	800905c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f852 	bl	8009144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090a0:	e023      	b.n	80090ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d009      	beq.n	80090c2 <HAL_UART_IRQHandler+0x4ea>
 80090ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f992 	bl	80093e4 <UART_Transmit_IT>
    return;
 80090c0:	e014      	b.n	80090ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00e      	beq.n	80090ec <HAL_UART_IRQHandler+0x514>
 80090ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9d2 	bl	8009484 <UART_EndTransmit_IT>
    return;
 80090e0:	e004      	b.n	80090ec <HAL_UART_IRQHandler+0x514>
    return;
 80090e2:	bf00      	nop
 80090e4:	e002      	b.n	80090ec <HAL_UART_IRQHandler+0x514>
      return;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <HAL_UART_IRQHandler+0x514>
      return;
 80090ea:	bf00      	nop
  }
}
 80090ec:	37e8      	adds	r7, #232	; 0xe8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop

080090f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b090      	sub	sp, #64	; 0x40
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d137      	bne.n	80091e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	2200      	movs	r2, #0
 800917c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	623b      	str	r3, [r7, #32]
   return(result);
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009194:	63bb      	str	r3, [r7, #56]	; 0x38
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3314      	adds	r3, #20
 800919c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919e:	633a      	str	r2, [r7, #48]	; 0x30
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e5      	bne.n	800917e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	330c      	adds	r3, #12
 80091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d2:	61fa      	str	r2, [r7, #28]
 80091d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	69b9      	ldr	r1, [r7, #24]
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	617b      	str	r3, [r7, #20]
   return(result);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e5      	bne.n	80091b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091e6:	e002      	b.n	80091ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80091e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80091ea:	f7ff ff83 	bl	80090f4 <HAL_UART_TxCpltCallback>
}
 80091ee:	bf00      	nop
 80091f0:	3740      	adds	r7, #64	; 0x40
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff ff7f 	bl	8009108 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922e:	2b80      	cmp	r3, #128	; 0x80
 8009230:	bf0c      	ite	eq
 8009232:	2301      	moveq	r3, #1
 8009234:	2300      	movne	r3, #0
 8009236:	b2db      	uxtb	r3, r3
 8009238:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b21      	cmp	r3, #33	; 0x21
 8009244:	d108      	bne.n	8009258 <UART_DMAError+0x46>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009252:	68b8      	ldr	r0, [r7, #8]
 8009254:	f000 f827 	bl	80092a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009262:	2b40      	cmp	r3, #64	; 0x40
 8009264:	bf0c      	ite	eq
 8009266:	2301      	moveq	r3, #1
 8009268:	2300      	movne	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b22      	cmp	r3, #34	; 0x22
 8009278:	d108      	bne.n	800928c <UART_DMAError+0x7a>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009286:	68b8      	ldr	r0, [r7, #8]
 8009288:	f000 f835 	bl	80092f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009290:	f043 0210 	orr.w	r2, r3, #16
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009298:	68b8      	ldr	r0, [r7, #8]
 800929a:	f7ff ff49 	bl	8009130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b089      	sub	sp, #36	; 0x24
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	61ba      	str	r2, [r7, #24]
 80092d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	613b      	str	r3, [r7, #16]
   return(result);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80092ea:	bf00      	nop
 80092ec:	3724      	adds	r7, #36	; 0x24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b095      	sub	sp, #84	; 0x54
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800931e:	643a      	str	r2, [r7, #64]	; 0x40
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3314      	adds	r3, #20
 8009338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	61fb      	str	r3, [r7, #28]
   return(result);
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	64bb      	str	r3, [r7, #72]	; 0x48
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	2b01      	cmp	r3, #1
 800936c:	d119      	bne.n	80093a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	60bb      	str	r3, [r7, #8]
   return(result);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f023 0310 	bic.w	r3, r3, #16
 8009384:	647b      	str	r3, [r7, #68]	; 0x44
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800938e:	61ba      	str	r2, [r7, #24]
 8009390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e5      	bne.n	800936e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093b0:	bf00      	nop
 80093b2:	3754      	adds	r7, #84	; 0x54
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff feaa 	bl	8009130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b21      	cmp	r3, #33	; 0x21
 80093f6:	d13e      	bne.n	8009476 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009400:	d114      	bne.n	800942c <UART_Transmit_IT+0x48>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d110      	bne.n	800942c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800941e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	1c9a      	adds	r2, r3, #2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]
 800942a:	e008      	b.n	800943e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	1c59      	adds	r1, r3, #1
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6211      	str	r1, [r2, #32]
 8009436:	781a      	ldrb	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009442:	b29b      	uxth	r3, r3
 8009444:	3b01      	subs	r3, #1
 8009446:	b29b      	uxth	r3, r3
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	4619      	mov	r1, r3
 800944c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10f      	bne.n	8009472 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009460:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009470:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	e000      	b.n	8009478 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009476:	2302      	movs	r3, #2
  }
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff fe25 	bl	80090f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08c      	sub	sp, #48	; 0x30
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b22      	cmp	r3, #34	; 0x22
 80094c6:	f040 80ab 	bne.w	8009620 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d2:	d117      	bne.n	8009504 <UART_Receive_IT+0x50>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d113      	bne.n	8009504 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	1c9a      	adds	r2, r3, #2
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	629a      	str	r2, [r3, #40]	; 0x28
 8009502:	e026      	b.n	8009552 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009516:	d007      	beq.n	8009528 <UART_Receive_IT+0x74>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <UART_Receive_IT+0x82>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	e008      	b.n	8009548 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009542:	b2da      	uxtb	r2, r3
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009556:	b29b      	uxth	r3, r3
 8009558:	3b01      	subs	r3, #1
 800955a:	b29b      	uxth	r3, r3
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	4619      	mov	r1, r3
 8009560:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009562:	2b00      	cmp	r3, #0
 8009564:	d15a      	bne.n	800961c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0220 	bic.w	r2, r2, #32
 8009574:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0201 	bic.w	r2, r2, #1
 8009594:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d135      	bne.n	8009612 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	330c      	adds	r3, #12
 80095b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	e853 3f00 	ldrex	r3, [r3]
 80095ba:	613b      	str	r3, [r7, #16]
   return(result);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f023 0310 	bic.w	r3, r3, #16
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095cc:	623a      	str	r2, [r7, #32]
 80095ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d0:	69f9      	ldr	r1, [r7, #28]
 80095d2:	6a3a      	ldr	r2, [r7, #32]
 80095d4:	e841 2300 	strex	r3, r2, [r1]
 80095d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e5      	bne.n	80095ac <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d10a      	bne.n	8009604 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fd9a 	bl	8009144 <HAL_UARTEx_RxEventCallback>
 8009610:	e002      	b.n	8009618 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff fd82 	bl	800911c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	e002      	b.n	8009622 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	e000      	b.n	8009622 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009620:	2302      	movs	r3, #2
  }
}
 8009622:	4618      	mov	r0, r3
 8009624:	3730      	adds	r7, #48	; 0x30
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b09f      	sub	sp, #124	; 0x7c
 8009632:	af00      	add	r7, sp, #0
 8009634:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009642:	68d9      	ldr	r1, [r3, #12]
 8009644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	ea40 0301 	orr.w	r3, r0, r1
 800964c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	431a      	orrs	r2, r3
 8009658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	431a      	orrs	r2, r3
 800965e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	4313      	orrs	r3, r2
 8009664:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009670:	f021 010c 	bic.w	r1, r1, #12
 8009674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800967a:	430b      	orrs	r3, r1
 800967c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800967e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968a:	6999      	ldr	r1, [r3, #24]
 800968c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	ea40 0301 	orr.w	r3, r0, r1
 8009694:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4bc5      	ldr	r3, [pc, #788]	; (80099b0 <UART_SetConfig+0x384>)
 800969c:	429a      	cmp	r2, r3
 800969e:	d004      	beq.n	80096aa <UART_SetConfig+0x7e>
 80096a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	4bc3      	ldr	r3, [pc, #780]	; (80099b4 <UART_SetConfig+0x388>)
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d103      	bne.n	80096b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096aa:	f7fe fd33 	bl	8008114 <HAL_RCC_GetPCLK2Freq>
 80096ae:	6778      	str	r0, [r7, #116]	; 0x74
 80096b0:	e002      	b.n	80096b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096b2:	f7fe fd1b 	bl	80080ec <HAL_RCC_GetPCLK1Freq>
 80096b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c0:	f040 80b6 	bne.w	8009830 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c6:	461c      	mov	r4, r3
 80096c8:	f04f 0500 	mov.w	r5, #0
 80096cc:	4622      	mov	r2, r4
 80096ce:	462b      	mov	r3, r5
 80096d0:	1891      	adds	r1, r2, r2
 80096d2:	6439      	str	r1, [r7, #64]	; 0x40
 80096d4:	415b      	adcs	r3, r3
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
 80096d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096dc:	1912      	adds	r2, r2, r4
 80096de:	eb45 0303 	adc.w	r3, r5, r3
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f04f 0100 	mov.w	r1, #0
 80096ea:	00d9      	lsls	r1, r3, #3
 80096ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096f0:	00d0      	lsls	r0, r2, #3
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	1911      	adds	r1, r2, r4
 80096f8:	6639      	str	r1, [r7, #96]	; 0x60
 80096fa:	416b      	adcs	r3, r5
 80096fc:	667b      	str	r3, [r7, #100]	; 0x64
 80096fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	461a      	mov	r2, r3
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	1891      	adds	r1, r2, r2
 800970a:	63b9      	str	r1, [r7, #56]	; 0x38
 800970c:	415b      	adcs	r3, r3
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009714:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009718:	f7f7 f806 	bl	8000728 <__aeabi_uldivmod>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4ba5      	ldr	r3, [pc, #660]	; (80099b8 <UART_SetConfig+0x38c>)
 8009722:	fba3 2302 	umull	r2, r3, r3, r2
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	011e      	lsls	r6, r3, #4
 800972a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800972c:	461c      	mov	r4, r3
 800972e:	f04f 0500 	mov.w	r5, #0
 8009732:	4622      	mov	r2, r4
 8009734:	462b      	mov	r3, r5
 8009736:	1891      	adds	r1, r2, r2
 8009738:	6339      	str	r1, [r7, #48]	; 0x30
 800973a:	415b      	adcs	r3, r3
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
 800973e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009742:	1912      	adds	r2, r2, r4
 8009744:	eb45 0303 	adc.w	r3, r5, r3
 8009748:	f04f 0000 	mov.w	r0, #0
 800974c:	f04f 0100 	mov.w	r1, #0
 8009750:	00d9      	lsls	r1, r3, #3
 8009752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009756:	00d0      	lsls	r0, r2, #3
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	1911      	adds	r1, r2, r4
 800975e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009760:	416b      	adcs	r3, r5
 8009762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	461a      	mov	r2, r3
 800976a:	f04f 0300 	mov.w	r3, #0
 800976e:	1891      	adds	r1, r2, r2
 8009770:	62b9      	str	r1, [r7, #40]	; 0x28
 8009772:	415b      	adcs	r3, r3
 8009774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800977a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800977e:	f7f6 ffd3 	bl	8000728 <__aeabi_uldivmod>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4b8c      	ldr	r3, [pc, #560]	; (80099b8 <UART_SetConfig+0x38c>)
 8009788:	fba3 1302 	umull	r1, r3, r3, r2
 800978c:	095b      	lsrs	r3, r3, #5
 800978e:	2164      	movs	r1, #100	; 0x64
 8009790:	fb01 f303 	mul.w	r3, r1, r3
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	3332      	adds	r3, #50	; 0x32
 800979a:	4a87      	ldr	r2, [pc, #540]	; (80099b8 <UART_SetConfig+0x38c>)
 800979c:	fba2 2303 	umull	r2, r3, r2, r3
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097a8:	441e      	add	r6, r3
 80097aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ac:	4618      	mov	r0, r3
 80097ae:	f04f 0100 	mov.w	r1, #0
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	1894      	adds	r4, r2, r2
 80097b8:	623c      	str	r4, [r7, #32]
 80097ba:	415b      	adcs	r3, r3
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
 80097be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097c2:	1812      	adds	r2, r2, r0
 80097c4:	eb41 0303 	adc.w	r3, r1, r3
 80097c8:	f04f 0400 	mov.w	r4, #0
 80097cc:	f04f 0500 	mov.w	r5, #0
 80097d0:	00dd      	lsls	r5, r3, #3
 80097d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097d6:	00d4      	lsls	r4, r2, #3
 80097d8:	4622      	mov	r2, r4
 80097da:	462b      	mov	r3, r5
 80097dc:	1814      	adds	r4, r2, r0
 80097de:	653c      	str	r4, [r7, #80]	; 0x50
 80097e0:	414b      	adcs	r3, r1
 80097e2:	657b      	str	r3, [r7, #84]	; 0x54
 80097e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	461a      	mov	r2, r3
 80097ea:	f04f 0300 	mov.w	r3, #0
 80097ee:	1891      	adds	r1, r2, r2
 80097f0:	61b9      	str	r1, [r7, #24]
 80097f2:	415b      	adcs	r3, r3
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80097fe:	f7f6 ff93 	bl	8000728 <__aeabi_uldivmod>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4b6c      	ldr	r3, [pc, #432]	; (80099b8 <UART_SetConfig+0x38c>)
 8009808:	fba3 1302 	umull	r1, r3, r3, r2
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	2164      	movs	r1, #100	; 0x64
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	3332      	adds	r3, #50	; 0x32
 800981a:	4a67      	ldr	r2, [pc, #412]	; (80099b8 <UART_SetConfig+0x38c>)
 800981c:	fba2 2303 	umull	r2, r3, r2, r3
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	f003 0207 	and.w	r2, r3, #7
 8009826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4432      	add	r2, r6
 800982c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800982e:	e0b9      	b.n	80099a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009832:	461c      	mov	r4, r3
 8009834:	f04f 0500 	mov.w	r5, #0
 8009838:	4622      	mov	r2, r4
 800983a:	462b      	mov	r3, r5
 800983c:	1891      	adds	r1, r2, r2
 800983e:	6139      	str	r1, [r7, #16]
 8009840:	415b      	adcs	r3, r3
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009848:	1912      	adds	r2, r2, r4
 800984a:	eb45 0303 	adc.w	r3, r5, r3
 800984e:	f04f 0000 	mov.w	r0, #0
 8009852:	f04f 0100 	mov.w	r1, #0
 8009856:	00d9      	lsls	r1, r3, #3
 8009858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800985c:	00d0      	lsls	r0, r2, #3
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	eb12 0804 	adds.w	r8, r2, r4
 8009866:	eb43 0905 	adc.w	r9, r3, r5
 800986a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4618      	mov	r0, r3
 8009870:	f04f 0100 	mov.w	r1, #0
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	008b      	lsls	r3, r1, #2
 800987e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009882:	0082      	lsls	r2, r0, #2
 8009884:	4640      	mov	r0, r8
 8009886:	4649      	mov	r1, r9
 8009888:	f7f6 ff4e 	bl	8000728 <__aeabi_uldivmod>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4b49      	ldr	r3, [pc, #292]	; (80099b8 <UART_SetConfig+0x38c>)
 8009892:	fba3 2302 	umull	r2, r3, r3, r2
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	011e      	lsls	r6, r3, #4
 800989a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800989c:	4618      	mov	r0, r3
 800989e:	f04f 0100 	mov.w	r1, #0
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	1894      	adds	r4, r2, r2
 80098a8:	60bc      	str	r4, [r7, #8]
 80098aa:	415b      	adcs	r3, r3
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098b2:	1812      	adds	r2, r2, r0
 80098b4:	eb41 0303 	adc.w	r3, r1, r3
 80098b8:	f04f 0400 	mov.w	r4, #0
 80098bc:	f04f 0500 	mov.w	r5, #0
 80098c0:	00dd      	lsls	r5, r3, #3
 80098c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098c6:	00d4      	lsls	r4, r2, #3
 80098c8:	4622      	mov	r2, r4
 80098ca:	462b      	mov	r3, r5
 80098cc:	1814      	adds	r4, r2, r0
 80098ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80098d0:	414b      	adcs	r3, r1
 80098d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4618      	mov	r0, r3
 80098da:	f04f 0100 	mov.w	r1, #0
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	f04f 0300 	mov.w	r3, #0
 80098e6:	008b      	lsls	r3, r1, #2
 80098e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098ec:	0082      	lsls	r2, r0, #2
 80098ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80098f2:	f7f6 ff19 	bl	8000728 <__aeabi_uldivmod>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4b2f      	ldr	r3, [pc, #188]	; (80099b8 <UART_SetConfig+0x38c>)
 80098fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2164      	movs	r1, #100	; 0x64
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a2a      	ldr	r2, [pc, #168]	; (80099b8 <UART_SetConfig+0x38c>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991a:	441e      	add	r6, r3
 800991c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800991e:	4618      	mov	r0, r3
 8009920:	f04f 0100 	mov.w	r1, #0
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	1894      	adds	r4, r2, r2
 800992a:	603c      	str	r4, [r7, #0]
 800992c:	415b      	adcs	r3, r3
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009934:	1812      	adds	r2, r2, r0
 8009936:	eb41 0303 	adc.w	r3, r1, r3
 800993a:	f04f 0400 	mov.w	r4, #0
 800993e:	f04f 0500 	mov.w	r5, #0
 8009942:	00dd      	lsls	r5, r3, #3
 8009944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009948:	00d4      	lsls	r4, r2, #3
 800994a:	4622      	mov	r2, r4
 800994c:	462b      	mov	r3, r5
 800994e:	eb12 0a00 	adds.w	sl, r2, r0
 8009952:	eb43 0b01 	adc.w	fp, r3, r1
 8009956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	f04f 0100 	mov.w	r1, #0
 8009960:	f04f 0200 	mov.w	r2, #0
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	008b      	lsls	r3, r1, #2
 800996a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800996e:	0082      	lsls	r2, r0, #2
 8009970:	4650      	mov	r0, sl
 8009972:	4659      	mov	r1, fp
 8009974:	f7f6 fed8 	bl	8000728 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <UART_SetConfig+0x38c>)
 800997e:	fba3 1302 	umull	r1, r3, r3, r2
 8009982:	095b      	lsrs	r3, r3, #5
 8009984:	2164      	movs	r1, #100	; 0x64
 8009986:	fb01 f303 	mul.w	r3, r1, r3
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	3332      	adds	r3, #50	; 0x32
 8009990:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <UART_SetConfig+0x38c>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	f003 020f 	and.w	r2, r3, #15
 800999c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4432      	add	r2, r6
 80099a2:	609a      	str	r2, [r3, #8]
}
 80099a4:	bf00      	nop
 80099a6:	377c      	adds	r7, #124	; 0x7c
 80099a8:	46bd      	mov	sp, r7
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	bf00      	nop
 80099b0:	40011000 	.word	0x40011000
 80099b4:	40011400 	.word	0x40011400
 80099b8:	51eb851f 	.word	0x51eb851f

080099bc <__cxa_pure_virtual>:
 80099bc:	b508      	push	{r3, lr}
 80099be:	f000 f80d 	bl	80099dc <_ZSt9terminatev>

080099c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80099c2:	b508      	push	{r3, lr}
 80099c4:	4780      	blx	r0
 80099c6:	f000 f80e 	bl	80099e6 <abort>
	...

080099cc <_ZSt13get_terminatev>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <_ZSt13get_terminatev+0xc>)
 80099ce:	6818      	ldr	r0, [r3, #0]
 80099d0:	f3bf 8f5b 	dmb	ish
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000014 	.word	0x20000014

080099dc <_ZSt9terminatev>:
 80099dc:	b508      	push	{r3, lr}
 80099de:	f7ff fff5 	bl	80099cc <_ZSt13get_terminatev>
 80099e2:	f7ff ffee 	bl	80099c2 <_ZN10__cxxabiv111__terminateEPFvvE>

080099e6 <abort>:
 80099e6:	b508      	push	{r3, lr}
 80099e8:	2006      	movs	r0, #6
 80099ea:	f000 f873 	bl	8009ad4 <raise>
 80099ee:	2001      	movs	r0, #1
 80099f0:	f7fc fef4 	bl	80067dc <_exit>

080099f4 <__errno>:
 80099f4:	4b01      	ldr	r3, [pc, #4]	; (80099fc <__errno+0x8>)
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000018 	.word	0x20000018

08009a00 <__libc_init_array>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	4d0d      	ldr	r5, [pc, #52]	; (8009a38 <__libc_init_array+0x38>)
 8009a04:	4c0d      	ldr	r4, [pc, #52]	; (8009a3c <__libc_init_array+0x3c>)
 8009a06:	1b64      	subs	r4, r4, r5
 8009a08:	10a4      	asrs	r4, r4, #2
 8009a0a:	2600      	movs	r6, #0
 8009a0c:	42a6      	cmp	r6, r4
 8009a0e:	d109      	bne.n	8009a24 <__libc_init_array+0x24>
 8009a10:	4d0b      	ldr	r5, [pc, #44]	; (8009a40 <__libc_init_array+0x40>)
 8009a12:	4c0c      	ldr	r4, [pc, #48]	; (8009a44 <__libc_init_array+0x44>)
 8009a14:	f000 fca2 	bl	800a35c <_init>
 8009a18:	1b64      	subs	r4, r4, r5
 8009a1a:	10a4      	asrs	r4, r4, #2
 8009a1c:	2600      	movs	r6, #0
 8009a1e:	42a6      	cmp	r6, r4
 8009a20:	d105      	bne.n	8009a2e <__libc_init_array+0x2e>
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a28:	4798      	blx	r3
 8009a2a:	3601      	adds	r6, #1
 8009a2c:	e7ee      	b.n	8009a0c <__libc_init_array+0xc>
 8009a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a32:	4798      	blx	r3
 8009a34:	3601      	adds	r6, #1
 8009a36:	e7f2      	b.n	8009a1e <__libc_init_array+0x1e>
 8009a38:	0800af1c 	.word	0x0800af1c
 8009a3c:	0800af1c 	.word	0x0800af1c
 8009a40:	0800af1c 	.word	0x0800af1c
 8009a44:	0800af24 	.word	0x0800af24

08009a48 <memcpy>:
 8009a48:	440a      	add	r2, r1
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a50:	d100      	bne.n	8009a54 <memcpy+0xc>
 8009a52:	4770      	bx	lr
 8009a54:	b510      	push	{r4, lr}
 8009a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5e:	4291      	cmp	r1, r2
 8009a60:	d1f9      	bne.n	8009a56 <memcpy+0xe>
 8009a62:	bd10      	pop	{r4, pc}

08009a64 <memset>:
 8009a64:	4402      	add	r2, r0
 8009a66:	4603      	mov	r3, r0
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d100      	bne.n	8009a6e <memset+0xa>
 8009a6c:	4770      	bx	lr
 8009a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a72:	e7f9      	b.n	8009a68 <memset+0x4>

08009a74 <realloc>:
 8009a74:	4b02      	ldr	r3, [pc, #8]	; (8009a80 <realloc+0xc>)
 8009a76:	460a      	mov	r2, r1
 8009a78:	4601      	mov	r1, r0
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	f000 b8c8 	b.w	8009c10 <_realloc_r>
 8009a80:	20000018 	.word	0x20000018

08009a84 <_raise_r>:
 8009a84:	291f      	cmp	r1, #31
 8009a86:	b538      	push	{r3, r4, r5, lr}
 8009a88:	4604      	mov	r4, r0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	d904      	bls.n	8009a98 <_raise_r+0x14>
 8009a8e:	2316      	movs	r3, #22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a9a:	b112      	cbz	r2, 8009aa2 <_raise_r+0x1e>
 8009a9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009aa0:	b94b      	cbnz	r3, 8009ab6 <_raise_r+0x32>
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f830 	bl	8009b08 <_getpid_r>
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4620      	mov	r0, r4
 8009aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab2:	f000 b817 	b.w	8009ae4 <_kill_r>
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d00a      	beq.n	8009ad0 <_raise_r+0x4c>
 8009aba:	1c59      	adds	r1, r3, #1
 8009abc:	d103      	bne.n	8009ac6 <_raise_r+0x42>
 8009abe:	2316      	movs	r3, #22
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	e7e7      	b.n	8009a96 <_raise_r+0x12>
 8009ac6:	2400      	movs	r4, #0
 8009ac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009acc:	4628      	mov	r0, r5
 8009ace:	4798      	blx	r3
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e7e0      	b.n	8009a96 <_raise_r+0x12>

08009ad4 <raise>:
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <raise+0xc>)
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	f7ff bfd3 	b.w	8009a84 <_raise_r>
 8009ade:	bf00      	nop
 8009ae0:	20000018 	.word	0x20000018

08009ae4 <_kill_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	; (8009b04 <_kill_r+0x20>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f7fc fe63 	bl	80067bc <_kill>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	d102      	bne.n	8009b00 <_kill_r+0x1c>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	b103      	cbz	r3, 8009b00 <_kill_r+0x1c>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	200011b0 	.word	0x200011b0

08009b08 <_getpid_r>:
 8009b08:	f7fc be50 	b.w	80067ac <_getpid>

08009b0c <siprintf>:
 8009b0c:	b40e      	push	{r1, r2, r3}
 8009b0e:	b500      	push	{lr}
 8009b10:	b09c      	sub	sp, #112	; 0x70
 8009b12:	ab1d      	add	r3, sp, #116	; 0x74
 8009b14:	9002      	str	r0, [sp, #8]
 8009b16:	9006      	str	r0, [sp, #24]
 8009b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b1c:	4809      	ldr	r0, [pc, #36]	; (8009b44 <siprintf+0x38>)
 8009b1e:	9107      	str	r1, [sp, #28]
 8009b20:	9104      	str	r1, [sp, #16]
 8009b22:	4909      	ldr	r1, [pc, #36]	; (8009b48 <siprintf+0x3c>)
 8009b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b28:	9105      	str	r1, [sp, #20]
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	a902      	add	r1, sp, #8
 8009b30:	f000 f8f0 	bl	8009d14 <_svfiprintf_r>
 8009b34:	9b02      	ldr	r3, [sp, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	b01c      	add	sp, #112	; 0x70
 8009b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b40:	b003      	add	sp, #12
 8009b42:	4770      	bx	lr
 8009b44:	20000018 	.word	0x20000018
 8009b48:	ffff0208 	.word	0xffff0208

08009b4c <strcpy>:
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b52:	f803 2b01 	strb.w	r2, [r3], #1
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	d1f9      	bne.n	8009b4e <strcpy+0x2>
 8009b5a:	4770      	bx	lr

08009b5c <_malloc_r>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	1ccd      	adds	r5, r1, #3
 8009b60:	f025 0503 	bic.w	r5, r5, #3
 8009b64:	3508      	adds	r5, #8
 8009b66:	2d0c      	cmp	r5, #12
 8009b68:	bf38      	it	cc
 8009b6a:	250c      	movcc	r5, #12
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	4606      	mov	r6, r0
 8009b70:	db01      	blt.n	8009b76 <_malloc_r+0x1a>
 8009b72:	42a9      	cmp	r1, r5
 8009b74:	d903      	bls.n	8009b7e <_malloc_r+0x22>
 8009b76:	230c      	movs	r3, #12
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7e:	f000 fb87 	bl	800a290 <__malloc_lock>
 8009b82:	4921      	ldr	r1, [pc, #132]	; (8009c08 <_malloc_r+0xac>)
 8009b84:	680a      	ldr	r2, [r1, #0]
 8009b86:	4614      	mov	r4, r2
 8009b88:	b99c      	cbnz	r4, 8009bb2 <_malloc_r+0x56>
 8009b8a:	4f20      	ldr	r7, [pc, #128]	; (8009c0c <_malloc_r+0xb0>)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	b923      	cbnz	r3, 8009b9a <_malloc_r+0x3e>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4630      	mov	r0, r6
 8009b94:	f000 fb52 	bl	800a23c <_sbrk_r>
 8009b98:	6038      	str	r0, [r7, #0]
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 fb4d 	bl	800a23c <_sbrk_r>
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d123      	bne.n	8009bee <_malloc_r+0x92>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 fb76 	bl	800a29c <__malloc_unlock>
 8009bb0:	e7e3      	b.n	8009b7a <_malloc_r+0x1e>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	1b5b      	subs	r3, r3, r5
 8009bb6:	d417      	bmi.n	8009be8 <_malloc_r+0x8c>
 8009bb8:	2b0b      	cmp	r3, #11
 8009bba:	d903      	bls.n	8009bc4 <_malloc_r+0x68>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	441c      	add	r4, r3
 8009bc0:	6025      	str	r5, [r4, #0]
 8009bc2:	e004      	b.n	8009bce <_malloc_r+0x72>
 8009bc4:	6863      	ldr	r3, [r4, #4]
 8009bc6:	42a2      	cmp	r2, r4
 8009bc8:	bf0c      	ite	eq
 8009bca:	600b      	streq	r3, [r1, #0]
 8009bcc:	6053      	strne	r3, [r2, #4]
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f000 fb64 	bl	800a29c <__malloc_unlock>
 8009bd4:	f104 000b 	add.w	r0, r4, #11
 8009bd8:	1d23      	adds	r3, r4, #4
 8009bda:	f020 0007 	bic.w	r0, r0, #7
 8009bde:	1ac2      	subs	r2, r0, r3
 8009be0:	d0cc      	beq.n	8009b7c <_malloc_r+0x20>
 8009be2:	1a1b      	subs	r3, r3, r0
 8009be4:	50a3      	str	r3, [r4, r2]
 8009be6:	e7c9      	b.n	8009b7c <_malloc_r+0x20>
 8009be8:	4622      	mov	r2, r4
 8009bea:	6864      	ldr	r4, [r4, #4]
 8009bec:	e7cc      	b.n	8009b88 <_malloc_r+0x2c>
 8009bee:	1cc4      	adds	r4, r0, #3
 8009bf0:	f024 0403 	bic.w	r4, r4, #3
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d0e3      	beq.n	8009bc0 <_malloc_r+0x64>
 8009bf8:	1a21      	subs	r1, r4, r0
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f000 fb1e 	bl	800a23c <_sbrk_r>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d1dd      	bne.n	8009bc0 <_malloc_r+0x64>
 8009c04:	e7cf      	b.n	8009ba6 <_malloc_r+0x4a>
 8009c06:	bf00      	nop
 8009c08:	20001058 	.word	0x20001058
 8009c0c:	2000105c 	.word	0x2000105c

08009c10 <_realloc_r>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4607      	mov	r7, r0
 8009c14:	4614      	mov	r4, r2
 8009c16:	460e      	mov	r6, r1
 8009c18:	b921      	cbnz	r1, 8009c24 <_realloc_r+0x14>
 8009c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c1e:	4611      	mov	r1, r2
 8009c20:	f7ff bf9c 	b.w	8009b5c <_malloc_r>
 8009c24:	b922      	cbnz	r2, 8009c30 <_realloc_r+0x20>
 8009c26:	f000 fb3f 	bl	800a2a8 <_free_r>
 8009c2a:	4625      	mov	r5, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c30:	f000 fb8a 	bl	800a348 <_malloc_usable_size_r>
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d20f      	bcs.n	8009c58 <_realloc_r+0x48>
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f7ff ff8e 	bl	8009b5c <_malloc_r>
 8009c40:	4605      	mov	r5, r0
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d0f2      	beq.n	8009c2c <_realloc_r+0x1c>
 8009c46:	4631      	mov	r1, r6
 8009c48:	4622      	mov	r2, r4
 8009c4a:	f7ff fefd 	bl	8009a48 <memcpy>
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4638      	mov	r0, r7
 8009c52:	f000 fb29 	bl	800a2a8 <_free_r>
 8009c56:	e7e9      	b.n	8009c2c <_realloc_r+0x1c>
 8009c58:	4635      	mov	r5, r6
 8009c5a:	e7e7      	b.n	8009c2c <_realloc_r+0x1c>

08009c5c <__ssputs_r>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	688e      	ldr	r6, [r1, #8]
 8009c62:	429e      	cmp	r6, r3
 8009c64:	4682      	mov	sl, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	4690      	mov	r8, r2
 8009c6a:	461f      	mov	r7, r3
 8009c6c:	d838      	bhi.n	8009ce0 <__ssputs_r+0x84>
 8009c6e:	898a      	ldrh	r2, [r1, #12]
 8009c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c74:	d032      	beq.n	8009cdc <__ssputs_r+0x80>
 8009c76:	6825      	ldr	r5, [r4, #0]
 8009c78:	6909      	ldr	r1, [r1, #16]
 8009c7a:	eba5 0901 	sub.w	r9, r5, r1
 8009c7e:	6965      	ldr	r5, [r4, #20]
 8009c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c88:	3301      	adds	r3, #1
 8009c8a:	444b      	add	r3, r9
 8009c8c:	106d      	asrs	r5, r5, #1
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	bf38      	it	cc
 8009c92:	461d      	movcc	r5, r3
 8009c94:	0553      	lsls	r3, r2, #21
 8009c96:	d531      	bpl.n	8009cfc <__ssputs_r+0xa0>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7ff ff5f 	bl	8009b5c <_malloc_r>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	b950      	cbnz	r0, 8009cb8 <__ssputs_r+0x5c>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	f8ca 3000 	str.w	r3, [sl]
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cae:	81a3      	strh	r3, [r4, #12]
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	6921      	ldr	r1, [r4, #16]
 8009cba:	464a      	mov	r2, r9
 8009cbc:	f7ff fec4 	bl	8009a48 <memcpy>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	6126      	str	r6, [r4, #16]
 8009cce:	6165      	str	r5, [r4, #20]
 8009cd0:	444e      	add	r6, r9
 8009cd2:	eba5 0509 	sub.w	r5, r5, r9
 8009cd6:	6026      	str	r6, [r4, #0]
 8009cd8:	60a5      	str	r5, [r4, #8]
 8009cda:	463e      	mov	r6, r7
 8009cdc:	42be      	cmp	r6, r7
 8009cde:	d900      	bls.n	8009ce2 <__ssputs_r+0x86>
 8009ce0:	463e      	mov	r6, r7
 8009ce2:	4632      	mov	r2, r6
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	f000 fab8 	bl	800a25c <memmove>
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	6822      	ldr	r2, [r4, #0]
 8009cf0:	1b9b      	subs	r3, r3, r6
 8009cf2:	4432      	add	r2, r6
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	6022      	str	r2, [r4, #0]
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7db      	b.n	8009cb4 <__ssputs_r+0x58>
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	f7ff ff87 	bl	8009c10 <_realloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1e1      	bne.n	8009ccc <__ssputs_r+0x70>
 8009d08:	6921      	ldr	r1, [r4, #16]
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	f000 facc 	bl	800a2a8 <_free_r>
 8009d10:	e7c7      	b.n	8009ca2 <__ssputs_r+0x46>
	...

08009d14 <_svfiprintf_r>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	4698      	mov	r8, r3
 8009d1a:	898b      	ldrh	r3, [r1, #12]
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	b09d      	sub	sp, #116	; 0x74
 8009d20:	4607      	mov	r7, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	4614      	mov	r4, r2
 8009d26:	d50e      	bpl.n	8009d46 <_svfiprintf_r+0x32>
 8009d28:	690b      	ldr	r3, [r1, #16]
 8009d2a:	b963      	cbnz	r3, 8009d46 <_svfiprintf_r+0x32>
 8009d2c:	2140      	movs	r1, #64	; 0x40
 8009d2e:	f7ff ff15 	bl	8009b5c <_malloc_r>
 8009d32:	6028      	str	r0, [r5, #0]
 8009d34:	6128      	str	r0, [r5, #16]
 8009d36:	b920      	cbnz	r0, 8009d42 <_svfiprintf_r+0x2e>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	e0d1      	b.n	8009ee6 <_svfiprintf_r+0x1d2>
 8009d42:	2340      	movs	r3, #64	; 0x40
 8009d44:	616b      	str	r3, [r5, #20]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d54:	2330      	movs	r3, #48	; 0x30
 8009d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f00 <_svfiprintf_r+0x1ec>
 8009d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d5e:	f04f 0901 	mov.w	r9, #1
 8009d62:	4623      	mov	r3, r4
 8009d64:	469a      	mov	sl, r3
 8009d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6a:	b10a      	cbz	r2, 8009d70 <_svfiprintf_r+0x5c>
 8009d6c:	2a25      	cmp	r2, #37	; 0x25
 8009d6e:	d1f9      	bne.n	8009d64 <_svfiprintf_r+0x50>
 8009d70:	ebba 0b04 	subs.w	fp, sl, r4
 8009d74:	d00b      	beq.n	8009d8e <_svfiprintf_r+0x7a>
 8009d76:	465b      	mov	r3, fp
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff ff6d 	bl	8009c5c <__ssputs_r>
 8009d82:	3001      	adds	r0, #1
 8009d84:	f000 80aa 	beq.w	8009edc <_svfiprintf_r+0x1c8>
 8009d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d8a:	445a      	add	r2, fp
 8009d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80a2 	beq.w	8009edc <_svfiprintf_r+0x1c8>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da2:	f10a 0a01 	add.w	sl, sl, #1
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	9307      	str	r3, [sp, #28]
 8009daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dae:	931a      	str	r3, [sp, #104]	; 0x68
 8009db0:	4654      	mov	r4, sl
 8009db2:	2205      	movs	r2, #5
 8009db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db8:	4851      	ldr	r0, [pc, #324]	; (8009f00 <_svfiprintf_r+0x1ec>)
 8009dba:	f7f6 fa21 	bl	8000200 <memchr>
 8009dbe:	9a04      	ldr	r2, [sp, #16]
 8009dc0:	b9d8      	cbnz	r0, 8009dfa <_svfiprintf_r+0xe6>
 8009dc2:	06d0      	lsls	r0, r2, #27
 8009dc4:	bf44      	itt	mi
 8009dc6:	2320      	movmi	r3, #32
 8009dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dcc:	0711      	lsls	r1, r2, #28
 8009dce:	bf44      	itt	mi
 8009dd0:	232b      	movmi	r3, #43	; 0x2b
 8009dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dda:	2b2a      	cmp	r3, #42	; 0x2a
 8009ddc:	d015      	beq.n	8009e0a <_svfiprintf_r+0xf6>
 8009dde:	9a07      	ldr	r2, [sp, #28]
 8009de0:	4654      	mov	r4, sl
 8009de2:	2000      	movs	r0, #0
 8009de4:	f04f 0c0a 	mov.w	ip, #10
 8009de8:	4621      	mov	r1, r4
 8009dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dee:	3b30      	subs	r3, #48	; 0x30
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d94e      	bls.n	8009e92 <_svfiprintf_r+0x17e>
 8009df4:	b1b0      	cbz	r0, 8009e24 <_svfiprintf_r+0x110>
 8009df6:	9207      	str	r2, [sp, #28]
 8009df8:	e014      	b.n	8009e24 <_svfiprintf_r+0x110>
 8009dfa:	eba0 0308 	sub.w	r3, r0, r8
 8009dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009e02:	4313      	orrs	r3, r2
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	46a2      	mov	sl, r4
 8009e08:	e7d2      	b.n	8009db0 <_svfiprintf_r+0x9c>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	1d19      	adds	r1, r3, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfbb      	ittet	lt
 8009e16:	425b      	neglt	r3, r3
 8009e18:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1c:	9307      	strge	r3, [sp, #28]
 8009e1e:	9307      	strlt	r3, [sp, #28]
 8009e20:	bfb8      	it	lt
 8009e22:	9204      	strlt	r2, [sp, #16]
 8009e24:	7823      	ldrb	r3, [r4, #0]
 8009e26:	2b2e      	cmp	r3, #46	; 0x2e
 8009e28:	d10c      	bne.n	8009e44 <_svfiprintf_r+0x130>
 8009e2a:	7863      	ldrb	r3, [r4, #1]
 8009e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2e:	d135      	bne.n	8009e9c <_svfiprintf_r+0x188>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	1d1a      	adds	r2, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	9203      	str	r2, [sp, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bfb8      	it	lt
 8009e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e40:	3402      	adds	r4, #2
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f10 <_svfiprintf_r+0x1fc>
 8009e48:	7821      	ldrb	r1, [r4, #0]
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	f7f6 f9d7 	bl	8000200 <memchr>
 8009e52:	b140      	cbz	r0, 8009e66 <_svfiprintf_r+0x152>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	eba0 000a 	sub.w	r0, r0, sl
 8009e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	4303      	orrs	r3, r0
 8009e62:	3401      	adds	r4, #1
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6a:	4826      	ldr	r0, [pc, #152]	; (8009f04 <_svfiprintf_r+0x1f0>)
 8009e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e70:	2206      	movs	r2, #6
 8009e72:	f7f6 f9c5 	bl	8000200 <memchr>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d038      	beq.n	8009eec <_svfiprintf_r+0x1d8>
 8009e7a:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <_svfiprintf_r+0x1f4>)
 8009e7c:	bb1b      	cbnz	r3, 8009ec6 <_svfiprintf_r+0x1b2>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	3307      	adds	r3, #7
 8009e82:	f023 0307 	bic.w	r3, r3, #7
 8009e86:	3308      	adds	r3, #8
 8009e88:	9303      	str	r3, [sp, #12]
 8009e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8c:	4433      	add	r3, r6
 8009e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e90:	e767      	b.n	8009d62 <_svfiprintf_r+0x4e>
 8009e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e96:	460c      	mov	r4, r1
 8009e98:	2001      	movs	r0, #1
 8009e9a:	e7a5      	b.n	8009de8 <_svfiprintf_r+0xd4>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	3401      	adds	r4, #1
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f04f 0c0a 	mov.w	ip, #10
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eae:	3a30      	subs	r2, #48	; 0x30
 8009eb0:	2a09      	cmp	r2, #9
 8009eb2:	d903      	bls.n	8009ebc <_svfiprintf_r+0x1a8>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0c5      	beq.n	8009e44 <_svfiprintf_r+0x130>
 8009eb8:	9105      	str	r1, [sp, #20]
 8009eba:	e7c3      	b.n	8009e44 <_svfiprintf_r+0x130>
 8009ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f0      	b.n	8009ea8 <_svfiprintf_r+0x194>
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <_svfiprintf_r+0x1f8>)
 8009ece:	a904      	add	r1, sp, #16
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f3af 8000 	nop.w
 8009ed6:	1c42      	adds	r2, r0, #1
 8009ed8:	4606      	mov	r6, r0
 8009eda:	d1d6      	bne.n	8009e8a <_svfiprintf_r+0x176>
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	065b      	lsls	r3, r3, #25
 8009ee0:	f53f af2c 	bmi.w	8009d3c <_svfiprintf_r+0x28>
 8009ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee6:	b01d      	add	sp, #116	; 0x74
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <_svfiprintf_r+0x1f8>)
 8009ef4:	a904      	add	r1, sp, #16
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f000 f87a 	bl	8009ff0 <_printf_i>
 8009efc:	e7eb      	b.n	8009ed6 <_svfiprintf_r+0x1c2>
 8009efe:	bf00      	nop
 8009f00:	0800aee0 	.word	0x0800aee0
 8009f04:	0800aeea 	.word	0x0800aeea
 8009f08:	00000000 	.word	0x00000000
 8009f0c:	08009c5d 	.word	0x08009c5d
 8009f10:	0800aee6 	.word	0x0800aee6

08009f14 <_printf_common>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	4616      	mov	r6, r2
 8009f1a:	4699      	mov	r9, r3
 8009f1c:	688a      	ldr	r2, [r1, #8]
 8009f1e:	690b      	ldr	r3, [r1, #16]
 8009f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	bfb8      	it	lt
 8009f28:	4613      	movlt	r3, r2
 8009f2a:	6033      	str	r3, [r6, #0]
 8009f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f30:	4607      	mov	r7, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b10a      	cbz	r2, 8009f3a <_printf_common+0x26>
 8009f36:	3301      	adds	r3, #1
 8009f38:	6033      	str	r3, [r6, #0]
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	0699      	lsls	r1, r3, #26
 8009f3e:	bf42      	ittt	mi
 8009f40:	6833      	ldrmi	r3, [r6, #0]
 8009f42:	3302      	addmi	r3, #2
 8009f44:	6033      	strmi	r3, [r6, #0]
 8009f46:	6825      	ldr	r5, [r4, #0]
 8009f48:	f015 0506 	ands.w	r5, r5, #6
 8009f4c:	d106      	bne.n	8009f5c <_printf_common+0x48>
 8009f4e:	f104 0a19 	add.w	sl, r4, #25
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	6832      	ldr	r2, [r6, #0]
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	dc26      	bgt.n	8009faa <_printf_common+0x96>
 8009f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f60:	1e13      	subs	r3, r2, #0
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	bf18      	it	ne
 8009f66:	2301      	movne	r3, #1
 8009f68:	0692      	lsls	r2, r2, #26
 8009f6a:	d42b      	bmi.n	8009fc4 <_printf_common+0xb0>
 8009f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f70:	4649      	mov	r1, r9
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	3001      	adds	r0, #1
 8009f78:	d01e      	beq.n	8009fb8 <_printf_common+0xa4>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	68e5      	ldr	r5, [r4, #12]
 8009f7e:	6832      	ldr	r2, [r6, #0]
 8009f80:	f003 0306 	and.w	r3, r3, #6
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	bf08      	it	eq
 8009f88:	1aad      	subeq	r5, r5, r2
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	6922      	ldr	r2, [r4, #16]
 8009f8e:	bf0c      	ite	eq
 8009f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f94:	2500      	movne	r5, #0
 8009f96:	4293      	cmp	r3, r2
 8009f98:	bfc4      	itt	gt
 8009f9a:	1a9b      	subgt	r3, r3, r2
 8009f9c:	18ed      	addgt	r5, r5, r3
 8009f9e:	2600      	movs	r6, #0
 8009fa0:	341a      	adds	r4, #26
 8009fa2:	42b5      	cmp	r5, r6
 8009fa4:	d11a      	bne.n	8009fdc <_printf_common+0xc8>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e008      	b.n	8009fbc <_printf_common+0xa8>
 8009faa:	2301      	movs	r3, #1
 8009fac:	4652      	mov	r2, sl
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	47c0      	blx	r8
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d103      	bne.n	8009fc0 <_printf_common+0xac>
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc0:	3501      	adds	r5, #1
 8009fc2:	e7c6      	b.n	8009f52 <_printf_common+0x3e>
 8009fc4:	18e1      	adds	r1, r4, r3
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	2030      	movs	r0, #48	; 0x30
 8009fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fce:	4422      	add	r2, r4
 8009fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fd8:	3302      	adds	r3, #2
 8009fda:	e7c7      	b.n	8009f6c <_printf_common+0x58>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c0      	blx	r8
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d0e6      	beq.n	8009fb8 <_printf_common+0xa4>
 8009fea:	3601      	adds	r6, #1
 8009fec:	e7d9      	b.n	8009fa2 <_printf_common+0x8e>
	...

08009ff0 <_printf_i>:
 8009ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	4691      	mov	r9, r2
 8009ff8:	7e27      	ldrb	r7, [r4, #24]
 8009ffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ffc:	2f78      	cmp	r7, #120	; 0x78
 8009ffe:	4680      	mov	r8, r0
 800a000:	469a      	mov	sl, r3
 800a002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a006:	d807      	bhi.n	800a018 <_printf_i+0x28>
 800a008:	2f62      	cmp	r7, #98	; 0x62
 800a00a:	d80a      	bhi.n	800a022 <_printf_i+0x32>
 800a00c:	2f00      	cmp	r7, #0
 800a00e:	f000 80d8 	beq.w	800a1c2 <_printf_i+0x1d2>
 800a012:	2f58      	cmp	r7, #88	; 0x58
 800a014:	f000 80a3 	beq.w	800a15e <_printf_i+0x16e>
 800a018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a01c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a020:	e03a      	b.n	800a098 <_printf_i+0xa8>
 800a022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a026:	2b15      	cmp	r3, #21
 800a028:	d8f6      	bhi.n	800a018 <_printf_i+0x28>
 800a02a:	a001      	add	r0, pc, #4	; (adr r0, 800a030 <_printf_i+0x40>)
 800a02c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a030:	0800a089 	.word	0x0800a089
 800a034:	0800a09d 	.word	0x0800a09d
 800a038:	0800a019 	.word	0x0800a019
 800a03c:	0800a019 	.word	0x0800a019
 800a040:	0800a019 	.word	0x0800a019
 800a044:	0800a019 	.word	0x0800a019
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	0800a019 	.word	0x0800a019
 800a050:	0800a019 	.word	0x0800a019
 800a054:	0800a019 	.word	0x0800a019
 800a058:	0800a019 	.word	0x0800a019
 800a05c:	0800a1a9 	.word	0x0800a1a9
 800a060:	0800a0cd 	.word	0x0800a0cd
 800a064:	0800a18b 	.word	0x0800a18b
 800a068:	0800a019 	.word	0x0800a019
 800a06c:	0800a019 	.word	0x0800a019
 800a070:	0800a1cb 	.word	0x0800a1cb
 800a074:	0800a019 	.word	0x0800a019
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a019 	.word	0x0800a019
 800a080:	0800a019 	.word	0x0800a019
 800a084:	0800a193 	.word	0x0800a193
 800a088:	680b      	ldr	r3, [r1, #0]
 800a08a:	1d1a      	adds	r2, r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	600a      	str	r2, [r1, #0]
 800a090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a098:	2301      	movs	r3, #1
 800a09a:	e0a3      	b.n	800a1e4 <_printf_i+0x1f4>
 800a09c:	6825      	ldr	r5, [r4, #0]
 800a09e:	6808      	ldr	r0, [r1, #0]
 800a0a0:	062e      	lsls	r6, r5, #24
 800a0a2:	f100 0304 	add.w	r3, r0, #4
 800a0a6:	d50a      	bpl.n	800a0be <_printf_i+0xce>
 800a0a8:	6805      	ldr	r5, [r0, #0]
 800a0aa:	600b      	str	r3, [r1, #0]
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	da03      	bge.n	800a0b8 <_printf_i+0xc8>
 800a0b0:	232d      	movs	r3, #45	; 0x2d
 800a0b2:	426d      	negs	r5, r5
 800a0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b8:	485e      	ldr	r0, [pc, #376]	; (800a234 <_printf_i+0x244>)
 800a0ba:	230a      	movs	r3, #10
 800a0bc:	e019      	b.n	800a0f2 <_printf_i+0x102>
 800a0be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0c2:	6805      	ldr	r5, [r0, #0]
 800a0c4:	600b      	str	r3, [r1, #0]
 800a0c6:	bf18      	it	ne
 800a0c8:	b22d      	sxthne	r5, r5
 800a0ca:	e7ef      	b.n	800a0ac <_printf_i+0xbc>
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	1d18      	adds	r0, r3, #4
 800a0d2:	6008      	str	r0, [r1, #0]
 800a0d4:	0628      	lsls	r0, r5, #24
 800a0d6:	d501      	bpl.n	800a0dc <_printf_i+0xec>
 800a0d8:	681d      	ldr	r5, [r3, #0]
 800a0da:	e002      	b.n	800a0e2 <_printf_i+0xf2>
 800a0dc:	0669      	lsls	r1, r5, #25
 800a0de:	d5fb      	bpl.n	800a0d8 <_printf_i+0xe8>
 800a0e0:	881d      	ldrh	r5, [r3, #0]
 800a0e2:	4854      	ldr	r0, [pc, #336]	; (800a234 <_printf_i+0x244>)
 800a0e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2308      	moveq	r3, #8
 800a0ea:	230a      	movne	r3, #10
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0f2:	6866      	ldr	r6, [r4, #4]
 800a0f4:	60a6      	str	r6, [r4, #8]
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	bfa2      	ittt	ge
 800a0fa:	6821      	ldrge	r1, [r4, #0]
 800a0fc:	f021 0104 	bicge.w	r1, r1, #4
 800a100:	6021      	strge	r1, [r4, #0]
 800a102:	b90d      	cbnz	r5, 800a108 <_printf_i+0x118>
 800a104:	2e00      	cmp	r6, #0
 800a106:	d04d      	beq.n	800a1a4 <_printf_i+0x1b4>
 800a108:	4616      	mov	r6, r2
 800a10a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a10e:	fb03 5711 	mls	r7, r3, r1, r5
 800a112:	5dc7      	ldrb	r7, [r0, r7]
 800a114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a118:	462f      	mov	r7, r5
 800a11a:	42bb      	cmp	r3, r7
 800a11c:	460d      	mov	r5, r1
 800a11e:	d9f4      	bls.n	800a10a <_printf_i+0x11a>
 800a120:	2b08      	cmp	r3, #8
 800a122:	d10b      	bne.n	800a13c <_printf_i+0x14c>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	07df      	lsls	r7, r3, #31
 800a128:	d508      	bpl.n	800a13c <_printf_i+0x14c>
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	6861      	ldr	r1, [r4, #4]
 800a12e:	4299      	cmp	r1, r3
 800a130:	bfde      	ittt	le
 800a132:	2330      	movle	r3, #48	; 0x30
 800a134:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a13c:	1b92      	subs	r2, r2, r6
 800a13e:	6122      	str	r2, [r4, #16]
 800a140:	f8cd a000 	str.w	sl, [sp]
 800a144:	464b      	mov	r3, r9
 800a146:	aa03      	add	r2, sp, #12
 800a148:	4621      	mov	r1, r4
 800a14a:	4640      	mov	r0, r8
 800a14c:	f7ff fee2 	bl	8009f14 <_printf_common>
 800a150:	3001      	adds	r0, #1
 800a152:	d14c      	bne.n	800a1ee <_printf_i+0x1fe>
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	b004      	add	sp, #16
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	4835      	ldr	r0, [pc, #212]	; (800a234 <_printf_i+0x244>)
 800a160:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	680e      	ldr	r6, [r1, #0]
 800a168:	061f      	lsls	r7, r3, #24
 800a16a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a16e:	600e      	str	r6, [r1, #0]
 800a170:	d514      	bpl.n	800a19c <_printf_i+0x1ac>
 800a172:	07d9      	lsls	r1, r3, #31
 800a174:	bf44      	itt	mi
 800a176:	f043 0320 	orrmi.w	r3, r3, #32
 800a17a:	6023      	strmi	r3, [r4, #0]
 800a17c:	b91d      	cbnz	r5, 800a186 <_printf_i+0x196>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	f023 0320 	bic.w	r3, r3, #32
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	2310      	movs	r3, #16
 800a188:	e7b0      	b.n	800a0ec <_printf_i+0xfc>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f043 0320 	orr.w	r3, r3, #32
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	2378      	movs	r3, #120	; 0x78
 800a194:	4828      	ldr	r0, [pc, #160]	; (800a238 <_printf_i+0x248>)
 800a196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a19a:	e7e3      	b.n	800a164 <_printf_i+0x174>
 800a19c:	065e      	lsls	r6, r3, #25
 800a19e:	bf48      	it	mi
 800a1a0:	b2ad      	uxthmi	r5, r5
 800a1a2:	e7e6      	b.n	800a172 <_printf_i+0x182>
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	e7bb      	b.n	800a120 <_printf_i+0x130>
 800a1a8:	680b      	ldr	r3, [r1, #0]
 800a1aa:	6826      	ldr	r6, [r4, #0]
 800a1ac:	6960      	ldr	r0, [r4, #20]
 800a1ae:	1d1d      	adds	r5, r3, #4
 800a1b0:	600d      	str	r5, [r1, #0]
 800a1b2:	0635      	lsls	r5, r6, #24
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	d501      	bpl.n	800a1bc <_printf_i+0x1cc>
 800a1b8:	6018      	str	r0, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <_printf_i+0x1d2>
 800a1bc:	0671      	lsls	r1, r6, #25
 800a1be:	d5fb      	bpl.n	800a1b8 <_printf_i+0x1c8>
 800a1c0:	8018      	strh	r0, [r3, #0]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	e7ba      	b.n	800a140 <_printf_i+0x150>
 800a1ca:	680b      	ldr	r3, [r1, #0]
 800a1cc:	1d1a      	adds	r2, r3, #4
 800a1ce:	600a      	str	r2, [r1, #0]
 800a1d0:	681e      	ldr	r6, [r3, #0]
 800a1d2:	6862      	ldr	r2, [r4, #4]
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7f6 f812 	bl	8000200 <memchr>
 800a1dc:	b108      	cbz	r0, 800a1e2 <_printf_i+0x1f2>
 800a1de:	1b80      	subs	r0, r0, r6
 800a1e0:	6060      	str	r0, [r4, #4]
 800a1e2:	6863      	ldr	r3, [r4, #4]
 800a1e4:	6123      	str	r3, [r4, #16]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ec:	e7a8      	b.n	800a140 <_printf_i+0x150>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	47d0      	blx	sl
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d0ab      	beq.n	800a154 <_printf_i+0x164>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	079b      	lsls	r3, r3, #30
 800a200:	d413      	bmi.n	800a22a <_printf_i+0x23a>
 800a202:	68e0      	ldr	r0, [r4, #12]
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	4298      	cmp	r0, r3
 800a208:	bfb8      	it	lt
 800a20a:	4618      	movlt	r0, r3
 800a20c:	e7a4      	b.n	800a158 <_printf_i+0x168>
 800a20e:	2301      	movs	r3, #1
 800a210:	4632      	mov	r2, r6
 800a212:	4649      	mov	r1, r9
 800a214:	4640      	mov	r0, r8
 800a216:	47d0      	blx	sl
 800a218:	3001      	adds	r0, #1
 800a21a:	d09b      	beq.n	800a154 <_printf_i+0x164>
 800a21c:	3501      	adds	r5, #1
 800a21e:	68e3      	ldr	r3, [r4, #12]
 800a220:	9903      	ldr	r1, [sp, #12]
 800a222:	1a5b      	subs	r3, r3, r1
 800a224:	42ab      	cmp	r3, r5
 800a226:	dcf2      	bgt.n	800a20e <_printf_i+0x21e>
 800a228:	e7eb      	b.n	800a202 <_printf_i+0x212>
 800a22a:	2500      	movs	r5, #0
 800a22c:	f104 0619 	add.w	r6, r4, #25
 800a230:	e7f5      	b.n	800a21e <_printf_i+0x22e>
 800a232:	bf00      	nop
 800a234:	0800aef1 	.word	0x0800aef1
 800a238:	0800af02 	.word	0x0800af02

0800a23c <_sbrk_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d06      	ldr	r5, [pc, #24]	; (800a258 <_sbrk_r+0x1c>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	f7fc fad2 	bl	80067f0 <_sbrk>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_sbrk_r+0x1a>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_sbrk_r+0x1a>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	200011b0 	.word	0x200011b0

0800a25c <memmove>:
 800a25c:	4288      	cmp	r0, r1
 800a25e:	b510      	push	{r4, lr}
 800a260:	eb01 0402 	add.w	r4, r1, r2
 800a264:	d902      	bls.n	800a26c <memmove+0x10>
 800a266:	4284      	cmp	r4, r0
 800a268:	4623      	mov	r3, r4
 800a26a:	d807      	bhi.n	800a27c <memmove+0x20>
 800a26c:	1e43      	subs	r3, r0, #1
 800a26e:	42a1      	cmp	r1, r4
 800a270:	d008      	beq.n	800a284 <memmove+0x28>
 800a272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a27a:	e7f8      	b.n	800a26e <memmove+0x12>
 800a27c:	4402      	add	r2, r0
 800a27e:	4601      	mov	r1, r0
 800a280:	428a      	cmp	r2, r1
 800a282:	d100      	bne.n	800a286 <memmove+0x2a>
 800a284:	bd10      	pop	{r4, pc}
 800a286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a28e:	e7f7      	b.n	800a280 <memmove+0x24>

0800a290 <__malloc_lock>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__malloc_lock+0x8>)
 800a292:	f000 b861 	b.w	800a358 <__retarget_lock_acquire_recursive>
 800a296:	bf00      	nop
 800a298:	200011b8 	.word	0x200011b8

0800a29c <__malloc_unlock>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__malloc_unlock+0x8>)
 800a29e:	f000 b85c 	b.w	800a35a <__retarget_lock_release_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	200011b8 	.word	0x200011b8

0800a2a8 <_free_r>:
 800a2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2aa:	2900      	cmp	r1, #0
 800a2ac:	d048      	beq.n	800a340 <_free_r+0x98>
 800a2ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b2:	9001      	str	r0, [sp, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2ba:	bfb8      	it	lt
 800a2bc:	18e4      	addlt	r4, r4, r3
 800a2be:	f7ff ffe7 	bl	800a290 <__malloc_lock>
 800a2c2:	4a20      	ldr	r2, [pc, #128]	; (800a344 <_free_r+0x9c>)
 800a2c4:	9801      	ldr	r0, [sp, #4]
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	b933      	cbnz	r3, 800a2da <_free_r+0x32>
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	6014      	str	r4, [r2, #0]
 800a2d0:	b003      	add	sp, #12
 800a2d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d6:	f7ff bfe1 	b.w	800a29c <__malloc_unlock>
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	d90b      	bls.n	800a2f6 <_free_r+0x4e>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	1862      	adds	r2, r4, r1
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	bf04      	itt	eq
 800a2e6:	681a      	ldreq	r2, [r3, #0]
 800a2e8:	685b      	ldreq	r3, [r3, #4]
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	bf04      	itt	eq
 800a2ee:	1852      	addeq	r2, r2, r1
 800a2f0:	6022      	streq	r2, [r4, #0]
 800a2f2:	602c      	str	r4, [r5, #0]
 800a2f4:	e7ec      	b.n	800a2d0 <_free_r+0x28>
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	b10b      	cbz	r3, 800a300 <_free_r+0x58>
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d9fa      	bls.n	800a2f6 <_free_r+0x4e>
 800a300:	6811      	ldr	r1, [r2, #0]
 800a302:	1855      	adds	r5, r2, r1
 800a304:	42a5      	cmp	r5, r4
 800a306:	d10b      	bne.n	800a320 <_free_r+0x78>
 800a308:	6824      	ldr	r4, [r4, #0]
 800a30a:	4421      	add	r1, r4
 800a30c:	1854      	adds	r4, r2, r1
 800a30e:	42a3      	cmp	r3, r4
 800a310:	6011      	str	r1, [r2, #0]
 800a312:	d1dd      	bne.n	800a2d0 <_free_r+0x28>
 800a314:	681c      	ldr	r4, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	6053      	str	r3, [r2, #4]
 800a31a:	4421      	add	r1, r4
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	e7d7      	b.n	800a2d0 <_free_r+0x28>
 800a320:	d902      	bls.n	800a328 <_free_r+0x80>
 800a322:	230c      	movs	r3, #12
 800a324:	6003      	str	r3, [r0, #0]
 800a326:	e7d3      	b.n	800a2d0 <_free_r+0x28>
 800a328:	6825      	ldr	r5, [r4, #0]
 800a32a:	1961      	adds	r1, r4, r5
 800a32c:	428b      	cmp	r3, r1
 800a32e:	bf04      	itt	eq
 800a330:	6819      	ldreq	r1, [r3, #0]
 800a332:	685b      	ldreq	r3, [r3, #4]
 800a334:	6063      	str	r3, [r4, #4]
 800a336:	bf04      	itt	eq
 800a338:	1949      	addeq	r1, r1, r5
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	6054      	str	r4, [r2, #4]
 800a33e:	e7c7      	b.n	800a2d0 <_free_r+0x28>
 800a340:	b003      	add	sp, #12
 800a342:	bd30      	pop	{r4, r5, pc}
 800a344:	20001058 	.word	0x20001058

0800a348 <_malloc_usable_size_r>:
 800a348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34c:	1f18      	subs	r0, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfbc      	itt	lt
 800a352:	580b      	ldrlt	r3, [r1, r0]
 800a354:	18c0      	addlt	r0, r0, r3
 800a356:	4770      	bx	lr

0800a358 <__retarget_lock_acquire_recursive>:
 800a358:	4770      	bx	lr

0800a35a <__retarget_lock_release_recursive>:
 800a35a:	4770      	bx	lr

0800a35c <_init>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr

0800a368 <_fini>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr
